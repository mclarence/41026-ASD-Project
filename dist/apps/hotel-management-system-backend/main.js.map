{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"tslib\"","webpack:///./src/config.ts","webpack:///external commonjs \"minimist\"","webpack:///external node-commonjs \"fs\"","webpack:///./src/startServer.ts","webpack:///./src/logger.ts","webpack:///external commonjs \"pino\"","webpack:///external commonjs \"pino-http\"","webpack:///external commonjs \"pino-pretty\"","webpack:///./src/database/db.ts","webpack:///./src/database/sql/queries.ts","webpack:///./src/util/camelizeColumns.ts","webpack:///external commonjs \"pg-promise\"","webpack:///external commonjs \"express\"","webpack:///./src/resources/usersRoute.ts","webpack:///./src/util/strings.ts","webpack:///./src/util/hashPassword.ts","webpack:///external node-commonjs \"crypto\"","webpack:///external commonjs \"jsonwebtoken\"","webpack:///./src/util/sendResponse.ts","webpack:///external commonjs \"http-status-codes\"","webpack:///external commonjs \"joi\"","webpack:///../../libs/models/src/lib/enums/LogEventTypes.ts","webpack:///./src/resources/roomsRoute.ts","webpack:///../../libs/models/src/index.ts","webpack:///../../libs/models/src/lib/models.ts","webpack:///../../libs/models/src/lib/user.ts","webpack:///../../libs/models/src/lib/room.ts","webpack:///../../libs/models/src/lib/role.ts","webpack:///../../libs/models/src/lib/enums/PriceUnits.ts","webpack:///../../libs/models/src/lib/enums/RoomStatuses.ts","webpack:///../../libs/models/src/lib/enums/TicketStatuses.ts","webpack:///../../libs/models/src/lib/serverConfig.ts","webpack:///../../libs/models/src/lib/apiResponse.ts","webpack:///../../libs/models/src/lib/logs.ts","webpack:///../../libs/models/src/lib/calendarNotes.ts","webpack:///../../libs/models/src/lib/guest.ts","webpack:///../../libs/models/src/lib/reservation.ts","webpack:///../../libs/models/src/lib/paymentMethod.ts","webpack:///../../libs/models/src/lib/transaction.ts","webpack:///../../libs/models/src/lib/ticket.ts","webpack:///../../libs/models/src/lib/ticketMessages.ts","webpack:///external node-commonjs \"path\"","webpack:///./src/database/users.ts","webpack:///./src/database/roles.ts","webpack:///./src/database/tokens.ts","webpack:///./src/middleware/authentication.ts","webpack:///./src/middleware/authorization.ts","webpack:///./src/util/checkPermissions.ts","webpack:///external commonjs \"process\"","webpack:///./src/resources/rolesRoute.ts","webpack:///./src/resources/logsRoute.ts","webpack:///./src/database/logs.ts","webpack:///./src/database/guests.ts","webpack:///./src/resources/guestsRoute.ts","webpack:///./src/database/reservations.ts","webpack:///./src/resources/reservationsRoute.ts","webpack:///../../libs/models/src/lib/enums/ReservationStatuses.ts","webpack:///external commonjs \"dayjs\"","webpack:///external commonjs \"dayjs/plugin/utc\"","webpack:///./src/database/rooms.ts","webpack:///./src/database/paymentMethods.ts","webpack:///./src/resources/paymentMethodRoute.ts","webpack:///../../libs/models/src/lib/enums/PaymentMethodTypes.ts","webpack:///./src/database/transaction.ts","webpack:///./src/resources/transactionsRoute.ts","webpack:///./src/database/calendar.ts","webpack:///./src/resources/calendarRoute.ts","webpack:///./src/database/tickets.ts","webpack:///./src/resources/ticketsRoute.ts","webpack:///./src/util/logEvent.ts","webpack:///external node-commonjs \"os\"","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"tslib\");","import {ServerConfig} from \"@hotel-management-system/models\";\r\nimport minimist from \"minimist\";\r\nimport fs from \"fs\";\r\n\r\ninterface ApplicationConfig {\r\n    loadFromFile: (pathToFile: string) => Promise<void>,\r\n    loadFromArgs: (args: string[]) => Promise<void>,\r\n    getConfig: () => ServerConfig\r\n}\r\n\r\nconst makeConfig = (): ApplicationConfig => {\r\n    let _config: ServerConfig = {\r\n        database: {\r\n            database: null,\r\n            host: null,\r\n            password: null,\r\n            port: 3333,\r\n            user: null\r\n        },\r\n        jwt: {\r\n            secret: null\r\n        },\r\n        server: {\r\n            listenAddress: \"\",\r\n            port: 0\r\n        }\r\n    }\r\n\r\n    const loadFromFile = (pathToFile: string): Promise<void> => {\r\n        return new Promise((resolve, reject) => {\r\n            if (!fs.existsSync(pathToFile)) {\r\n                reject(new Error(\"Config file does not exist\"));\r\n            }\r\n\r\n            let configFile: ServerConfig;\r\n            try {\r\n                configFile = JSON.parse(fs.readFileSync(pathToFile, 'utf8'));\r\n            } catch (e) {\r\n                reject(new Error(\"Config file is not valid json\"));\r\n            }\r\n\r\n            const requiredFields = ['database', 'database.host', 'database.port', 'database.database', 'database.user', 'database.password', 'jwt.secret'];\r\n            for (const field of requiredFields) {\r\n                const fieldParts = field.split('.');\r\n                let value = configFile;\r\n                for (const part of fieldParts) {\r\n                    if (value[part] === undefined) {\r\n                        reject(new Error(`Config file is missing required field ${field}`));\r\n                    }\r\n                    value = value[part];\r\n                }\r\n            }\r\n\r\n            if (configFile.server.listenAddress === undefined) {\r\n                configFile.server.listenAddress = \"127.0.0.1\";\r\n            }\r\n\r\n            if (configFile.server.port === undefined) {\r\n                configFile.server.port = 3333;\r\n            }\r\n\r\n            _config = configFile\r\n\r\n            resolve();\r\n        })\r\n    }\r\n\r\n    const loadFromArgs = (args: string[]): Promise<void> => {\r\n        return new Promise((resolve, reject) => {\r\n            enum ArgKeys {\r\n                LISTEN_ADDRESS = 'listenAddress',\r\n                LISTEN_PORT = 'listenPort',\r\n                DATABASE_HOST = 'database-host',\r\n                DATABASE_PORT = 'database-port',\r\n                DATABASE_NAME = 'database-name',\r\n                DATABASE_USER = 'database-user',\r\n                DATABASE_PASSWORD = 'database-password',\r\n                JWT_SECRET = 'jwt-secret'\r\n\r\n            }\r\n\r\n            const requriedArgs = [ArgKeys.DATABASE_HOST, ArgKeys.DATABASE_PORT, ArgKeys.DATABASE_NAME, ArgKeys.DATABASE_USER, ArgKeys.DATABASE_PASSWORD, ArgKeys.JWT_SECRET]\r\n            const parsedArgs = minimist(args, {\r\n                //string: ['listenAddress', 'database-host', 'database-name', 'database-user', 'database-password', 'jwt-secret'],\r\n                string: [ArgKeys.LISTEN_ADDRESS, ArgKeys.DATABASE_HOST, ArgKeys.DATABASE_NAME, ArgKeys.DATABASE_USER, ArgKeys.DATABASE_PASSWORD, ArgKeys.JWT_SECRET]\r\n            })\r\n\r\n            for (const arg of requriedArgs) {\r\n                if (parsedArgs[arg] === undefined) {\r\n                    reject(new Error(`Missing required argument ${arg}`));\r\n                }\r\n            }\r\n\r\n            _config.server.listenAddress = parsedArgs[ArgKeys.LISTEN_ADDRESS] || \"127.0.0.1\"\r\n            _config.server.port = parsedArgs[ArgKeys.LISTEN_PORT] || 3333\r\n            _config.database.host = parsedArgs[ArgKeys.DATABASE_HOST]\r\n            _config.database.port = parsedArgs[ArgKeys.DATABASE_PORT]\r\n            _config.database.database = parsedArgs[ArgKeys.DATABASE_NAME]\r\n            _config.database.user = parsedArgs[ArgKeys.DATABASE_USER]\r\n            _config.database.password = parsedArgs[ArgKeys.DATABASE_PASSWORD]\r\n            _config.jwt.secret = parsedArgs[ArgKeys.JWT_SECRET]\r\n\r\n            resolve();\r\n        })\r\n    }\r\n\r\n    return {\r\n        getConfig: () => _config,\r\n        loadFromFile,\r\n        loadFromArgs,\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default makeConfig;","module.exports = require(\"minimist\");","module.exports = require(\"fs\");","import {expressLogger, logger} from \"./logger\";\r\nimport createDatabase from \"./database/db\";\r\nimport express, {Express} from \"express\";\r\nimport makeUsersRoute from \"./resources/usersRoute\";\r\nimport {makeRoomsRoute} from \"./resources/roomsRoute\";\r\nimport path from \"path\";\r\nimport {ApiResponse, Role, ServerConfig, User,} from \"@hotel-management-system/models\";\r\nimport makeUsersDAO, {IUsersDAO} from \"./database/users\";\r\nimport makeRolesDAO, {IRolesDAO} from \"./database/roles\";\r\nimport makeTokenRevocationListDAO from \"./database/tokens\";\r\nimport makeAuthenticationMiddleware from \"./middleware/authentication\";\r\nimport makeAuthorizationMiddleware from \"./middleware/authorization\";\r\nimport * as process from \"process\";\r\n\r\n// hash the password\r\nimport hashPassword from \"./util/hashPassword\";\r\nimport makeRolesRoute from \"./resources/rolesRoute\";\r\nimport makeLogsRoute from \"./resources/logsRoute\";\r\nimport makeLogsDAO from \"./database/logs\";\r\nimport makeGuestDAO from \"./database/guests\";\r\nimport makeGuestsRoute from \"./resources/guestsRoute\";\r\nimport {makeReservationDAO} from \"./database/reservations\";\r\nimport {makeReservationsRoute} from \"./resources/reservationsRoute\";\r\nimport {makeRoomsDAO} from \"./database/rooms\";\r\nimport {makePaymentMethodsDAO} from \"./database/paymentMethods\";\r\nimport {makePaymentMethodRoute} from \"./resources/paymentMethodRoute\";\r\nimport {makeTransactionsDAO} from \"./database/transaction\";\r\nimport {makeTransactionsRoute} from \"./resources/transactionsRoute\";\r\nimport {makeNotesDAO} from \"./database/calendar\";\r\nimport {makeCalendarRoute} from \"./resources/calendarRoute\";\r\nimport {makeTicketsDAO} from \"./database/tickets\";\r\nimport {makeTicketsRoute} from \"./resources/ticketsRoute\";\r\nimport {makeEventLogger} from \"./util/logEvent\";\r\nimport sendResponse from \"./util/sendResponse\";\r\nimport strings from \"./util/strings\";\r\n\r\nconst createDefaultRoleAndAdmin = async (\r\n    rolesDAO: IRolesDAO,\r\n    usersDAO: IUsersDAO\r\n) => {\r\n    const DEFAULT_ROLE_ID = 1;\r\n    const DEFAULT_UID = 1;\r\n    const {checkRoleExists, addRole} = rolesDAO;\r\n\r\n    const superAdminRoleExists = await checkRoleExists(DEFAULT_ROLE_ID);\r\n\r\n    if (!superAdminRoleExists) {\r\n        const superAdminRole: Role = {\r\n            roleId: DEFAULT_ROLE_ID,\r\n            name: \"Super Admin\",\r\n            permissionData: [\"*\"],\r\n        };\r\n\r\n        await addRole(superAdminRole)\r\n            .then(() => {\r\n                logger.info(\"Created default role\");\r\n            })\r\n            .catch((err: any) => {\r\n                logger.fatal(\"Failed to create default role\");\r\n                logger.fatal(err);\r\n                process.exit(1);\r\n            });\r\n    }\r\n\r\n    const adminUserExists = await usersDAO.checkUserExists(\"admin\");\r\n\r\n    if (!adminUserExists) {\r\n        const user: User = {\r\n            email: \"admin@example.com\",\r\n            firstName: \"super\",\r\n            lastName: \"admin\",\r\n            phoneNumber: \"\",\r\n            position: \"Admin\",\r\n            userId: DEFAULT_UID,\r\n            username: \"admin\",\r\n            password: \"admin\",\r\n            passwordSalt: \"\",\r\n            roleId: DEFAULT_ROLE_ID,\r\n        };\r\n\r\n        // generate a random password salt\r\n        user.passwordSalt =\r\n            Math.random().toString(36).substring(2, 15) +\r\n            Math.random().toString(36).substring(2, 15);\r\n        user.password = hashPassword(user.password, user.passwordSalt);\r\n\r\n        await usersDAO\r\n            .createUser(user)\r\n            .then(() => {\r\n                logger.info(\"Created default user\");\r\n            })\r\n            .catch((err: any) => {\r\n                logger.fatal(\"Failed to create default user\");\r\n                logger.fatal(err);\r\n                process.exit(1);\r\n            });\r\n    }\r\n};\r\n\r\ninterface IServer {\r\n    app: Express;\r\n    start: () => void;\r\n}\r\n\r\nconst startServer = async (serverOptions: ServerConfig): Promise<IServer> => {\r\n    logger.info(\"Starting server\");\r\n\r\n    const db = createDatabase(serverOptions);\r\n\r\n    await db\r\n        .testConnection()\r\n        .then(() => {\r\n            return db.createTables();\r\n        })\r\n        .catch((err: any) => {\r\n            logger.fatal(\"Failed to connect to database\");\r\n            logger.fatal(err);\r\n            process.exit(1);\r\n        });\r\n\r\n    const usersDAO = makeUsersDAO(db.db)\r\n    const rolesDAO = makeRolesDAO(db.db)\r\n\r\n    const logsDAO = makeLogsDAO(db.db)\r\n    const eventLogger = makeEventLogger(logsDAO)\r\n\r\n    const tokenRevocationListDAO = makeTokenRevocationListDAO(db.db)\r\n    const calendarDAO = makeNotesDAO(db.db)\r\n    const guestsDAO = makeGuestDAO(db.db);\r\n    const reservationsDAO = makeReservationDAO(db.db);\r\n    const roomsDAO = makeRoomsDAO(db.db);\r\n    const paymentMethodsDAO = makePaymentMethodsDAO(db.db)\r\n    const transactionsDAO = makeTransactionsDAO(db.db)\r\n    const ticketsDAO = makeTicketsDAO(db.db)\r\n\r\n    await createDefaultRoleAndAdmin(rolesDAO, usersDAO);\r\n\r\n    const authenticationMiddleware = makeAuthenticationMiddleware(\r\n        serverOptions.jwt.secret,\r\n        tokenRevocationListDAO\r\n    );\r\n\r\n    const authorizationMiddleware = makeAuthorizationMiddleware(rolesDAO);\r\n\r\n    const app = express();\r\n\r\n    app.use(express.json());\r\n    app.use(expressLogger);\r\n\r\n    const usersRoute = makeUsersRoute(\r\n        usersDAO,\r\n        rolesDAO,\r\n        tokenRevocationListDAO,\r\n        authenticationMiddleware,\r\n        authorizationMiddleware,\r\n        eventLogger,\r\n        serverOptions.jwt.secret\r\n    );\r\n\r\n    const rolesRoute = makeRolesRoute(\r\n        rolesDAO,\r\n        eventLogger,\r\n        authenticationMiddleware,\r\n        authorizationMiddleware\r\n    );\r\n\r\n    const guestsRoute = makeGuestsRoute(\r\n        guestsDAO,\r\n        reservationsDAO,\r\n        eventLogger,\r\n        authenticationMiddleware,\r\n        authorizationMiddleware\r\n    );\r\n\r\n    const reservationsRoute = makeReservationsRoute(\r\n        reservationsDAO,\r\n        guestsDAO,\r\n        roomsDAO,\r\n        eventLogger,\r\n        authenticationMiddleware,\r\n        authorizationMiddleware\r\n    );\r\n\r\n    const roomsRoute = makeRoomsRoute(\r\n        roomsDAO,\r\n        eventLogger,\r\n        authenticationMiddleware,\r\n        authorizationMiddleware\r\n    );\r\n\r\n    const paymentMethodsRoute = makePaymentMethodRoute(\r\n        paymentMethodsDAO,\r\n        guestsDAO,\r\n        eventLogger,\r\n        authenticationMiddleware,\r\n        authorizationMiddleware\r\n    )\r\n\r\n    const logsRoute = makeLogsRoute(\r\n        logsDAO,\r\n        authenticationMiddleware,\r\n        authorizationMiddleware\r\n    )\r\n\r\n    const calendarRoute = makeCalendarRoute(\r\n        calendarDAO,\r\n        eventLogger,\r\n        authenticationMiddleware,\r\n        authorizationMiddleware\r\n    );\r\n\r\n    const transactionsRoute = makeTransactionsRoute(\r\n        transactionsDAO,\r\n        guestsDAO,\r\n        eventLogger,\r\n        authenticationMiddleware,\r\n        authorizationMiddleware\r\n    )\r\n\r\n    const ticketsRoute = makeTicketsRoute(\r\n        ticketsDAO,\r\n        usersDAO,\r\n        eventLogger,\r\n        authenticationMiddleware,\r\n        authorizationMiddleware\r\n    )\r\n\r\n    app.use(\"/api/users\", usersRoute.router);\r\n    app.use(\"/api/roles\", rolesRoute.router);\r\n    app.use(\"/api/rooms\", roomsRoute.router);\r\n    app.use(\"/api/logs\", logsRoute.router);\r\n    app.use(\"/api/calendar\", calendarRoute.router);\r\n    app.use(\"/api/rooms\", roomsRoute.router);\r\n    app.use(\"/api/guests\", guestsRoute.router);\r\n    app.use(\"/api/reservations\", reservationsRoute.router);\r\n    app.use(\"/api/payment-methods\", paymentMethodsRoute.router);\r\n    app.use(\"/api/transactions\", transactionsRoute.router);\r\n    app.use(\"/api/tickets\", ticketsRoute.router);\r\n    app.use(express.static(path.join(__dirname, \"assets\")));\r\n\r\n    // catch all errors\r\n    app.use((err: any, req, res, next) => {\r\n        if (\"body\" in err && err.status === 400 && err instanceof SyntaxError) {\r\n            res.status(400).send({\r\n                success: false,\r\n                message: \"Invalid request body\",\r\n                statusCode: 400,\r\n                data: err.message,\r\n            } as ApiResponse<string>);\r\n        } else {\r\n             return sendResponse<any>(res, {\r\n                success: false,\r\n                message: strings.api.generic.error,\r\n                statusCode: 500,\r\n                data: err.message,\r\n            })\r\n        }\r\n    });\r\n\r\n    app.get(\"/api\", (req, res) => {\r\n        res.send({message: \"Welcome to hotel-management-system-backend!\"});\r\n    });\r\n\r\n    // serve react app from assets folder\r\n    app.get(\"*\", function (req, res) {\r\n        res.sendFile(\"index.html\", {root: path.join(__dirname, \"assets\")});\r\n    });\r\n\r\n    const start = () => {\r\n        const port = serverOptions.server.port;\r\n        const server = app.listen(port, () => {\r\n            logger.info(`Listening at http://localhost:${port}/api`);\r\n        });\r\n        server.on(\"error\", console.error);\r\n    };\r\n\r\n    return {\r\n        app,\r\n        start,\r\n    };\r\n};\r\n\r\nexport default startServer;\r\n","// check if the environment is development and if so, import pino-pretty\r\nimport pino, { Logger } from \"pino\";\r\nimport pinoHttp, {HttpLogger} from \"pino-http\";\r\n\r\nimport pretty from \"pino-pretty\";\r\n\r\nlet logger: Logger<any>;\r\nlet expressLogger: HttpLogger<any>;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n    logger = pino(pretty())\r\n    logger.level = \"debug\";\r\n    expressLogger = pinoHttp(pretty());\r\n} else {\r\n    logger = pino();\r\n    expressLogger = pinoHttp();\r\n    if (process.env[\"NODE_ENV\"] === \"test\") {\r\n        logger.level ='silent'\r\n        expressLogger.logger.level = 'silent';\r\n    }\r\n}\r\n\r\nexport { logger, expressLogger };","module.exports = require(\"pino\");","module.exports = require(\"pino-http\");","module.exports = require(\"pino-pretty\");","import {logger} from \"../logger\";\r\nimport queries from \"./sql/queries\";\r\nimport {camelizeColumns} from \"../util/camelizeColumns\";\r\nimport {IDatabase} from \"pg-promise\";\r\nimport {ServerConfig} from \"@hotel-management-system/models\";\r\n\r\nimport pg_promise from \"pg-promise\";\r\n\r\ninterface Database {\r\n    db: IDatabase<any, any>,\r\n    createTables: () => Promise<void>,\r\n    testConnection: () => Promise<void>,\r\n}\r\n\r\n/**\r\n * Create database\r\n * @param options - server options\r\n */\r\nconst createDatabase = (options: ServerConfig): Database => {\r\n\r\n    // disable warnings in test environment\r\n    let noWarnings = false;\r\n    if (process.env['NODE_ENV'] === 'test') {\r\n        noWarnings = true;\r\n    }\r\n\r\n    // create the database object\r\n    const pgp = pg_promise({\r\n        receive(e) {\r\n            camelizeColumns(e.data);\r\n        },\r\n        noWarnings: noWarnings\r\n    });\r\n\r\n\r\n    // create the database connection\r\n    const db = pgp({\r\n        host: options.database.host,\r\n        port: options.database.port,\r\n        database: options.database.database,\r\n        user: options.database.user,\r\n        password: options.database.password,\r\n    });\r\n\r\n    // test the database connection\r\n    const testConnection = (): Promise<void> => {\r\n        return new Promise<void>((resolve, reject) => {\r\n            db.connect()\r\n                .then((e) => {\r\n                    logger.debug(`Connected to database ${e.client.connectionParameters.host}`);\r\n                    resolve();\r\n                })\r\n                .catch((err) => {\r\n                    logger.fatal(\"Failed to connect to database\");\r\n                    logger.fatal(err);\r\n                    reject(err);\r\n                });\r\n        })\r\n\r\n    }\r\n\r\n    // create the tables\r\n    const createTables = async () => {\r\n        logger.debug(\"Creating tables\");\r\n        await db.none(queries.tables.createAll).then(() => {\r\n            logger.debug(\"Created tables\");\r\n        }).catch((err) => {\r\n            logger.fatal(\"Failed to create tables\");\r\n            logger.fatal(err);\r\n            process.exit(1);\r\n        });\r\n    }\r\n\r\n\r\n    return {\r\n        db,\r\n        createTables,\r\n        testConnection\r\n    }\r\n}\r\n\r\n\r\nexport default createDatabase;","const queries = {\r\n    tables: {\r\n        createAll: `\r\n            CREATE TABLE IF NOT EXISTS roles (\r\n            role_id SERIAL PRIMARY KEY,\r\n            name VARCHAR(255) UNIQUE NOT NULL,\r\n            permission_data text[] NOT NULL\r\n            );\r\n            CREATE TABLE IF NOT EXISTS users (\r\n                user_id SERIAL PRIMARY KEY,\r\n                username VARCHAR(255) UNIQUE NOT NULL,\r\n                password VARCHAR(255) NOT NULL,\r\n                password_salt VARCHAR(255) NOT NULL,\r\n                first_name VARCHAR(255) NOT NULL,\r\n                last_name VARCHAR(255) NOT NULL,\r\n                email VARCHAR(255) NOT NULL,\r\n                phone_number VARCHAR(255) NOT NULL,\r\n                position VARCHAR(255) NOT NULL,\r\n                role_id INTEGER NOT NULL,\r\n                FOREIGN KEY (role_id) REFERENCES roles(role_id)\r\n            );\r\n            CREATE TABLE IF NOT EXISTS token_revocation_list (\r\n                token_id SERIAL PRIMARY KEY,\r\n                token VARCHAR(255) NOT NULL,\r\n                revokedAt TIMESTAMP NOT NULL\r\n            );\r\n            CREATE TABLE IF NOT EXISTS logs (\r\n                log_id SERIAL PRIMARY KEY,\r\n                event_type VARCHAR(255) NOT NULL, \r\n                timestamp TIMESTAMP NOT NULL DEFAULT current_timestamp,\r\n                user_id INTEGER NOT NULL,\r\n                description TEXT,\r\n                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE\r\n            );\r\n            CREATE TABLE IF NOT EXISTS calendar_notes(\r\n                note_id SERIAL PRIMARY KEY,\r\n                date TIMESTAMP NOT NULL,\r\n                note VARCHAR(255)\r\n            );\r\n            CREATE TABLE IF NOT EXISTS guests (\r\n                guest_id SERIAL PRIMARY KEY,\r\n                first_name VARCHAR(255) NOT NULL,\r\n                last_name VARCHAR(255) NOT NULL,\r\n                email VARCHAR(255) NOT NULL,\r\n                phone_number VARCHAR(255) NOT NULL,\r\n                address VARCHAR(255) NOT NULL\r\n            );\r\n            CREATE TABLE IF NOT EXISTS rooms (\r\n                room_id SERIAL PRIMARY KEY,\r\n                room_code VARCHAR(255) UNIQUE NOT NULL,\r\n                price_per_night FLOAT NOT NULL,\r\n                description TEXT NOT NULL,\r\n                status VARCHAR(255) NOT NULL\r\n            );\r\n            CREATE TABLE IF NOT EXISTS reservations (\r\n                reservation_id SERIAL PRIMARY KEY,\r\n                room_id INTEGER NOT NULL,\r\n                guest_id INTEGER NOT NULL,\r\n                start_date TIMESTAMP NOT NULL,\r\n                end_date TIMESTAMP NOT NULL,\r\n                check_in_date TIMESTAMP,\r\n                check_out_date TIMESTAMP,\r\n                reservation_status VARCHAR(255) NOT NULL,\r\n                FOREIGN KEY (room_id) REFERENCES rooms(room_id),\r\n                FOREIGN KEY (guest_id) REFERENCES guests(guest_id) ON DELETE CASCADE\r\n            );\r\n            CREATE TABLE IF NOT EXISTS payment_methods (\r\n                payment_method_id SERIAL PRIMARY KEY,\r\n                guest_id INTEGER NOT NULL,\r\n                type VARCHAR(255) NOT NULL,\r\n                card_number VARCHAR(255),\r\n                card_cvv VARCHAR(255),\r\n                card_expiration DATE,\r\n                card_holder_name VARCHAR(255),\r\n                bank_account_number VARCHAR(255),\r\n                bank_bsb VARCHAR(255),\r\n                FOREIGN KEY (guest_id) REFERENCES guests(guest_id) ON DELETE CASCADE\r\n            );\r\n            CREATE TABLE IF NOT EXISTS transaction (\r\n                transaction_id SERIAL PRIMARY KEY,\r\n                payment_method_id INTEGER NOT NULL,\r\n                guest_id INTEGER NOT NULL,\r\n                amount FLOAT NOT NULL,\r\n                description VARCHAR(255) NOT NULL,\r\n                date TIMESTAMP NOT NULL,\r\n                FOREIGN KEY (payment_method_id) REFERENCES payment_methods(payment_method_id),\r\n                FOREIGN KEY (guest_id) REFERENCES guests(guest_id) ON DELETE CASCADE\r\n            );\r\n            CREATE TABLE IF NOT EXISTS tickets (\r\n                ticket_id SERIAL PRIMARY KEY,\r\n                user_id INTEGER NOT NULL,\r\n                title VARCHAR(255) NOT NULL,\r\n                description VARCHAR(255) NOT NULL,\r\n                status VARCHAR(255) NOT NULL,\r\n                date_opened TIMESTAMP NOT NULL,\r\n                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE\r\n            );\r\n            CREATE TABLE IF NOT EXISTS ticket_messages (\r\n                ticket_message_id SERIAL PRIMARY KEY,\r\n                ticket_id INTEGER NOT NULL,\r\n                user_id INTEGER NOT NULL,\r\n                message VARCHAR(255) NOT NULL,\r\n                date_created TIMESTAMP NOT NULL,\r\n                FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE\r\n            );\r\n        `,\r\n    },\r\n    tickets: {\r\n        getTicketById: `\r\n            SELECT * FROM tickets WHERE ticket_id = $1\r\n        `,\r\n        addTicket: `\r\n            INSERT INTO tickets (user_id, title, description, status, date_opened)\r\n            VALUES ($1, $2, $3, $4, $5)\r\n            RETURNING *\r\n        `,\r\n        updateTicket: `\r\n            UPDATE tickets\r\n            SET user_id = $1, title = $2, description = $3, status = $4, date_opened = $5\r\n            WHERE ticket_id = $6\r\n            RETURNING *\r\n        `,\r\n        deleteTicket: `\r\n            DELETE FROM tickets\r\n            WHERE ticket_id = $1\r\n        `,\r\n        getAllTickets: `\r\n            SELECT tickets.*, users.first_name as user_first_name, users.last_name as user_last_name FROM tickets\r\n            INNER JOIN users ON tickets.user_id = users.user_id\r\n        `,\r\n        addCommentToTicket: `\r\n            INSERT INTO ticket_messages (ticket_id, user_id, message, date_created)\r\n            VALUES ($1, $2, $3, $4)\r\n            RETURNING *\r\n        `,\r\n        fetchTicketComments: `\r\n            SELECT ticket_messages.*, users.first_name as user_first_name, users.last_name as user_last_name FROM ticket_messages\r\n            INNER JOIN users ON ticket_messages.user_id = users.user_id\r\n        `,\r\n        checkTicketExistsById: `\r\n            SELECT EXISTS(SELECT 1 FROM tickets WHERE ticket_id = $1)\r\n        `,\r\n        deleteTicketCommentsByTicketId: `\r\n            DELETE FROM ticket_messages\r\n            WHERE ticket_id = $1\r\n        `,\r\n    },\r\n    roles: {\r\n        checkRoleExistsByName: `\r\n            SELECT EXISTS(SELECT 1 FROM roles WHERE name = $1)\r\n        `,\r\n        getRoleById: `\r\n            SELECT * FROM roles WHERE role_id = $1\r\n        `,\r\n        checkRoleExists: `\r\n            SELECT EXISTS(SELECT 1 FROM roles WHERE role_id = $1)\r\n        `,\r\n        addRole: `\r\n            INSERT INTO roles (name, permission_data)\r\n            VALUES ($1, $2)\r\n            RETURNING *\r\n        `,\r\n        updateRole: `\r\n            UPDATE roles\r\n            SET name = $1, permission_data = $2\r\n            WHERE role_id = $3\r\n            RETURNING *\r\n        `,\r\n        getAllRoles: `\r\n            SELECT * FROM roles\r\n        `,\r\n        getUsersWithRoles: `\r\n            SELECT * FROM users WHERE role_id = $1\r\n        `,\r\n        deleteRole: `\r\n            DELETE FROM roles\r\n            WHERE role_id = $1\r\n        `,\r\n    },\r\n    users: {\r\n        getUserById: `\r\n            SELECT * FROM users WHERE user_id = $1\r\n        `,\r\n        getUserByUsername: `\r\n            SELECT * FROM users\r\n            WHERE username = $1\r\n        `,\r\n        createUser: `\r\n            INSERT INTO users (username, password, password_salt, first_name, last_name, email, phone_number, position, role_id)\r\n            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\r\n            RETURNING user_id\r\n        `,\r\n        updateUser: `\r\n            UPDATE users\r\n            SET username = $1, password = $2, password_salt = $3, first_name = $4, last_name = $5, email = $6, phone_number = $7, position = $8, role_id = $9\r\n            WHERE user_id = $10\r\n            RETURNING *\r\n        `,\r\n        deleteUser: `\r\n            DELETE FROM users\r\n            WHERE user_id = $1\r\n        `,\r\n        getAllUsers: `\r\n            SELECT users.*, roles.name as role_name FROM users\r\n            INNER JOIN roles ON users.role_id = roles.role_id\r\n        `,\r\n        searchUsers: `\r\n            SELECT * FROM users WHERE first_name ILIKE '%$1#%' OR last_name ILIKE '%$1#%'\r\n        `\r\n    },\r\n    tokenRevocationList: {\r\n        revokeToken: `\r\n            INSERT INTO token_revocation_list (token, revokedAt) VALUES ($1, $2)\r\n        `,\r\n        checkTokenRevoked: `\r\n            SELECT * FROM token_revocation_list WHERE token = $1\r\n        `,\r\n    },\r\n    logs: {\r\n        addLog: `\r\n            INSERT INTO logs (event_type, timestamp, user_id, description)\r\n            VALUES ($1, $2, $3, $4)\r\n            RETURNING *\r\n        `,\r\n        getAllLogs: `\r\n            SELECT * FROM logs\r\n        `,\r\n        deleteLog: `\r\n        DELETE FROM logs\r\n         WHERE log_id = $1\r\n        `,\r\n    },\r\n    notes: {\r\n        getNoteById: `\r\n            SELECT * FROM calendar_notes WHERE DATE(date) = DATE($1);\r\n        `,\r\n        addNote: `\r\n            INSERT INTO calendar_notes (date, note)\r\n            VALUES ($1, $2)\r\n            RETURNING *\r\n        `,\r\n        deleteNote: `\r\n            DELETE FROM calendar_notes\r\n            WHERE note_id = $1\r\n        `,\r\n        checkNoteExistsById:`\r\n            SELECT EXISTS(SELECT 1 FROM calendar_notes WHERE note_id = $1)\r\n        `,\r\n        updateNote: `\r\n            UPDATE calendar_notes\r\n            SET note = $1\r\n            WHERE note_id = $2\r\n            RETURNING *\r\n        `\r\n    },\r\n    guests: {\r\n        getGuests: `\r\n            SELECT * FROM guests\r\n        `,\r\n        getGuestById: `\r\n            SELECT * FROM guests WHERE guest_id = $1\r\n        `,\r\n        addGuest: `\r\n            INSERT INTO guests (first_name, last_name, email, phone_number, address)\r\n            VALUES ($1, $2, $3, $4, $5)\r\n            RETURNING *\r\n        `,\r\n        updateGuest: `\r\n            UPDATE guests\r\n            SET first_name = $1, last_name = $2, email = $3, phone_number = $4, address = $5\r\n            WHERE guest_id = $6\r\n            RETURNING *\r\n        `,\r\n        deleteGuest: `\r\n            DELETE FROM guests\r\n            WHERE guest_id = $1\r\n        `,\r\n        checkGuestExistsById: `\r\n            SELECT EXISTS(SELECT 1 FROM guests WHERE guest_id = $1)\r\n        `,\r\n        searchGuests: `\r\n            SELECT * FROM guests WHERE first_name || ' ' || last_name ILIKE '%$1#%';\r\n        `,\r\n    },\r\n    reservations: {\r\n        getReservations: `\r\n            SELECT reservations.*, rooms.room_code, guests.first_name as guest_first_name, guests.last_name as guest_last_name FROM reservations\r\n            INNER JOIN guests ON reservations.guest_id = guests.guest_id\r\n            INNER JOIN rooms ON reservations.room_id = rooms.room_id\r\n        `,\r\n        getReservationById: `\r\n            SELECT * FROM reservations WHERE reservation_id = $1\r\n        `,\r\n        addReservation: `\r\n            INSERT INTO reservations (room_id, guest_id, start_date, end_date, reservation_status)\r\n            VALUES ($1, $2, $3, $4, $5)\r\n            RETURNING *\r\n        `,\r\n        updateReservation: `\r\n            UPDATE reservations\r\n            SET room_id = $1, guest_id = $2, start_date = $3, end_date = $4, reservation_status = $5, check_in_date = $6, check_out_date = $7\r\n            WHERE reservation_id = $8\r\n            RETURNING *\r\n        `,\r\n        deleteReservation: `\r\n            DELETE FROM reservations\r\n            WHERE reservation_id = $1\r\n        `,\r\n        checkReservationExistsById: `\r\n            SELECT EXISTS(SELECT 1 FROM reservations WHERE reservation_id = $1)\r\n        `,\r\n        searchReservations: `\r\n            SELECT * FROM reservations WHERE start_date ILIKE '%$1#%' OR end_date ILIKE '%$1#%'\r\n        `,\r\n        getReservationsByGuestId: `\r\n            SELECT * FROM reservations WHERE guest_id = $1        \r\n        `,\r\n        checkIfReservationIsAvailable: `\r\n            SELECT EXISTS(\r\n                SELECT 1 FROM reservations\r\n                WHERE room_id = $1\r\n                AND (start_date, end_date) OVERLAPS ($2, $3))\r\n        `,\r\n    },\r\n    rooms: {\r\n        getRooms: `\r\n            SELECT * FROM rooms\r\n        `,\r\n        getRoomById: `\r\n            SELECT * FROM rooms WHERE room_id = $1\r\n        `,\r\n        addRoom: `\r\n            INSERT INTO rooms (room_code, price_per_night, description, status)\r\n            VALUES ($1, $2, $3, $4)\r\n            RETURNING *\r\n        `,\r\n        updateRoom: `\r\n            UPDATE rooms\r\n            SET room_code = $1, price_per_night = $2, description = $3, status = $4\r\n            WHERE room_id = $5\r\n            RETURNING *\r\n        `,\r\n        deleteRoom: `\r\n            DELETE FROM rooms\r\n            WHERE room_id = $1\r\n        `,\r\n        checkRoomExistsById: `\r\n            SELECT EXISTS(SELECT 1 FROM rooms WHERE room_id = $1)\r\n        `,\r\n        searchRooms: `\r\n            SELECT * FROM rooms WHERE room_code ILIKE '%$1#%' OR description ILIKE '%$1#%'\r\n        `,\r\n        checkRoomExistsByRoomCode: `\r\n            SELECT EXISTS(SELECT 1 FROM rooms WHERE room_code = $1)\r\n        `,\r\n        getStatusCount: `\r\n        SELECT status, COUNT(*) AS count\r\n            FROM rooms\r\n            GROUP BY status\r\n            ORDER BY status;\r\n        `,\r\n        getReservationsByRoomId: `\r\n            SELECT * FROM reservations WHERE room_id = $1\r\n        `,\r\n    },\r\n    paymentMethods: {\r\n        getPaymentMethods: `\r\n            SELECT * FROM payment_methods\r\n        `,\r\n        getPaymentMethodById: `\r\n            SELECT * FROM payment_methods WHERE payment_method_id = $1\r\n        `,\r\n        getPaymentMethodsByGuestId: `\r\n            SELECT * FROM payment_methods WHERE guest_id = $1\r\n        `,\r\n        addPaymentMethod: `\r\n            INSERT INTO payment_methods (guest_id, type, card_number, card_cvv, card_expiration, card_holder_name, bank_account_number, bank_bsb)\r\n            VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\r\n            RETURNING *\r\n        `,\r\n        updatePaymentMethod: `\r\n            UPDATE payment_methods\r\n            SET guest_id = $1, type = $2, card_number = $3, card_cvv = $4, card_expiration = $5, card_holder_name = $6, bank_account_number = $7, bank_bsb = $8\r\n            WHERE payment_method_id = $9\r\n            RETURNING *\r\n        `,\r\n        deletePaymentMethod: `\r\n            DELETE FROM payment_methods\r\n            WHERE payment_method_id = $1\r\n        `,\r\n        checkPaymentMethodExistsById: `\r\n            SELECT EXISTS(SELECT 1 FROM payment_methods WHERE payment_method_id = $1)\r\n        `\r\n    },\r\n    transactions: {\r\n        getTransactions: `\r\n            SELECT transaction.*, payment_methods.type as payment_method_type, guests.first_name as guest_first_name, guests.last_name as guest_last_name FROM transaction\r\n            INNER JOIN payment_methods ON transaction.payment_method_id = payment_methods.payment_method_id\r\n            INNER JOIN guests ON transaction.guest_id = guests.guest_id\r\n            `,\r\n        getTransactionById: `\r\n            SELECT * FROM transaction WHERE transaction_id = $1\r\n        `,\r\n        getTransactionsByGuestId: `\r\n            SELECT * FROM transaction WHERE guest_id = $1\r\n        `,\r\n        addTransaction: `\r\n            INSERT INTO transaction (payment_method_id, guest_id, amount, description, date)\r\n            VALUES ($1, $2, $3, $4, $5)\r\n            RETURNING *\r\n        `,\r\n        updateTransaction: `\r\n            UPDATE transaction\r\n            SET payment_method_id = $1, guest_id = $2, amount = $3, description = $4, date = $5\r\n            WHERE transaction_id = $6\r\n            RETURNING *\r\n        `,\r\n        deleteTransaction: `\r\n            DELETE FROM transaction\r\n            WHERE transaction_id = $1\r\n        `,\r\n        checkTransactionExistsById: `\r\n            SELECT EXISTS(SELECT 1 FROM transaction WHERE transaction_id = $1)\r\n        `\r\n        \r\n    }\r\n    \r\n    \r\n}\r\n\r\nexport default queries;","import pgPromise from \"pg-promise\";\r\n\r\n/**\r\n * Camelize all columns in the given data. i.e. convert snake_case to camelCase from postgres columns.\r\n * @param data\r\n */\r\nexport const camelizeColumns = (data) => {\r\n    const template = data[0];\r\n    for (const prop in template) {\r\n        const camel = pgPromise.utils.camelize(prop);\r\n        if (!(camel in template)) {\r\n            for (let i = 0; i < data.length; i++) {\r\n                const d = data[i];\r\n                d[camel] = d[prop];\r\n                delete d[prop];\r\n            }\r\n        }\r\n    }\r\n}","module.exports = require(\"pg-promise\");","module.exports = require(\"express\");","import express from 'express';\r\nimport {IUsersDAO} from \"../database/users\";\r\nimport {User} from \"@hotel-management-system/models\";\r\nimport {IAuthenticationMiddleware} from \"../middleware/authentication\";\r\nimport {IAuthorizationMiddleware} from \"../middleware/authorization\";\r\nimport {IRolesDAO} from \"../database/roles\";\r\nimport strings from \"../util/strings\";\r\nimport {ITokenRevocationListDAO} from \"../database/tokens\";\r\nimport hashPassword from \"../util/hashPassword\";\r\nimport crypto from \"crypto\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport Joi from \"joi\";\r\nimport {IEventLogger} from \"../util/logEvent\";\r\nimport {LogEventTypes} from \"../../../../libs/models/src/lib/enums/LogEventTypes\";\r\n\r\ninterface UsersRoute {\r\n    router: express.Router\r\n}\r\n\r\n/**\r\n * Users Route\r\n * @param usersDAO - users DAO\r\n * @param rolesDAO - roles DAO\r\n * @param tokenRevocationListDAO - token revocation list DAO\r\n * @param authentication - authentication middleware\r\n * @param authorization - authorization middleware\r\n * @param log - db event logger\r\n * @param jwtSecret - jwt secret\r\n */\r\nconst makeUsersRoute = (\r\n    usersDAO: IUsersDAO,\r\n    rolesDAO: IRolesDAO,\r\n    tokenRevocationListDAO: ITokenRevocationListDAO,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware,\r\n    log: IEventLogger,\r\n    jwtSecret: string\r\n): UsersRoute => {\r\n    const router = express.Router();\r\n\r\n    const {\r\n        getUsers,\r\n        getUserById,\r\n        getUserByUsername,\r\n        createUser,\r\n        checkUserExists,\r\n        checkUserExistsById,\r\n        deleteUser,\r\n        updateUser,\r\n        searchUsers\r\n    } = usersDAO\r\n\r\n    const {\r\n        checkRoleExists\r\n    } = rolesDAO\r\n\r\n    const {\r\n        revokeToken\r\n    } = tokenRevocationListDAO\r\n\r\n    /**\r\n     * HTTP GET - /api/users\r\n     * Get all users\r\n     */\r\n    router.get('/', authentication, authorization('users.read'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const users = await getUsers();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: users\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n\r\n    });\r\n\r\n    /**\r\n     * HTTP GET - /api/users/search?q=\r\n     * Search for users by first and last name\r\n     */\r\n    router.get(\"/search\", authentication, authorization('users.read'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const query = req.query.q;\r\n\r\n            if (query === undefined) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.generic.queryNotProvided,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const users = await searchUsers(query.toString());\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: users\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    router.get('/me', authentication, async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const user = await getUserById(req.userId);\r\n\r\n            // if the user is null, return 404\r\n            if (user === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.users.userNotFound(req.userId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: user\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET - /api/users/:userId\r\n     * Get a user by id\r\n     */\r\n    router.get('/:userId', authentication, authorization('users.read'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const userId = parseInt(req.params.userId);\r\n\r\n            if (isNaN(userId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.users.invalidUserId(req.params.userId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const user = await getUserById(userId);\r\n\r\n            // if the user is null, return 404\r\n            if (user === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.users.userNotFound(userId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: user\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * HTTP POST - /api/users/add\r\n     * Create a new user\r\n     */\r\n    router.post('/add', authentication, authorization('users.write'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                username: Joi.string().required(),\r\n                password: Joi.string().required(),\r\n                firstName: Joi.string().required(),\r\n                lastName: Joi.string().required(),\r\n                email: Joi.string().email().allow('', null).required(),\r\n                phoneNumber: Joi.string().allow('', null).required(),\r\n                position: Joi.string().allow('', null).required(),\r\n                roleId: Joi.number().required()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            if (await checkUserExists(req.body.username)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.CONFLICT,\r\n                    message: strings.api.users.usernameConflict(req.body.username),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            if (!await checkRoleExists(req.body.roleId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.roles.roleNotFound(req.body.roleId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const salt = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n            const user: User = {\r\n                // the userId is set to 0 because it is not known yet. It will be set by the createUser function, but since we're using\r\n                // typescript, we need to set it to something.\r\n                userId: 0,\r\n                username: req.body.username,\r\n                password: hashPassword(req.body.password, salt),\r\n                passwordSalt: salt,\r\n                firstName: req.body.firstName,\r\n                lastName: req.body.lastName,\r\n                email: req.body.email,\r\n                phoneNumber: req.body.phoneNumber,\r\n                position: req.body.position,\r\n                roleId: req.body.roleId\r\n            }\r\n\r\n\r\n            await createUser(user);\r\n\r\n            log(\r\n                LogEventTypes.USER_CREATE,\r\n                req.userId,\r\n                `Created a new user with username: ${req.body.username} and role: ${req.body.roleId}`\r\n            )\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: strings.api.generic.success,\r\n                data: user\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n\r\n    })\r\n\r\n\r\n    /**\r\n     * HTTP DELETE - /api/users/:userId\r\n     * Delete a user by userId\r\n     */\r\n    router.delete('/:userId', authentication, authorization('users.delete'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const userId = parseInt(req.params.userId);\r\n\r\n            //check if the user is trying to delete themselves\r\n            if (userId === req['userId']) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.users.cannotDeleteSelf,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            if (isNaN(userId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.users.invalidUserId(req.params.userId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // check if the user exists\r\n            if (!await checkUserExistsById(userId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.users.userNotFound(userId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            await deleteUser(userId);\r\n\r\n            log(\r\n                LogEventTypes.USER_DELETE,\r\n                req.userId,\r\n                `Deleted user with id: ${userId}`\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: null\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP POST - /api/users/login\r\n     * Login a user\r\n     */\r\n    router.post('/login', async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                username: Joi.string().required(),\r\n                password: Joi.string().required()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const user = await getUserByUsername(req.body.username);\r\n\r\n            if (user === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.users.usernameNotFound(req.body.username),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // hash the password from the request body with the password salt from the database\r\n            const hashedPasswordFromRequest = hashPassword(req.body.password, user.passwordSalt);\r\n\r\n            // check if the hashed password matches the password from the database\r\n            if (hashedPasswordFromRequest !== user.password) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.UNAUTHORIZED,\r\n                    message: strings.api.users.invalidPassword,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const jwtToken = jwt.sign({\r\n                userId: user.userId,\r\n                roleId: user.roleId,\r\n                username: user.username,\r\n                tokenUUID: crypto.randomBytes(16).toString('hex')\r\n            }, jwtSecret, {\r\n                expiresIn: '24h'\r\n            })\r\n\r\n            log(\r\n                LogEventTypes.USER_LOGIN,\r\n                user.userId,\r\n                `User ${user.username} logged in`\r\n            ).then()\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.users.loginSuccess,\r\n                data: {\r\n                    jwt: jwtToken\r\n                }\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP POST - /api/users/logout\r\n     * Logout a user by revoking the token.\r\n     */\r\n    router.post('/logout', authentication, async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const token = req.headers.authorization?.split(' ')[1];\r\n\r\n            if (token === undefined) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.users.invalidToken,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            await revokeToken(token);\r\n\r\n            // decode the token to get the user id\r\n            const decodedToken = jwt.decode(token);\r\n\r\n            log(\r\n                LogEventTypes.USER_LOGOUT,\r\n                decodedToken['userId'],\r\n                `User ${decodedToken['username']} logged out`\r\n            ).then()\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.users.logoutSuccess,\r\n                data: null\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP PATCH - /api/users/:userId\r\n     * Update user properties by userId\r\n     */\r\n    router.patch('/:userId', authentication, authorization('users.write'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const userId = parseInt(req.params.userId);\r\n\r\n            if (isNaN(userId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.users.invalidUserId(req.params.userId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                username: Joi.string(),\r\n                password: Joi.string().optional(),\r\n                firstName: Joi.string(),\r\n                lastName: Joi.string(),\r\n                email: Joi.string().email().optional().allow(''),\r\n                phoneNumber: Joi.string().optional().allow(''),\r\n                position: Joi.string().optional().allow(''),\r\n                roleId: Joi.number()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const user = await getUserById(userId);\r\n\r\n            if (user === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.users.userNotFound(userId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // check if the username is already taken\r\n            if (req.body.username !== undefined) {\r\n                if (req.body.username !== user.username) {\r\n                    if (await checkUserExists(req.body.username)) {\r\n                        return sendResponse(res, {\r\n                            success: false,\r\n                            statusCode: StatusCodes.CONFLICT,\r\n                            message: strings.api.users.usernameConflict(req.body.username),\r\n                            data: null\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n            // check if the role id is valid\r\n            if (req.body.roleId !== undefined) {\r\n                if (req.body.roleId !== user.roleId) {\r\n                    if (!await checkRoleExists(req.body.roleId)) {\r\n                        return sendResponse(res, {\r\n                            success: false,\r\n                            statusCode: StatusCodes.BAD_REQUEST,\r\n                            message: strings.api.roles.roleNotFound(req.body.roleId),\r\n                            data: null\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n            const updatedUser = {\r\n                ...user,\r\n                ...req.body\r\n            }\r\n\r\n            // hash the password if it is defined\r\n            if (req.body.password !== undefined) {\r\n                const salt = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n                updatedUser.passwordSalt = salt;\r\n                updatedUser.password = hashPassword(req.body.password, salt)\r\n            }\r\n\r\n            await updateUser(updatedUser);\r\n\r\n            log(\r\n                LogEventTypes.USER_UPDATE,\r\n                req.userId,\r\n                `Updated user with id: ${userId}`\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: updatedUser\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default makeUsersRoute;\r\n\r\n","const strings = {\r\n    // API Response Messages\r\n    api: {\r\n        generic: {\r\n            success: \"Success\",\r\n            error: \"An unknown error has occurred, please try again later.\",\r\n            queryNotProvided: \"Query not provided\",\r\n            invalidQuery: \"Invalid query\",\r\n            invalidRequestBody: \"Invalid request body\",\r\n        },\r\n        notes: {\r\n            invalidNoteId: (noteId: number) => `Invalid note id: ${noteId}`,\r\n            noteNotFound: (noteId: number) => `Note with id ${noteId} not found`,\r\n        },\r\n        guest: {\r\n            invalidGuestId: (guestId: number) => `Invalid guest id: ${guestId}`,\r\n            guestNotFound: (guestId: number) => `Guest with id ${guestId} not found`,\r\n            cannotDeleteGuestAsTheyHaveReservations: `Cannot delete guest as they have reservations`,\r\n        },\r\n        paymentMethods: {\r\n            paymentMethodNotFound: (paymentMethodId: number) => `Payment method with id ${paymentMethodId} not found`,\r\n            invalidPaymentMethodId: (paymentMethodId: number) => `Invalid payment method id: ${paymentMethodId}`,\r\n            invalidCardCVV: `Invalid card CVV`,\r\n        },\r\n        reservations: {\r\n            invalidReservationId: (reservationId: number) => `Invalid reservation id: ${reservationId}`,\r\n            reservationNotFound: (reservationId: number) => `Reservation with id ${reservationId} not found`,\r\n            roomUnavailableForDates: (roomId: number) => `Room with id ${roomId} is unavailable for the specified dates.`,\r\n        },\r\n        room: {\r\n            invalidRoomId: (roomId: number) => `Invalid room id: ${roomId}`,\r\n            roomNotFound: (roomId: number) => `Room with id ${roomId} not found`,\r\n            roomCodeConflict: (roomCode: string) => `Room with code ${roomCode} already exists`,\r\n        },\r\n        tickets: {\r\n            invalidTicketId: (ticketId: number | string) => `Invalid ticket id: ${ticketId}`,\r\n            ticketNotFound: (ticketId: number) => `Ticket with id ${ticketId} not found`,\r\n        },\r\n        users: {\r\n            invalidUserId: (userId: number | string) => `Invalid user id: ${userId}`,\r\n            userNotFound: (userId: number) => `User with id ${userId} not found`,\r\n            usernameNotFound: (username: string) => `User with username ${username} not found`,\r\n            usernameConflict: (username: string) => `User with username ${username} already exists`,\r\n            cannotDeleteSelf: `Cannot delete self`,\r\n            invalidPassword: `Invalid password`,\r\n            loginSuccess: `Login success`,\r\n            invalidToken: `Invalid token`,\r\n            logoutSuccess: `Logout success`,\r\n            unauthenticated: `Unauthenticated`,\r\n            unauthorized: `Unauthorized`,\r\n        },\r\n        roles: {\r\n            invalidRoleId: (roleId: number | string) => `Invalid role id: ${roleId}`,\r\n            roleNotFound: (roleId: number) => `Role with id ${roleId} not found`,\r\n            cannotDeleteRoleAsOtherUsersHaveIt: `Cannot delete role as other users have it`,\r\n            roleAlreadyExists: (roleName: string) => `Role with name ${roleName} already exists`,\r\n        },\r\n        transactions: {\r\n            invalidTransactionId: (transactionId: number | string) => `Invalid transaction id: ${transactionId}`,\r\n            transactionNotFound: (transactionId: number) => `Transaction with id ${transactionId} not found`,\r\n        },\r\n    }\r\n}\r\n\r\nexport default strings;","import crypto from \"crypto\";\r\n\r\n/**\r\n * Hashes the password with the salt\r\n * @param password - password to hash\r\n * @param salt - salt to hash with\r\n */\r\nconst hashPassword = (password: string, salt: string): string => {\r\n    const hash = crypto.createHash('sha256');\r\n    hash.update(password + salt);\r\n    return hash.digest('hex');\r\n}\r\n\r\nexport default hashPassword","module.exports = require(\"crypto\");","module.exports = require(\"jsonwebtoken\");","import {ApiResponse} from \"@hotel-management-system/models\";\r\nimport express from \"express\";\r\n\r\n/**\r\n * Send response to the client\r\n * @param res - express response object\r\n * @param responseObj - response object\r\n */\r\nconst sendResponse = <T>(res: express.Response, responseObj: ApiResponse<T>) => {\r\n    res.status(responseObj.statusCode).json(responseObj);\r\n}\r\n\r\nexport default sendResponse;","module.exports = require(\"http-status-codes\");","module.exports = require(\"joi\");","export enum LogEventTypes {\r\n    USER_LOGIN = 'USER_LOGIN',\r\n    USER_LOGOUT = 'USER_LOGOUT',\r\n    USER_ADD = 'USER_ADD',\r\n    USER_CREATE = 'USER_CREATE',\r\n    USER_UPDATE = 'USER_UPDATE',\r\n    USER_DELETE = 'USER_DELETE',\r\n    GUEST_ADD = 'GUEST_ADD',\r\n    GUEST_UPDATE = 'GUEST_UPDATE',\r\n    GUEST_DELETE = 'GUEST_DELETE',\r\n    GUEST_CHECKIN = 'GUEST_CHECKIN',\r\n    GUEST_CHECKOUT = 'GUEST_CHECKOUT',\r\n    ROOM_CREATE = 'ROOM_CREATE',\r\n    ROOM_UPDATE = 'ROOM_UPDATE',\r\n    ROOM_DELETE = 'ROOM_DELETE',\r\n    ROOM_CHECKIN = 'ROOM_CHECKIN',\r\n    RESERVATION_CREATE = 'RESERVATION_CREATE',\r\n    RESERVATION_UPDATE = 'RESERVATION_UPDATE',\r\n    RESERVATION_DELETE = 'RESERVATION_DELETE',\r\n    ROLE_CREATE = 'ROLE_CREATE',\r\n    ROLE_UPDATE = 'ROLE_UPDATE',\r\n    ROLE_DELETE = 'ROLE_DELETE',\r\n    ROLE_ASSIGN = 'ROLE_ASSIGN',\r\n    TRANSACTION_CREATE = 'TRANSACTION_CREATE',\r\n    TRANSACTION_UPDATE = 'TRANSACTION_UPDATE',\r\n    TRANSACTION_DELETE = 'TRANSACTION_DELETE',\r\n    PAYMENT_METHOD_CREATE = 'PAYMENT_METHOD_CREATE',\r\n    PAYMENT_METHOD_UPDATE = 'PAYMENT_METHOD_UPDATE',\r\n    PAYMENT_METHOD_DELETE = 'PAYMENT_METHOD_DELETE',\r\n    CALENDAR_NOTE_CREATE = 'CALENDAR_NOTE_CREATE',\r\n    CALENDAR_NOTE_UPDATE = 'CALENDAR_NOTE_UPDATE',\r\n    CALENDAR_NOTE_DELETE = 'CALENDAR_NOTE_DELETE',\r\n    TICKET_CREATE = 'TICKET_CREATE',\r\n    TICKET_UPDATE = 'TICKET_UPDATE',\r\n    TICKET_DELETE = 'TICKET_DELETE',\r\n    TICKET_COMMENT_CREATE = 'TICKET_COMMENT_CREATE',\r\n}","import express from 'express';\r\nimport {IAuthenticationMiddleware} from '../middleware/authentication';\r\nimport {IAuthorizationMiddleware} from '../middleware/authorization';\r\nimport {IRoomsDAO} from '../database/rooms';\r\nimport {StatusCodes} from 'http-status-codes';\r\nimport sendResponse from '../util/sendResponse';\r\nimport strings from '../util/strings';\r\nimport Joi from 'joi';\r\nimport {Room, RoomStatuses} from '@hotel-management-system/models';\r\nimport {IEventLogger} from \"../util/logEvent\";\r\nimport {LogEventTypes} from \"../../../../libs/models/src/lib/enums/LogEventTypes\";\r\n\r\ninterface IRoomsRoute {\r\n    router: express.Router\r\n}\r\n\r\n/**\r\n * Rooms Route\r\n * @param roomsDAO - rooms DAO\r\n * @param log - db event logger\r\n * @param authentication - authentication middleware\r\n * @param authorization - authorization middleware\r\n */\r\nexport const makeRoomsRoute = (\r\n    roomsDAO: IRoomsDAO,\r\n    log: IEventLogger,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware\r\n): IRoomsRoute => {\r\n\r\n    const router = express.Router();\r\n\r\n    const {\r\n        getRooms,\r\n        getRoomById,\r\n        createRoom,\r\n        checkRoomExistsById,\r\n        updateRoom,\r\n        deleteRoom,\r\n        checkRoomExistsByRoomCode,\r\n        searchRoomsByRoomCode,\r\n        getRoomStatusCount,\r\n        getReservationsByRoomId\r\n    } = roomsDAO\r\n\r\n    /**\r\n     * GET /api/rooms\r\n     * Get all rooms\r\n     */\r\n    router.get('/', authentication, authorization('rooms.read'), async (req: any, res, next) => {\r\n        try {\r\n            try {\r\n                const rooms = await getRooms();\r\n                return sendResponse(res, {\r\n                    success: true,\r\n                    statusCode: StatusCodes.OK,\r\n                    message: \"Success\",\r\n                    data: rooms\r\n                })\r\n            } catch (e) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                    message: \"An unknown error has occurred, please try again later.\",\r\n                    data: e\r\n                })\r\n            }\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * GET /api/rooms/room-status-count\r\n     * Get room status count\r\n     */\r\n    router.get('/room-status-count', authentication, authorization('rooms.read'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const roomStatusCount = await getRoomStatusCount();\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: roomStatusCount\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * GET /api/rooms/search?q=roomCode\r\n     * Search rooms by roomCode\r\n     */\r\n    router.get('/search', authentication, authorization('rooms.read'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const roomCode = req.query.q;\r\n\r\n            // check if query is provided\r\n            if (!roomCode) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.generic.queryNotProvided,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const rooms = await searchRoomsByRoomCode(roomCode as string);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: rooms\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * GET /api/rooms/:roomId\r\n     * Get room by id\r\n     */\r\n    router.get('/:roomId', authentication, authorization('rooms.read'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const roomId = parseInt(req.params.roomId);\r\n\r\n            if (isNaN(roomId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.room.invalidRoomId(roomId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const room = await getRoomById(roomId);\r\n\r\n            if (room === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.room.roomNotFound(roomId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: room\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * POST /api/rooms/add\r\n     * Adds a new room\r\n     */\r\n    router.post(\"/add\", authentication, authorization('rooms.write'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                roomCode: Joi.string().required(),\r\n                pricePerNight: Joi.number().required(),\r\n                description: Joi.string().required(),\r\n                status: Joi.string().required().valid(...Object.values(RoomStatuses))\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.details[0].message,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // check if room with roomCode already exists\r\n            const roomCodeExists = await checkRoomExistsByRoomCode(req.body.roomCode);\r\n\r\n            if (roomCodeExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.CONFLICT,\r\n                    message: strings.api.room.roomCodeConflict(req.body.roomCode),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const room: Room = {\r\n                roomCode: req.body.roomCode,\r\n                pricePerNight: req.body.pricePerNight,\r\n                description: req.body.description,\r\n                status: req.body.status\r\n            }\r\n\r\n            const newRoom = await createRoom(room);\r\n\r\n            log(\r\n                LogEventTypes.ROOM_CREATE,\r\n                req.userId,\r\n                \"Created a new room with roomCode: \" + req.body.roomCode + \" and pricePerNight: \" + req.body.pricePerNight,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: strings.api.generic.success,\r\n                data: newRoom\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * PATCH /api/rooms/:roomId\r\n     * Updates a room\r\n     */\r\n    router.patch(\"/:roomId\", authentication, authorization('rooms.write'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const roomId = parseInt(req.params.roomId);\r\n\r\n            if (isNaN(roomId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.room.invalidRoomId(roomId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                roomCode: Joi.string().required(),\r\n                pricePerNight: Joi.number().required(),\r\n                description: Joi.string().required(),\r\n                status: Joi.string().required().valid(...Object.values(RoomStatuses))\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.details[0].message,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const room: Room = {\r\n                roomId: roomId,\r\n                roomCode: req.body.roomCode,\r\n                pricePerNight: req.body.pricePerNight,\r\n                description: req.body.description,\r\n                status: req.body.status\r\n            }\r\n\r\n            const roomExists = await checkRoomExistsById(roomId);\r\n\r\n            if (!roomExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.room.roomNotFound(roomId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const updatedRoom = await updateRoom(room);\r\n\r\n            log(\r\n                LogEventTypes.ROOM_UPDATE,\r\n                req.userId,\r\n                \"Updated room with id: \" + roomId + \" to roomCode: \" + req.body.roomCode + \" and pricePerNight: \" + req.body.pricePerNight,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: updatedRoom\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * DELETE /api/rooms/:roomId\r\n     * Deletes a room\r\n     */\r\n    router.delete(\"/:roomId\", authentication, authorization('rooms.write'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const roomId = parseInt(req.params.roomId);\r\n\r\n            if (isNaN(roomId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.room.invalidRoomId(roomId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const roomExists = await checkRoomExistsById(roomId);\r\n\r\n            if (!roomExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.room.roomNotFound(roomId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const reservationsWithRoom = await getReservationsByRoomId(roomId);\r\n\r\n            if (reservationsWithRoom.length > 0) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: \"Cannot delete room as it has reservations\",\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            await deleteRoom(roomId);\r\n\r\n            log(\r\n                LogEventTypes.ROOM_DELETE,\r\n                req.userId,\r\n                \"Deleted room with id: \" + roomId,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: null\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n}","export * from './lib/models';\r\n","export function models(): string {\r\n  return 'models';\r\n}\r\n\r\nexport * from './user'\r\nexport * from './room'\r\nexport * from './role'\r\nexport * from './enums/PriceUnits'\r\nexport * from './enums/RoomStatuses'\r\nexport * from './enums/TicketStatuses'\r\nexport * from './serverConfig'\r\nexport * from './apiResponse'\r\nexport * from './logs';\r\nexport * from './calendarNotes'\r\nexport * from './guest'\r\nexport * from './reservation'\r\nexport * from './paymentMethod'\r\nexport * from './transaction'\r\nexport * from './ticket'\r\nexport * from './ticketMessages'","export type User = {\r\n    userId?: number;\r\n    username: string;\r\n    password?: string;\r\n    passwordSalt?: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    phoneNumber: string;\r\n    position: string;\r\n    roleId: number;\r\n    roleName?: string;\r\n}","import {RoomStatuses} from \"./enums/RoomStatuses\";\r\n\r\nexport type Room = {\r\n    roomId?: number;\r\n    roomCode: string;\r\n    pricePerNight: number;\r\n    description: string;\r\n    status: RoomStatuses;\r\n}","export type Role = {\r\n    roleId?: number;\r\n    name: string;\r\n    permissionData: string[];\r\n}","export enum PriceUnits {\r\n    day = 'day',\r\n    week = 'week',\r\n    month = 'month',\r\n    year = 'year',\r\n    night = 'night'\r\n}","export enum RoomStatuses {\r\n    AVAILABLE = 'Available',\r\n    UNAVAILABLE = 'Unavailable',\r\n    RESERVED = 'Reserved',\r\n    OCCUPIED = 'Occupied',\r\n    OUT_OF_SERVICE = 'Out of Service'\r\n}","export enum TicketStatuses {\r\n    OPEN = 'Open',\r\n    IN_PROGRESS = 'In Progress',\r\n    CLOSED = 'Closed'\r\n}","export type ServerConfig = {\r\n    server: {\r\n        port: number\r\n        listenAddress: string\r\n    },\r\n    database: {\r\n        host: string,\r\n        port: number,\r\n        user: string,\r\n        password: string,\r\n        database: string\r\n    },\r\n    jwt: {\r\n        secret: string\r\n    }\r\n}","import {StatusCodes} from \"http-status-codes\";\r\n\r\nexport type ApiResponse<T> = {\r\n    success: boolean;\r\n    statusCode: StatusCodes;\r\n    message: string;\r\n    data: T;\r\n}","import {LogEventTypes} from \"./enums/LogEventTypes\";\r\n\r\nexport type Logs = {\r\n    logId?: number;           // corresponds to log_id in the database\r\n    eventType: LogEventTypes;   // corresponds to operation_type in the database\r\n    timestamp: Date;        // corresponds to timestamp in the database\r\n    userId: number;     // corresponds to operated_by in the database\r\n    description?: string; // corresponds to additional_info in the database (it's optional)\r\n}\r\n\r\n","export type CalendarNotes = {\r\n    noteId?: number;\r\n    date: Date;   \r\n    note: string;\r\n}","export type Guest = {\r\n    guestId?: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    phoneNumber: string;\r\n    address: string;\r\n    email: string;\r\n}","import {ReservationStatuses} from \"./enums/ReservationStatuses\";\r\n\r\nexport type Reservation = {\r\n    reservationId?: number,\r\n    roomId: number,\r\n    guestId: number,\r\n    guestFirstName?: string,\r\n    guestLastName?: string,\r\n    roomCode?: string,\r\n    checkInDate?: Date,\r\n    checkOutDate?: Date,\r\n    reservationStatus: ReservationStatuses,\r\n    startDate: Date,\r\n    endDate: Date\r\n}","import {PaymentMethodTypes} from \"./enums/PaymentMethodTypes\";\r\n\r\nexport type PaymentMethod = {\r\n    paymentMethodId?: number;\r\n    guestId: number;\r\n    type: PaymentMethodTypes;\r\n    cardNumber?: string;\r\n    cardCVV?: string;\r\n    cardExpiration?: Date;\r\n    cardHolderName?: string;\r\n    bankAccountNumber?: string;\r\n    bankBSB?: string;\r\n}","export type Transaction = {\r\n    transactionId?: number;\r\n    paymentMethodId: number;\r\n    guestId: number;\r\n    amount: number;\r\n    description: string;\r\n    date: Date;\r\n    paymentMethodType?: string;\r\n    guestFirstName?: string;\r\n    guestLastName?: string;\r\n}","import {TicketStatuses} from \"./enums/TicketStatuses\";\r\n\r\nexport type Ticket = {\r\n    ticketId?: number;\r\n    userId: number;\r\n    userFirstName?: string;\r\n    userLastName?: string;\r\n    title: string;\r\n    description: string;\r\n    status: TicketStatuses;\r\n    dateOpened: Date;\r\n}","export type TicketMessages = {\r\n    ticketMessageId?: number;\r\n    ticketId?: number;\r\n    userId: number;\r\n    userFirstName?: string;\r\n    userLastName?: string;\r\n    message: string;\r\n    dateCreated: Date;\r\n}","module.exports = require(\"path\");","import {User} from \"@hotel-management-system/models\";\r\nimport pgPromise, {IDatabase} from \"pg-promise\";\r\nimport queries from \"./sql/queries\";\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\nimport queryResultErrorCode = pgPromise.errors.queryResultErrorCode;\r\n\r\nexport interface IUsersDAO {\r\n    getUsers: () => Promise<User[]>;\r\n    getUserById: (userId: number) => Promise<User | null>;\r\n    getUserByUsername: (username: string) => Promise<User | null>;\r\n    createUser: (user: User) => Promise<User>;\r\n    checkUserExists: (username: string) => Promise<boolean>;\r\n    checkUserExistsById: (userId: number) => Promise<boolean>;\r\n    deleteUser: (userId: number) => Promise<void>;\r\n    updateUser: (user: User) => Promise<User>;\r\n    searchUsers: (query: string) => Promise<User[]>;\r\n}\r\n\r\nconst makeUsersDAO = (db: IDatabase<any, any>): IUsersDAO => {\r\n    /**\r\n     * Get all users\r\n     * @returns A promise that resolves to a list of users\r\n     */\r\n    const getUsers = async (): Promise<User[]> => {\r\n        const users: User[] = await db.any(queries.users.getAllUsers);\r\n        return users;\r\n    };\r\n\r\n    /**\r\n     * Get a user by id\r\n     *\r\n     * @param userId The id of the user\r\n     * @returns A promise that resolves to the user if found, or null if not found\r\n     */\r\n    const getUserById = async (userId: number): Promise<User | null> => {\r\n        try {\r\n            return await db.oneOrNone(queries.users.getUserById, [\r\n                userId,\r\n            ]);\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get a user by username\r\n     * @param username\r\n     * @returns A promise that resolves to the user if found, or null if not found\r\n     */\r\n    const getUserByUsername = async (username: string): Promise<User | null> => {\r\n        try {\r\n            return await db.oneOrNone(queries.users.getUserByUsername, [\r\n                username,\r\n            ]);\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create a new user\r\n     * @param user\r\n     * @returns A promise that resolves to the created user with the id set.\r\n     */\r\n    const createUser = async (user: User): Promise<User> => {\r\n        const createdUser: User = await db.one(queries.users.createUser, [\r\n            user.username,\r\n            user.password,\r\n            user.passwordSalt,\r\n            user.firstName,\r\n            user.lastName,\r\n            user.email,\r\n            user.phoneNumber,\r\n            user.position,\r\n            user.roleId,\r\n        ]);\r\n        user.userId = createdUser.userId;\r\n        return user;\r\n    };\r\n\r\n    /**\r\n     * Check if a user with the given username exists\r\n     *\r\n     * @param username\r\n     * @returns A promise that resolves to true if the user exists, or false if not.\r\n     */\r\n    const checkUserExists = async (username: string): Promise<boolean> => {\r\n        try {\r\n            await db.one(queries.users.getUserByUsername, [\r\n                username,\r\n            ]);\r\n            return true;\r\n        } catch (e) {\r\n            if (\r\n                e instanceof QueryResultError &&\r\n                e.code === queryResultErrorCode.noData\r\n            ) {\r\n                return false;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n\r\n    };\r\n\r\n    const checkUserExistsById = async (userId: number): Promise<boolean> => {\r\n        try {\r\n            await db.one(queries.users.getUserById, [userId]);\r\n            return true;\r\n        } catch (e) {\r\n            if (\r\n                e instanceof QueryResultError &&\r\n                e.code === queryResultErrorCode.noData\r\n            ) {\r\n                return false;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Delete a user by id\r\n     *\r\n     * @param userId\r\n     * @returns A promise that resolves to void\r\n     */\r\n    const deleteUser = async (userId: number): Promise<void> => {\r\n        await db.none(queries.users.deleteUser, [userId]);\r\n    };\r\n\r\n    const updateUser = async (user: User): Promise<User> => {\r\n        return await db.one(queries.users.updateUser, [\r\n            user.username,\r\n            user.password,\r\n            user.passwordSalt,\r\n            user.firstName,\r\n            user.lastName,\r\n            user.email,\r\n            user.phoneNumber,\r\n            user.position,\r\n            user.roleId,\r\n            user.userId,\r\n        ]);\r\n    };\r\n\r\n    /**\r\n     * Search for users by first name or last name\r\n     * @param query\r\n     * @returns A promise that resolves to a list of users, an empty list if no users are found.\r\n     */\r\n    const searchUsers = async (query: string): Promise<User[]> => {\r\n        try {\r\n            return await db.any(queries.users.searchUsers, [\r\n                query,\r\n            ]);\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        getUsers,\r\n        getUserById,\r\n        getUserByUsername,\r\n        createUser,\r\n        checkUserExists,\r\n        checkUserExistsById,\r\n        deleteUser,\r\n        updateUser,\r\n        searchUsers,\r\n    };\r\n};\r\n\r\nexport default makeUsersDAO;\r\n","import {Role, User} from \"@hotel-management-system/models\";\r\nimport pgPromise, {IDatabase} from \"pg-promise\";\r\nimport queries from \"./sql/queries\";\r\nimport queryResultErrorCode = pgPromise.errors.queryResultErrorCode;\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\n\r\nexport interface IRolesDAO {\r\n    getRoleById: (roleId: number) => Promise<Role | null>,\r\n    checkRoleExists: (roleId: number) => Promise<boolean>,\r\n    addRole: (role: Role) => Promise<Role>,\r\n    updateRole: (role: Role) => Promise<Role>,\r\n    getAllRoles: () => Promise<Role[]>,\r\n    deleteRole: (roleId: number) => Promise<void>,\r\n    getUsersWithRoles: (roleId: number) => Promise<User[]>\r\n    checkRoleExistsByName: (roleName: string) => Promise<boolean>\r\n}\r\n\r\n/**\r\n * Roles DAO\r\n * @param db\r\n */\r\nexport const makeRolesDAO = (db: IDatabase<any, any>): IRolesDAO => {\r\n\r\n    /**\r\n     * Get role by id\r\n     * @param roleId\r\n     * @returns A promise that resolves to a role or null if no role is found.\r\n     */\r\n    const getRoleById = async (roleId: number): Promise<Role | null> => {\r\n        try {\r\n            return await db.oneOrNone(queries.roles.getRoleById, [roleId]);\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if role exists\r\n     * @param roleId\r\n     * @returns A promise that resolves to true if role exists, false otherwise.\r\n     */\r\n    const checkRoleExists = async (roleId: number): Promise<boolean> => {\r\n        const result: any = await db.one(queries.roles.checkRoleExists, [roleId]);\r\n        return result.exists;\r\n    }\r\n\r\n    const checkRoleExistsByName = async (roleName: string): Promise<boolean> => {\r\n        const result: any = await db.one(queries.roles.checkRoleExistsByName, [roleName]);\r\n        return result.exists;\r\n    }\r\n\r\n    /**\r\n     * Add role.\r\n     * @param role\r\n     * @returns A promise that resolves to the added role containing the role id.\r\n     */\r\n    const addRole = async (role: Role): Promise<Role> => {\r\n        return await db.one(queries.roles.addRole, [role.name, role.permissionData]);\r\n    }\r\n\r\n    /**\r\n     * Update role.\r\n     * @param role\r\n     * @returns A promise that resolves to the updated role.\r\n     */\r\n    const updateRole = async (role: Role): Promise<Role> => {\r\n        return await db.one(queries.roles.updateRole, [role.name, role.permissionData, role.roleId]);\r\n    }\r\n\r\n    const getUsersWithRoles = async (roleId: number): Promise<User[]> => {\r\n        try {\r\n            return await db.manyOrNone(queries.roles.getUsersWithRoles, [roleId]);\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return [];\r\n            }\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete role.\r\n     * @param roleId\r\n     * @returns A promise that resolves to void.\r\n     */\r\n    const deleteRole = async (roleId: number): Promise<void> => {\r\n        await db.none(queries.roles.deleteRole, [roleId]);\r\n    }\r\n\r\n    /**\r\n     * Get all roles.\r\n     * @returns A promise that resolves to an array of roles.\r\n     */\r\n    const getAllRoles = async (): Promise<Role[]> => {\r\n        return await db.manyOrNone(queries.roles.getAllRoles);\r\n    }\r\n\r\n    return {\r\n        getRoleById,\r\n        checkRoleExists,\r\n        addRole,\r\n        updateRole,\r\n        getAllRoles,\r\n        deleteRole,\r\n        getUsersWithRoles,\r\n        checkRoleExistsByName\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default makeRolesDAO;\r\n\r\n","import {IDatabase} from \"pg-promise\";\r\nimport queries from \"./sql/queries\";\r\n\r\nexport interface ITokenRevocationListDAO {\r\n    revokeToken: (token: string) => Promise<void>,\r\n    checkTokenRevoked: (token: string) => Promise<boolean>\r\n}\r\n\r\nconst makeTokenRevocationListDAO = (db: IDatabase<any, any>): ITokenRevocationListDAO => {\r\n\r\n    /**\r\n     * Revoke token\r\n     * @param token\r\n     * @returns - void\r\n     */\r\n    const revokeToken = async (token: string): Promise<void> => {\r\n        const now = new Date();\r\n        await db.none(queries.tokenRevocationList.revokeToken, [token, now]);\r\n    }\r\n\r\n    /**\r\n     * Check if token is revoked\r\n     * @param token\r\n     * @returns - boolean\r\n     */\r\n    const checkTokenRevoked = async (token: string): Promise<boolean> => {\r\n        const tokenRevocationList: any = await db.oneOrNone(queries.tokenRevocationList.checkTokenRevoked, [token]);\r\n        return tokenRevocationList !== null;\r\n\r\n    }\r\n\r\n    return {\r\n        revokeToken,\r\n        checkTokenRevoked\r\n    }\r\n}\r\n\r\nexport default makeTokenRevocationListDAO;","import {ApiResponse} from \"@hotel-management-system/models\";\r\nimport strings from \"../util/strings\";\r\nimport {ITokenRevocationListDAO} from \"../database/tokens\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport interface IAuthenticationMiddleware {\r\n    (req: any, res: any, next: any): void\r\n}\r\n\r\n/**\r\n * Authentication middleware, handles jwt token verification\r\n * @param jwtSecret - jwt secret\r\n * @param tokenRevocationListDAO - token revocation list DAO\r\n */\r\nconst makeAuthenticationMiddleware = (jwtSecret: string, tokenRevocationListDAO: ITokenRevocationListDAO): IAuthenticationMiddleware => {\r\n\r\n    const {\r\n        checkTokenRevoked\r\n    } = tokenRevocationListDAO\r\n\r\n    return async (req: any, res: any, next: any) => {\r\n        // check if the request has a jwt token\r\n        if (!req.headers.authorization) {\r\n            return res.status(401).send({\r\n                success: false,\r\n                message: strings.api.users.unauthenticated,\r\n                statusCode: 401,\r\n                data: null\r\n            } as ApiResponse<null>)\r\n        }\r\n\r\n        // verify the jwt token in Authorization Bearer header\r\n        const token = req.headers.authorization.split(' ')[1];\r\n\r\n        // check if the token is in the token revocation list\r\n        const tokenRevoked = await checkTokenRevoked(token)\r\n\r\n        // if the token is in the token revocation list, return 401\r\n        if (tokenRevoked) {\r\n            return res.status(401).send({\r\n                success: false,\r\n                message: strings.api.users.invalidToken,\r\n                statusCode: 401,\r\n                data: null\r\n            } as ApiResponse<null>)\r\n        }\r\n\r\n\r\n        // verify the token\r\n        jwt.verify(token, jwtSecret, (err, decoded) => {\r\n            if (err) {\r\n                return res.status(401).send({\r\n                    success: false,\r\n                    message: strings.api.users.invalidToken,\r\n                    statusCode: 401,\r\n                    data: null\r\n                } as ApiResponse<null>)\r\n            }\r\n            // add the user id to the request\r\n            req.userId = decoded.userId;\r\n            req.userRoleId = decoded.roleId;\r\n\r\n            // authentication successful, continue\r\n            next();\r\n        })\r\n    }\r\n}\r\n\r\nexport default makeAuthenticationMiddleware;","import {ApiResponse} from \"@hotel-management-system/models\";\r\nimport strings from \"../util/strings\";\r\nimport {IRolesDAO} from \"../database/roles\";\r\nimport makePermissionChecker from \"../util/checkPermissions\";\r\n\r\nexport interface IAuthorizationMiddleware {\r\n    (requiredPermission: string): (req: any, res: any, next: any) => void\r\n}\r\n\r\n/**\r\n * Authorization middleware, handles authorization, checks if the user has the required permission.\r\n * @param rolesDAO\r\n */\r\nconst makeAuthorizationMiddleware = (rolesDAO: IRolesDAO): IAuthorizationMiddleware => {\r\n\r\n    const hasPermission = makePermissionChecker(rolesDAO);\r\n\r\n    /**\r\n     * @param requiredPermission - the required permission\r\n     */\r\n    return (requiredPermission: string) => {\r\n        const response: ApiResponse<null> = {\r\n            success: false,\r\n            statusCode: 500,\r\n            message: \"An unknown error has occurred, please try again later.\",\r\n            data: null\r\n        }\r\n\r\n        return async (req, res, next) => {\r\n\r\n            // check if the user has a role id\r\n            if (req.userRoleId === undefined) {\r\n                response.statusCode = 401;\r\n                response.message = strings.api.users.unauthenticated;\r\n                return res.status(response.statusCode).send(response);\r\n            }\r\n\r\n            // check if the user has the required permission\r\n            const userHasPermission = await hasPermission(requiredPermission, req.userRoleId);\r\n            if (!userHasPermission) {\r\n                response.statusCode = 401;\r\n                response.message = strings.api.users.unauthorized;\r\n                return res.status(response.statusCode).send(response);\r\n            }\r\n\r\n            // user has the required permission, continue\r\n            next();\r\n        }\r\n    };\r\n\r\n}\r\n\r\nexport default makeAuthorizationMiddleware;","import {IRolesDAO} from \"../database/roles\";\r\n\r\nexport interface IPermissionChecker {\r\n    (requiredPermission: string, roleId: number): Promise<boolean>\r\n}\r\n\r\n/**\r\n * Permission Checker\r\n * @param rolesDAO\r\n */\r\nconst makePermissionChecker = (rolesDAO: IRolesDAO): IPermissionChecker => {\r\n\r\n    const {\r\n        getRoleById\r\n    } = rolesDAO;\r\n\r\n    /**\r\n     * Check if a role has the required permission\r\n     * @param requiredPermission - permission to check\r\n     * @param roleId - role id to check\r\n     */\r\n    return (requiredPermission: string, roleId: number): Promise<boolean> => {\r\n        return new Promise<boolean>((resolve) => {\r\n            getRoleById(roleId).then(role => {\r\n                if (role === null) {\r\n                    resolve(false);\r\n                }\r\n\r\n                const permissions = role.permissionData;\r\n                if (permissions.includes(requiredPermission) || permissions.includes(\"*\")) {\r\n                    resolve(true);\r\n                }\r\n\r\n                resolve(false);\r\n            })\r\n        })\r\n    };\r\n}\r\n\r\n\r\nexport default makePermissionChecker;","module.exports = require(\"process\");","import express from \"express\";\r\nimport {IRolesDAO} from \"../database/roles\";\r\nimport {IAuthenticationMiddleware} from \"../middleware/authentication\";\r\nimport {IAuthorizationMiddleware} from \"../middleware/authorization\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport {Role} from \"@hotel-management-system/models\"\r\nimport Joi from \"joi\";\r\nimport {IEventLogger} from \"../util/logEvent\";\r\nimport {LogEventTypes} from \"../../../../libs/models/src/lib/enums/LogEventTypes\";\r\nimport strings from \"../util/strings\";\r\n\r\nexport interface IRolesRoute {\r\n    router: express.Router\r\n}\r\n\r\n/**\r\n * Roles Route\r\n * @param rolesDAO - roles DAO\r\n * @param log - db event logger\r\n * @param authentication - authentication middleware\r\n * @param authorization - authorization middleware\r\n */\r\nconst makeRolesRoute = (\r\n    rolesDAO: IRolesDAO,\r\n    log: IEventLogger,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware,\r\n): IRolesRoute => {\r\n    const {\r\n        getAllRoles,\r\n        addRole,\r\n        deleteRole,\r\n        checkRoleExists,\r\n        getUsersWithRoles,\r\n        getRoleById,\r\n        updateRole,\r\n        checkRoleExistsByName\r\n    } = rolesDAO\r\n\r\n    const router = express.Router();\r\n\r\n    /**\r\n     * HTTP GET /api/roles\r\n     * Get all roles\r\n     */\r\n    router.get(\"/\", authentication, authorization(\"roles.read\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const roles = await getAllRoles();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: roles,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP POST /api/roles/add\r\n     * Add a new role\r\n     */\r\n    router.post(\"/add\", authentication, authorization(\"roles.add\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                name: Joi.string().required(),\r\n                permissionData: Joi.array().items(Joi.string()).required()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.generic.invalidRequestBody,\r\n                    data: error.message,\r\n                })\r\n            }\r\n\r\n            // check if role exists\r\n            const roleExists = await checkRoleExistsByName(req.body.name);\r\n\r\n            if (roleExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.roles.roleAlreadyExists(req.body.name),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const newRole: Role = {\r\n                name: req.body.name,\r\n                permissionData: req.body.permissionData\r\n            }\r\n\r\n            const role = await addRole(newRole);\r\n\r\n            log(\r\n                LogEventTypes.ROLE_CREATE,\r\n                req.userId,\r\n                \"Created a new role with name: \" + req.body.name + \" and permissions: \" + req.body.permissionData,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: strings.api.generic.success,\r\n                data: role,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP DELETE /api/roles/:roleId\r\n     * Delete a role\r\n     */\r\n    router.delete(\"/:roleId\", authentication, authorization(\"roles.delete\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const roleId = parseInt(req.params.roleId);\r\n\r\n            // check if role exists\r\n            const roleExists = await checkRoleExists(roleId);\r\n\r\n            if (!roleExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.roles.roleNotFound(roleId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if any user has this role\r\n            const usersWithRole = await getUsersWithRoles(roleId);\r\n\r\n            if (usersWithRole.length > 0) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.roles.cannotDeleteRoleAsOtherUsersHaveIt,\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const role = await deleteRole(roleId);\r\n\r\n            log(\r\n                LogEventTypes.ROLE_DELETE,\r\n                req.userId,\r\n                \"Deleted role with id: \" + roleId,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: role,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET /api/roles/:roleId\r\n     * Get role by id\r\n     */\r\n    router.get(\"/:roleId\", authentication, authorization(\"roles.read\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const roleId = parseInt(req.params.roleId);\r\n\r\n            // check if role exists\r\n            const roleExists = await checkRoleExists(roleId);\r\n\r\n            if (!roleExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.roles.roleNotFound(roleId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const role = await getRoleById(roleId);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: role,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP PATCH /api/roles/:roleId\r\n     * Update a role\r\n     */\r\n    router.patch(\"/:roleId\", authentication, authorization(\"roles.update\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const roleId = parseInt(req.params.roleId);\r\n\r\n            // check if role exists\r\n            const roleExists = await getRoleById(roleId);\r\n\r\n            if (roleExists === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.roles.roleNotFound(roleId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                name: Joi.string().required(),\r\n                permissionData: Joi.array().items(Joi.string()).required()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.generic.invalidRequestBody,\r\n                    data: error.message,\r\n                })\r\n            }\r\n\r\n            // check if role exists\r\n            const roleExistsByName = await checkRoleExistsByName(req.body.name);\r\n\r\n            if (roleExistsByName && roleExists.name !== req.body.name) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.roles.roleAlreadyExists(req.body.name),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const updatedRole: Role = {\r\n                roleId: roleId,\r\n                name: req.body.name,\r\n                permissionData: req.body.permissionData\r\n            }\r\n\r\n            const role = await updateRole(updatedRole);\r\n\r\n            log(\r\n                LogEventTypes.ROLE_UPDATE,\r\n                req.userId,\r\n                \"Updated role with id: \" + roleId,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: role,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n}\r\n\r\nexport default makeRolesRoute;","import express from \"express\";\r\nimport {ILogsDAO} from \"../database/logs\"; // Adjust for function\r\nimport {IAuthenticationMiddleware} from \"../middleware/authentication\";\r\nimport {IAuthorizationMiddleware} from \"../middleware/authorization\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport strings from \"../util/strings\";\r\n\r\ninterface IMakeLogsRoute {\r\n    router: express.Router;\r\n}\r\n\r\n/**\r\n * Logs Route\r\n * @param logsDAO - logs DAO\r\n * @param authentication - authentication middleware\r\n * @param authorization - authorization middleware\r\n */\r\nconst makeLogsRoute = (\r\n    logsDAO: ILogsDAO,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware,\r\n): IMakeLogsRoute => {\r\n    const router = express.Router();\r\n\r\n    const {\r\n        getAllLogs,\r\n    } = logsDAO;\r\n\r\n    /**\r\n     * HTTP GET /api/logs\r\n     * Get all logs\r\n     */\r\n    router.get(\"/\", authentication, authorization(\"logs.read\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const logs = await getAllLogs();\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: logs\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n    return {\r\n        router\r\n    }\r\n};\r\n\r\nexport default makeLogsRoute;","import {Logs} from \"@hotel-management-system/models\";\r\nimport pgPromise, {IDatabase} from \"pg-promise\";\r\nimport queries from \"./sql/queries\";\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\n\r\nexport interface ILogsDAO {\r\n    getAllLogs: () => Promise<Logs[]>;\r\n    addLog: (log: Logs) => Promise<Logs | null>;\r\n    deleteLog: (logId: number) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Logs DAO\r\n * @param db - database object\r\n */\r\nconst makeLogsDAO = (db: IDatabase<any, any>): ILogsDAO => {\r\n\r\n    /**\r\n     * Get all logs\r\n     */\r\n    const getAllLogs = async (): Promise<Logs[]> => {\r\n        return await db.any(queries.logs.getAllLogs)\r\n    }\r\n\r\n    /**\r\n     * Add log\r\n     * @param log\r\n     * @returns logs, null if no logs\r\n     */\r\n    const addLog = async (log: Logs): Promise<Logs | null> => {\r\n        try {\r\n            return await db.one(queries.logs.addLog, [log.eventType, log.timestamp, log.userId, log.description]);\r\n        } catch (error) {\r\n            if (error instanceof QueryResultError && error.code === pgPromise.errors.queryResultErrorCode.noData) {\r\n                return null;\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Delete log\r\n     * @param logId\r\n     * @returns void\r\n     */\r\n    const deleteLog = async (logId: number): Promise<void> => {\r\n        await db.none(queries.logs.deleteLog, {logId});\r\n    }\r\n\r\n    return {\r\n        getAllLogs,\r\n        addLog,\r\n        deleteLog,\r\n    }\r\n}\r\n\r\nexport default makeLogsDAO;","import {Guest, PaymentMethod} from \"@hotel-management-system/models\"\r\nimport pgPromise, {IDatabase} from \"pg-promise\";\r\nimport queries from \"./sql/queries\";\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\nimport queryResultErrorCode = pgPromise.errors.queryResultErrorCode;\r\n\r\nexport interface IGuestDAO {\r\n    getGuests(): Promise<Guest[]>;\r\n\r\n    addGuest(guest: Guest): Promise<Guest>;\r\n\r\n    updateGuest(guest: Guest): Promise<Guest>;\r\n\r\n    deleteGuest(guestId: number): Promise<void>;\r\n\r\n    getGuestById(id: number): Promise<Guest>;\r\n\r\n    checkGuestExistsById(id: number): Promise<boolean>;\r\n\r\n    searchGuests(query: string): Promise<Guest[]>;\r\n\r\n    getPaymentMethodsByGuestId(guestId: number): Promise<PaymentMethod[]>;\r\n}\r\n\r\n/**\r\n * Guest DAO\r\n * @param db - database object\r\n */\r\nconst makeGuestDAO = (db: IDatabase<any, any>): IGuestDAO => {\r\n\r\n    /**\r\n     * Get payment methods by guest id\r\n     * @param guestId - guest id\r\n     * @returns - array of payment methods\r\n     */\r\n    const getPaymentMethodsByGuestId = async (guestId: number): Promise<PaymentMethod[]> => {\r\n        return await db.any(queries.paymentMethods.getPaymentMethodsByGuestId, [guestId]);\r\n    }\r\n\r\n    /**\r\n     * Get all guests\r\n     * @returns - array of guests, empty array if no guests\r\n     * @throws - error\r\n     */\r\n    const getGuests = async (): Promise<Guest[]> => {\r\n        try {\r\n            return await db.any(queries.guests.getGuests);\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return [];\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add guest\r\n     * @param guest\r\n     * @returns - guest object\r\n     */\r\n    const addGuest = async (guest: Guest): Promise<Guest> => {\r\n        return await db.one(queries.guests.addGuest, [\r\n            guest.firstName,\r\n            guest.lastName,\r\n            guest.email,\r\n            guest.phoneNumber,\r\n            guest.address\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Update guest\r\n     * @param guest\r\n     * @returns - guest object\r\n     */\r\n    const updateGuest = async (guest: Guest): Promise<Guest> => {\r\n        return await db.one(queries.guests.updateGuest, [\r\n            guest.firstName,\r\n            guest.lastName,\r\n            guest.email,\r\n            guest.phoneNumber,\r\n            guest.address,\r\n            guest.guestId\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Delete guest\r\n     * @param guestId\r\n     * @returns - void\r\n     */\r\n    const deleteGuest = async (guestId: number): Promise<void> => {\r\n        await db.none(queries.guests.deleteGuest, [\r\n            guestId\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Check if guest exists by id\r\n     * @param id\r\n     * @returns - boolean\r\n     */\r\n    const checkGuestExistsById = async (id: number): Promise<boolean> => {\r\n        const exists = await db.one(queries.guests.checkGuestExistsById, [\r\n            id\r\n        ]);\r\n        return exists.exists;\r\n    }\r\n\r\n    /**\r\n     * Get guest by id\r\n     * @param id\r\n     * @returns - guest object\r\n     */\r\n    const getGuestById = async (id: number): Promise<Guest> => {\r\n        try {\r\n            return await db.one(queries.guests.getGuestById, [\r\n                id\r\n            ]);\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Search guests\r\n     * @param query\r\n     * @returns - array of guests\r\n     */\r\n    const searchGuests = async (query: string): Promise<Guest[]> => {\r\n        try {\r\n            return await db.any(queries.guests.searchGuests, [\r\n                query\r\n            ]);\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return [];\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        getGuests,\r\n        addGuest,\r\n        updateGuest,\r\n        deleteGuest,\r\n        checkGuestExistsById,\r\n        getGuestById,\r\n        searchGuests,\r\n        getPaymentMethodsByGuestId\r\n    }\r\n}\r\n\r\nexport default makeGuestDAO;","import express from \"express\";\r\nimport {IGuestDAO} from \"../database/guests\";\r\nimport {IAuthenticationMiddleware} from \"../middleware/authentication\";\r\nimport {IAuthorizationMiddleware} from \"../middleware/authorization\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport {Guest} from \"@hotel-management-system/models\"\r\nimport Joi from \"joi\";\r\nimport strings from \"../util/strings\";\r\nimport {IEventLogger} from \"../util/logEvent\";\r\nimport {LogEventTypes} from \"../../../../libs/models/src/lib/enums/LogEventTypes\";\r\nimport {IReservationDAO} from \"../database/reservations\";\r\n\r\n/**\r\n * Guest Route\r\n * BASE URL: /api/guests\r\n */\r\nexport interface IGuestRoute {\r\n    router: express.Router\r\n}\r\n\r\n/**\r\n * Guest Route\r\n * @param guestsDAO - guests DAO\r\n * @param log - db event logger\r\n * @param authentication - authentication middleware\r\n * @param authorization - authorization middleware\r\n */\r\nconst makeGuestsRoute = (\r\n    guestsDAO: IGuestDAO,\r\n    reservationsDAO: IReservationDAO,\r\n    log: IEventLogger,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware,\r\n) => {\r\n    const {\r\n        getGuests,\r\n        addGuest,\r\n        updateGuest,\r\n        deleteGuest,\r\n        checkGuestExistsById,\r\n        getGuestById,\r\n        searchGuests,\r\n        getPaymentMethodsByGuestId\r\n    } = guestsDAO\r\n\r\n    const {\r\n        getReservationsByGuestId\r\n    } = reservationsDAO\r\n\r\n    const router = express.Router();\r\n\r\n    /**\r\n     * HTTP GET /api/guests\r\n     * Get all guests\r\n     */\r\n    router.get(\"/\", authentication, authorization(\"guests.read\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const guests = await getGuests();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: guests,\r\n            })\r\n        } catch (e) {\r\n            next(e)\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET /api/guests/search?q=...\r\n     * Search guests\r\n     */\r\n    router.get(\"/search\", authentication, authorization('guests.read'), async (req, res, next) => {\r\n        try {\r\n            const query = req.query.q;\r\n\r\n            if (query === undefined || query === null || query === \"\") {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.generic.queryNotProvided,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const users = await searchGuests(query.toString());\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: users\r\n            })\r\n        } catch (e) {\r\n            next(e)\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET /api/guests/:guestId/payment-methods\r\n     * Get payment methods by guest id\r\n     */\r\n    router.get(\"/:guestId/payment-methods\", authentication, authorization(\"paymentMethods.read\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const guestId = parseInt(req.params.guestId);\r\n\r\n            if (isNaN(guestId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.guest.invalidGuestId(guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if guest exists\r\n            const guestExists = await checkGuestExistsById(guestId);\r\n\r\n            if (!guestExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.guest.guestNotFound(guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const paymentMethods = await getPaymentMethodsByGuestId(guestId);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: paymentMethods,\r\n            })\r\n        } catch (e) {\r\n            next(e)\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET /api/guests/:guestId\r\n     * Get guest by id\r\n     */\r\n    router.get(\"/:guestId\", authentication, authorization(\"guests.read\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const guestId = parseInt(req.params.guestId);\r\n\r\n            if (isNaN(guestId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.guest.invalidGuestId(guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n            const guest = await getGuestById(guestId);\r\n\r\n            if (guest === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.guest.guestNotFound(guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: guest,\r\n            })\r\n        } catch (e) {\r\n            next(e)\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP POST /api/guests/add\r\n     * Add a new guest\r\n     */\r\n    router.post(\"/add\", authentication, authorization(\"guests.create\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                firstName: Joi.string().required(),\r\n                lastName: Joi.string().required(),\r\n                phoneNumber: Joi.string().optional().allow(\"\"),\r\n                address: Joi.string().optional().allow(\"\"),\r\n                email: Joi.string().email().optional().allow(\"\"),\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: error.message,\r\n                })\r\n            }\r\n\r\n            const newGuest: Guest = {\r\n                firstName: req.body.firstName,\r\n                lastName: req.body.lastName,\r\n                phoneNumber: req.body.phoneNumber,\r\n                address: req.body.address,\r\n                email: req.body.email,\r\n            }\r\n\r\n            const guest = await addGuest(newGuest);\r\n\r\n            log(\r\n                LogEventTypes.GUEST_ADD,\r\n                req.userId,\r\n                \"Added a new guest with id: \" + guest.guestId + \" and name: \" + guest.firstName + \" \" + guest.lastName,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: strings.api.generic.success,\r\n                data: guest,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP PATCH /api/guests/:guestId\r\n     * Update guest by id\r\n     */\r\n    router.patch(\"/:guestId\", authentication, authorization(\"guests.update\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const guestId = parseInt(req.params.guestId);\r\n\r\n            if (isNaN(guestId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.guest.invalidGuestId(guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n            // check if guest exists\r\n            const guestExists = await checkGuestExistsById(guestId);\r\n\r\n            if (!guestExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.guest.guestNotFound(guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                firstName: Joi.string().required(),\r\n                lastName: Joi.string().required(),\r\n                phoneNumber: Joi.string().optional().allow(\"\"),\r\n                address: Joi.string().optional().allow(\"\"),\r\n                email: Joi.string().email().optional().allow(\"\"),\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: error.message,\r\n                })\r\n            }\r\n\r\n            const updatedGuest: Guest = {\r\n                guestId: guestId,\r\n                firstName: req.body.firstName,\r\n                lastName: req.body.lastName,\r\n                phoneNumber: req.body.phoneNumber,\r\n                address: req.body.address,\r\n                email: req.body.email,\r\n            }\r\n\r\n            const guest = await updateGuest(updatedGuest);\r\n\r\n            log(\r\n                LogEventTypes.GUEST_UPDATE,\r\n                req.userId,\r\n                \"Updated guest with id: \" + guestId + \" to name: \" + req.body.firstName + \" \" + req.body.lastName,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: guest,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP DELETE /api/guests/:guestId\r\n     * Delete guest by id\r\n     */\r\n    router.delete(\"/:guestId\", authentication, authorization(\"guests.delete\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const guestId = parseInt(req.params.guestId);\r\n\r\n            if (isNaN(guestId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.guest.invalidGuestId(guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if guest exists\r\n            const guestExists = await checkGuestExistsById(guestId);\r\n\r\n            if (!guestExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.guest.guestNotFound(guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n\r\n            const guestReservations = await getReservationsByGuestId(guestId);\r\n\r\n            if (guestReservations.length > 0) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.guest.cannotDeleteGuestAsTheyHaveReservations,\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n\r\n            const guest = await deleteGuest(guestId);\r\n\r\n            log(\r\n                LogEventTypes.GUEST_DELETE,\r\n                req.userId,\r\n                \"Deleted guest with id: \" + guestId,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: null,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n\r\n    return {\r\n        router\r\n    }\r\n}\r\n\r\nexport default makeGuestsRoute;","import {Reservation} from '@hotel-management-system/models'\r\nimport {IDatabase} from 'pg-promise';\r\nimport queries from './sql/queries';\r\nimport pgPromise = require('pg-promise');\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\nimport queryResultErrorCode = pgPromise.errors.queryResultErrorCode;\r\n\r\n\r\nexport interface IReservationDAO {\r\n    getReservations(): Promise<Reservation[]>;\r\n\r\n    getReservationById(reservationId: number): Promise<Reservation | null>;\r\n\r\n    createReservation(reservation: Reservation): Promise<Reservation>;\r\n\r\n    checkReservationExistsById(reservationId: number): Promise<boolean>;\r\n\r\n    updateReservation(reservation: Reservation): Promise<Reservation>;\r\n\r\n    deleteReservation(reservationId: number): Promise<void>;\r\n\r\n    getReservationsByGuestId(guestId: number): Promise<Reservation[]>;\r\n\r\n    checkIfReservationIsAvailable(roomId: number, startDate: Date, endDate: Date): Promise<boolean>;\r\n\r\n    getDb(): IDatabase<any, any>;\r\n}\r\n\r\n/**\r\n * Reservation DAO\r\n * @param db - database object\r\n */\r\nexport const makeReservationDAO = (db: IDatabase<any, any>): IReservationDAO => {\r\n\r\n    /**\r\n     * Get all reservations\r\n     */\r\n    const getReservations = async (): Promise<Reservation[]> => {\r\n        try {\r\n            return await db.any(queries.reservations.getReservations);\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return [];\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get reservation by id\r\n     * @param reservationId\r\n     * @returns reservation, null if no reservation\r\n     */\r\n    const getReservationById = async (reservationId: number): Promise<Reservation | null> => {\r\n        try {\r\n            return await db.oneOrNone(queries.reservations.getReservationById, [reservationId]);\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if reservation exists by id\r\n     * @param reservationId\r\n     * @returns boolean\r\n     */\r\n    const checkReservationExistsById = async (reservationId: number): Promise<boolean> => {\r\n        const exists = await db.one(queries.reservations.checkReservationExistsById, [reservationId]);\r\n        return exists.exists;\r\n    }\r\n\r\n    /**\r\n     * Create reservation\r\n     * @param reservation\r\n     * @returns reservation\r\n     */\r\n    const createReservation = async (reservation: Reservation): Promise<Reservation> => {\r\n        return await db.one(queries.reservations.addReservation, [reservation.roomId, reservation.guestId, reservation.startDate, reservation.endDate, reservation.reservationStatus]);\r\n    }\r\n\r\n    /**\r\n     * Update reservation\r\n     * @param reservation\r\n     * @returns reservation\r\n     */\r\n    const updateReservation = async (reservation: Reservation): Promise<Reservation> => {\r\n        return await db.one(queries.reservations.updateReservation, [\r\n            reservation.roomId,\r\n            reservation.guestId,\r\n            reservation.startDate,\r\n            reservation.endDate,\r\n            reservation.reservationStatus,\r\n            reservation.checkInDate,\r\n            reservation.checkOutDate,\r\n            reservation.reservationId]);\r\n    }\r\n\r\n    /**\r\n     * Delete reservation\r\n     * @param reservationId\r\n     * @returns void\r\n     */\r\n    const deleteReservation = async (reservationId: number): Promise<void> => {\r\n        await db.none(queries.reservations.deleteReservation, [reservationId]);\r\n    }\r\n\r\n    /**\r\n     * Get reservations by guest id\r\n     * @param guestId\r\n     * @returns reservations\r\n     */\r\n    const getReservationsByGuestId = async (guestId: number): Promise<Reservation[]> => {\r\n        try {\r\n            return await db.any(queries.reservations.getReservationsByGuestId, [guestId]);\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return [];\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if reservation is available\r\n     * @param roomId The room id\r\n     * @param startDate The start date\r\n     * @param endDate The end date\r\n     */\r\n    const checkIfReservationIsAvailable = async (roomId: number, startDate: Date, endDate: Date): Promise<boolean> => {\r\n        const exists = await db.one(queries.reservations.checkIfReservationIsAvailable, [roomId, startDate, endDate]);\r\n        return !exists.exists;\r\n    }\r\n\r\n    /**\r\n     * Get database\r\n     */\r\n    const getDb = (): IDatabase<any, any> => {\r\n        return db;\r\n    }\r\n\r\n    return {\r\n        getReservations,\r\n        getReservationById,\r\n        createReservation,\r\n        deleteReservation,\r\n        updateReservation,\r\n        checkReservationExistsById,\r\n        getReservationsByGuestId,\r\n        checkIfReservationIsAvailable,\r\n        getDb\r\n    }\r\n}\r\n\r\n","import express from \"express\";\r\nimport {IReservationDAO} from \"../database/reservations\";\r\nimport {IAuthenticationMiddleware} from \"../middleware/authentication\";\r\nimport {IAuthorizationMiddleware} from \"../middleware/authorization\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport Joi from \"joi\";\r\nimport {Reservation} from \"@hotel-management-system/models\"\r\nimport {IGuestDAO} from \"../database/guests\";\r\nimport {IRoomsDAO} from \"../database/rooms\";\r\nimport {ReservationStatuses} from \"../../../../libs/models/src/lib/enums/ReservationStatuses\";\r\nimport {IEventLogger} from \"../util/logEvent\";\r\nimport {LogEventTypes} from \"../../../../libs/models/src/lib/enums/LogEventTypes\";\r\nimport strings from \"../util/strings\";\r\n\r\nconst dayjs = require('dayjs')\r\nconst utc = require('dayjs/plugin/utc')\r\ndayjs.extend(utc)\r\n\r\ninterface IReservationsRoute {\r\n    router: express.Router\r\n}\r\n\r\n/**\r\n * Reservations Route\r\n * @param reservationsDAO - reservations DAO\r\n * @param guestsDAO - guests DAO\r\n * @param roomsDAO - rooms DAO\r\n * @param log - db event logger\r\n * @param authentication - authentication middleware\r\n * @param authorization - authorization middleware\r\n */\r\nexport const makeReservationsRoute = (\r\n    reservationsDAO: IReservationDAO,\r\n    guestsDAO: IGuestDAO,\r\n    roomsDAO: IRoomsDAO,\r\n    log: IEventLogger,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware,\r\n): IReservationsRoute => {\r\n    const router = express.Router();\r\n\r\n    const {\r\n        getReservations,\r\n        getReservationById,\r\n        createReservation,\r\n        checkReservationExistsById,\r\n        updateReservation,\r\n        deleteReservation,\r\n        getReservationsByGuestId,\r\n        checkIfReservationIsAvailable,\r\n    } = reservationsDAO\r\n\r\n    const {\r\n        checkGuestExistsById\r\n    } = guestsDAO\r\n\r\n    const {\r\n        checkRoomExistsById\r\n    } = roomsDAO\r\n\r\n    /**\r\n     * HTTP GET /api/reservations/guest/:guestId\r\n     * Get all reservations\r\n     */\r\n    router.get(\"/\", authentication, authorization(\"reservations.read\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const reservations = await getReservations();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: reservations,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET /api/reservations/guest/:guestId\r\n     * Get all reservations\r\n     */\r\n    router.get(\"/search\", authentication, authorization(\"reservations.read\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const db = reservationsDAO.getDb();\r\n\r\n            const {\r\n                startDate,\r\n                endDate,\r\n                guestId,\r\n                checkInDate,\r\n                checkOutDate,\r\n            } = req.query;\r\n\r\n            let query = 'SELECT * FROM reservations WHERE 1=1 '\r\n            const params = {}\r\n\r\n            if (checkInDate) {\r\n                query += 'AND DATE(check_in_date) = $/checkInDate/ ';\r\n                params['checkInDate'] = new Date(checkInDate + 'T00:00:00Z')\r\n            }\r\n\r\n            if (checkOutDate) {\r\n                query += 'AND DATE(check_out_date) = $/checkOutDate/ ';\r\n                params['checkOutDate'] = new Date(checkOutDate + 'T00:00:00Z')\r\n            }\r\n\r\n            if (startDate) {\r\n                const startDateParam = new Date(startDate as string);\r\n                query += 'AND start_date >= $/startDate/ '\r\n                params['startDate'] = startDateParam;\r\n            }\r\n\r\n            if (endDate) {\r\n                const endDateParam = new Date(endDate as string);\r\n                query += 'AND end_date <= $/endDate/ '\r\n                params['endDate'] = endDateParam;\r\n            }\r\n\r\n            if (guestId) {\r\n                // check if the guest exists\r\n                const parsedGuestId = parseInt(guestId as string);\r\n\r\n                if (isNaN(parsedGuestId)) {\r\n                    return sendResponse(res, {\r\n                        success: false,\r\n                        statusCode: StatusCodes.BAD_REQUEST,\r\n                        message: strings.api.guest.invalidGuestId(parsedGuestId),\r\n                        data: null,\r\n                    })\r\n                }\r\n\r\n                const guestExists = await checkGuestExistsById(parsedGuestId);\r\n\r\n                if (!guestExists) {\r\n                    return sendResponse(res, {\r\n                        success: false,\r\n                        statusCode: StatusCodes.NOT_FOUND,\r\n                        message: strings.api.guest.guestNotFound(parsedGuestId),\r\n                        data: null,\r\n                    })\r\n                }\r\n\r\n                query += 'AND guest_id = $/guestId/ '\r\n                params['guestId'] = guestId;\r\n            }\r\n\r\n            // check if any query is provided\r\n            if (Object.keys(params).length === 0) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.generic.invalidQuery,\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const reservations = await db.any(query, params);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: reservations,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET /api/reservations/guest/:guestId\r\n     * Get reservation by id\r\n     */\r\n    router.get(\"/:reservationId\", authentication, authorization(\"reservations.read\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const reservationId = parseInt(req.params.reservationId);\r\n\r\n            if (isNaN(reservationId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.reservations.invalidReservationId(reservationId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const reservation = await getReservationById(reservationId);\r\n\r\n            if (reservation === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.reservations.reservationNotFound(reservationId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: reservation,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET /api/reservations/guest/:guestId\r\n     * Create reservation\r\n     */\r\n    router.post(\"/add\", authentication, authorization(\"reservations.create\"), async (req, res, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                reservationId: Joi.number().optional(),\r\n                roomId: Joi.number().required(),\r\n                guestId: Joi.number().required(),\r\n                startDate: Joi.date().required(),\r\n                endDate: Joi.date().required(),\r\n                checkInDate: Joi.date().optional(),\r\n                checkOutDate: Joi.date().optional(),\r\n                reservationStatus: Joi.string().optional().valid(...Object.values(ReservationStatuses))\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if the guest exists\r\n            const guestExists = await checkGuestExistsById(req.body.guestId);\r\n\r\n            if (!guestExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.guest.guestNotFound(req.body.guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if the room exists\r\n            const roomExists = await checkRoomExistsById(req.body.roomId);\r\n\r\n            if (!roomExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.room.roomNotFound(req.body.roomId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            //check if reservation is available\r\n            const isAvailable = await checkIfReservationIsAvailable(req.body.roomId, dayjs.utc(req.body.startDate).toDate(), new dayjs.utc(req.body.endDate).toDate());\r\n\r\n            if (!isAvailable) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.reservations.roomUnavailableForDates(req.body.roomId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const startDateParsed = dayjs.utc(req.body.startDate)\r\n            const endDateParsed = dayjs.utc(req.body.endDate)\r\n\r\n            // check if the end\r\n\r\n            const reservation: Reservation = {\r\n                reservationId: req.body.reservationId,\r\n                roomId: req.body.roomId,\r\n                guestId: req.body.guestId,\r\n                startDate: startDateParsed.toDate(),\r\n                endDate: endDateParsed.toDate(),\r\n                checkInDate: req.body.checkInDate,\r\n                checkOutDate: req.body.checkOutDate,\r\n                reservationStatus: req.body.reservationStatus\r\n            }\r\n\r\n            const newReservation = await createReservation(reservation);\r\n\r\n            log(\r\n                LogEventTypes.RESERVATION_CREATE,\r\n                req.userId,\r\n                \"Created reservation with id: \" + newReservation.reservationId + \" for guest: \" + newReservation.guestId + \" with room: \" + newReservation.roomId,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: strings.api.generic.success,\r\n                data: newReservation,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET /api/reservations/guest/:guestId\r\n     * Update reservation\r\n     */\r\n    router.patch(\"/:reservationId\", authentication, authorization(\"reservations.update\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const reservationId = parseInt(req.params.reservationId);\r\n\r\n            if (isNaN(reservationId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.reservations.invalidReservationId(reservationId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if reservation exists\r\n            const exists = await checkReservationExistsById(reservationId);\r\n\r\n            if (!exists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.reservations.reservationNotFound(reservationId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                roomId: Joi.number().required(),\r\n                guestId: Joi.number().required(),\r\n                startDate: Joi.date().required(),\r\n                endDate: Joi.date().required(),\r\n                checkInDate: Joi.date().optional().allow(null),\r\n                checkOutDate: Joi.date().optional().allow(null),\r\n                reservationStatus: Joi.string().optional().valid(...Object.values(ReservationStatuses))\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n\r\n            // check if the guest exists\r\n            const guestExists = await checkGuestExistsById(req.body.guestId);\r\n\r\n            if (!guestExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.guest.guestNotFound(req.body.guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check room exists\r\n            const roomExists = await checkRoomExistsById(req.body.roomId);\r\n\r\n            if (!roomExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.room.roomNotFound(req.body.roomId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const startDateParsed = dayjs.utc(req.body.startDate).toDate()\r\n            const endDateParsed = dayjs.utc(req.body.endDate).toDate()\r\n\r\n            const reservation: Reservation = {\r\n                reservationId: reservationId,\r\n                roomId: req.body.roomId,\r\n                guestId: req.body.guestId,\r\n                startDate: startDateParsed,\r\n                endDate: endDateParsed,\r\n                checkInDate: req.body.checkInDate,\r\n                checkOutDate: req.body.checkOutDate,\r\n                reservationStatus: req.body.reservationStatus\r\n            }\r\n\r\n            const updatedReservation = await updateReservation(reservation);\r\n\r\n            log(\r\n                LogEventTypes.RESERVATION_UPDATE,\r\n                req.userId,\r\n                \"Updated reservation with id: \" + reservationId + \" for guest: \" + req.body.guestId + \" with room: \" + req.body.roomId,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: updatedReservation,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET /api/reservations/guest/:guestId\r\n     * Delete reservation\r\n     */\r\n    router.delete(\"/:reservationId\", authentication, authorization(\"reservations.delete\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const reservationId = parseInt(req.params.reservationId);\r\n\r\n            if (isNaN(reservationId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.reservations.invalidReservationId(reservationId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if reservation exists\r\n            const exists = await checkReservationExistsById(reservationId);\r\n\r\n            if (!exists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.reservations.reservationNotFound(reservationId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            await deleteReservation(reservationId);\r\n\r\n            log(\r\n                LogEventTypes.RESERVATION_DELETE,\r\n                req.userId,\r\n                \"Deleted reservation with id: \" + reservationId,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: null,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n}\r\n","export enum ReservationStatuses {\r\n    PENDING = 'Pending',\r\n    CONFIRMED = 'Confirmed',\r\n    CANCELLED = 'Cancelled',\r\n    CHECKED_IN = 'Checked In',\r\n    CHECKED_OUT = 'Checked Out'\r\n}","module.exports = require(\"dayjs\");","module.exports = require(\"dayjs/plugin/utc\");","import {Reservation, Room} from \"@hotel-management-system/models\";\r\nimport queries from \"./sql/queries\";\r\nimport {IDatabase} from \"pg-promise\";\r\nimport pgPromise = require(\"pg-promise\");\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\nimport queryResultErrorCode = pgPromise.errors.queryResultErrorCode;\r\n\r\nexport interface IRoomsDAO {\r\n    getRooms(): Promise<Room[]>;\r\n\r\n    getRoomById(roomId: number): Promise<Room | null>;\r\n\r\n    createRoom(room: Room): Promise<Room>;\r\n\r\n    checkRoomExistsById(roomId: number): Promise<boolean>;\r\n\r\n    updateRoom(room: Room): Promise<Room>;\r\n\r\n    deleteRoom(roomId: number): Promise<void>;\r\n\r\n    checkRoomExistsByRoomCode(roomCode: string): Promise<boolean>;\r\n\r\n    searchRoomsByRoomCode(roomCode: string): Promise<Room[]>;\r\n\r\n    getRoomStatusCount() : Promise<{\r\n        status: string,\r\n        count: number\r\n    }[]>;\r\n\r\n    getReservationsByRoomId(roomId: number): Promise<Reservation[]>;\r\n}\r\n\r\n/**\r\n * Rooms DAO\r\n * @param db - database object\r\n */\r\nexport const makeRoomsDAO = (db: IDatabase<any, any>): IRoomsDAO => {\r\n\r\n    /**\r\n     * Get all rooms\r\n     * @returns rooms, empty array if no rooms\r\n     */\r\n    const getRooms = async (): Promise<Room[]> => {\r\n        try {\r\n            return await db.any(queries.rooms.getRooms);\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return [];\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get room by id\r\n     * @param roomId\r\n     * @returns room, null if no room\r\n     */\r\n    const getRoomById = async (roomId: number): Promise<Room | null> => {\r\n        try {\r\n            return await db.oneOrNone(queries.rooms.getRoomById, [roomId]);\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if room exists by id\r\n     * @param roomId\r\n     * @returns boolean\r\n     */\r\n    const checkRoomExistsById = async (roomId: number): Promise<boolean> => {\r\n        const exists = await db.one(queries.rooms.checkRoomExistsById, [roomId]);\r\n        return exists.exists;\r\n    }\r\n\r\n    /**\r\n     * Check if room exists by room code\r\n     * @param roomCode\r\n     * @returns boolean\r\n     */\r\n    const checkRoomExistsByRoomCode = async (roomCode: string): Promise<boolean> => {\r\n        const exists = await db.one(queries.rooms.checkRoomExistsByRoomCode, [roomCode]);\r\n        return exists.exists;\r\n    }\r\n\r\n    /**\r\n     * Create room\r\n     * @param room\r\n     * @returns room\r\n     */\r\n    const createRoom = async (room: Room): Promise<Room> => {\r\n        return await db.one(queries.rooms.addRoom, [room.roomCode, room.pricePerNight, room.description, room.status]);\r\n    }\r\n\r\n    /**\r\n     * Update room\r\n     * @param room\r\n     * @returns room\r\n     */\r\n    const updateRoom = async (room: Room): Promise<Room> => {\r\n        return await db.one(queries.rooms.updateRoom, [room.roomCode, room.pricePerNight, room.description, room.status, room.roomId]);\r\n    }\r\n\r\n    /**\r\n     * Delete room\r\n     * @param roomId\r\n     * @returns void\r\n     */\r\n    const deleteRoom = async (roomId: number): Promise<void> => {\r\n        await db.none(queries.rooms.deleteRoom, [roomId]);\r\n    }\r\n\r\n    /**\r\n     * Search rooms by room code\r\n     * @param roomCode\r\n     * @returns rooms, empty array if no rooms\r\n     */\r\n    const searchRoomsByRoomCode = async (roomCode: string): Promise<Room[]> => {\r\n        return await db.any(queries.rooms.searchRooms, [roomCode]);\r\n    }\r\n\r\n    /**\r\n     * Get room status count\r\n     * @returns room status count\r\n     */\r\n    const getRoomStatusCount = async (): Promise<{status: string, count: number}[]> => {\r\n        return await db.any(queries.rooms.getStatusCount)\r\n    }\r\n\r\n    /**\r\n     * Get reservations by room id\r\n     * @param roomId\r\n     * @returns reservations, empty array if no reservations\r\n     */\r\n    const getReservationsByRoomId = async (roomId: number): Promise<Reservation[]> => {\r\n        return await db.any(queries.rooms.getReservationsByRoomId, [roomId]);\r\n    }\r\n\r\n    return {\r\n        getRooms,\r\n        getRoomById,\r\n        createRoom,\r\n        checkRoomExistsById,\r\n        updateRoom,\r\n        deleteRoom,\r\n        checkRoomExistsByRoomCode,\r\n        searchRoomsByRoomCode,\r\n        getRoomStatusCount,\r\n        getReservationsByRoomId\r\n    }\r\n}","import {PaymentMethod} from \"@hotel-management-system/models\";\r\nimport pgPromise, {IDatabase} from \"pg-promise\";\r\nimport queries from \"./sql/queries\";\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\n\r\nexport interface IPaymentMethodsDAO {\r\n    getPaymentMethods(): Promise<PaymentMethod[]>;\r\n\r\n    getPaymentMethodById(paymentMethodId: number): Promise<PaymentMethod>;\r\n\r\n    addPaymentMethod(paymentMethod: PaymentMethod): Promise<PaymentMethod>;\r\n\r\n    updatePaymentMethod(paymentMethod: PaymentMethod): Promise<PaymentMethod>;\r\n\r\n    deletePaymentMethod(paymentMethodId: number): Promise<void>;\r\n\r\n    checkPaymentMethodExistsById(paymentMethodId: number): Promise<boolean>;\r\n}\r\n\r\n/**\r\n * Payment methods DAO\r\n * @param db - database object\r\n */\r\nexport const makePaymentMethodsDAO = (db: IDatabase<any, any>): IPaymentMethodsDAO => {\r\n\r\n    /**\r\n     * Get all payment methods\r\n     */\r\n    const getPaymentMethods = async (): Promise<PaymentMethod[]> => {\r\n        return await db.any(queries.paymentMethods.getPaymentMethods);\r\n    }\r\n\r\n    /**\r\n     * Get payment method by id\r\n     * @param paymentMethodId\r\n     * @returns payment method, null if no payment method\r\n     */\r\n    const getPaymentMethodById = async (paymentMethodId: number): Promise<PaymentMethod | null> => {\r\n        try {\r\n            return await db.one(queries.paymentMethods.getPaymentMethodById, [paymentMethodId]);\r\n        } catch (error) {\r\n            if (error instanceof QueryResultError && error.code === pgPromise.errors.queryResultErrorCode.noData) {\r\n                return null\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add payment method\r\n     * @param paymentMethod\r\n     * @returns payment method\r\n     */\r\n    const addPaymentMethod = async (paymentMethod: PaymentMethod): Promise<PaymentMethod> => {\r\n        return await db.one(queries.paymentMethods.addPaymentMethod, [paymentMethod.guestId, paymentMethod.type, paymentMethod.cardNumber, paymentMethod.cardCVV, paymentMethod.cardExpiration, paymentMethod.cardHolderName, paymentMethod.bankAccountNumber, paymentMethod.bankBSB]);\r\n    }\r\n\r\n    /**\r\n     * Update payment method\r\n     * @param paymentMethod\r\n     * @returns payment method\r\n     */\r\n    const updatePaymentMethod = async (paymentMethod: PaymentMethod): Promise<PaymentMethod> => {\r\n        return await db.one(queries.paymentMethods.updatePaymentMethod, [paymentMethod.guestId, paymentMethod.type, paymentMethod.cardNumber, paymentMethod.cardCVV, paymentMethod.cardExpiration, paymentMethod.cardHolderName, paymentMethod.bankAccountNumber, paymentMethod.bankBSB, paymentMethod.paymentMethodId]);\r\n    }\r\n\r\n    /**\r\n     * Delete payment method\r\n     * @param paymentMethodId\r\n     * @returns void\r\n     */\r\n    const deletePaymentMethod = async (paymentMethodId: number): Promise<void> => {\r\n        await db.none(queries.paymentMethods.deletePaymentMethod, [paymentMethodId]);\r\n    }\r\n\r\n    /**\r\n     * Check if payment method exists by id\r\n     * @param paymentMethodId\r\n     * @returns boolean\r\n     */\r\n    const checkPaymentMethodExistsById = async (paymentMethodId: number): Promise<boolean> => {\r\n        const exists = await db.one(queries.paymentMethods.checkPaymentMethodExistsById, [paymentMethodId]);\r\n        return exists.exists;\r\n    }\r\n\r\n    return {\r\n        getPaymentMethods,\r\n        getPaymentMethodById,\r\n        addPaymentMethod,\r\n        updatePaymentMethod,\r\n        deletePaymentMethod,\r\n        checkPaymentMethodExistsById,\r\n    }\r\n}","import express from \"express\";\r\nimport {IAuthorizationMiddleware} from \"../middleware/authorization\";\r\nimport {IAuthenticationMiddleware} from \"../middleware/authentication\";\r\nimport {IPaymentMethodsDAO} from \"../database/paymentMethods\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport Joi from \"joi\";\r\nimport {IGuestDAO} from \"../database/guests\";\r\nimport {PaymentMethodTypes} from \"../../../../libs/models/src/lib/enums/PaymentMethodTypes\";\r\nimport {IEventLogger} from \"../util/logEvent\";\r\nimport {LogEventTypes} from \"../../../../libs/models/src/lib/enums/LogEventTypes\";\r\nimport strings from \"../util/strings\";\r\n\r\ninterface IPaymentMethodRoute {\r\n    router: express.Router\r\n}\r\n\r\n/**\r\n * Payment Method Route\r\n * @param paymentMethodsDAO - payment methods DAO\r\n * @param guestsDAO - guests DAO\r\n * @param log - db event logger\r\n * @param authentication - authentication middleware\r\n * @param authorization - authorization middleware\r\n */\r\nexport const makePaymentMethodRoute = (\r\n    paymentMethodsDAO: IPaymentMethodsDAO,\r\n    guestsDAO: IGuestDAO,\r\n    log: IEventLogger,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware,\r\n): IPaymentMethodRoute => {\r\n    const {\r\n        getPaymentMethods,\r\n        getPaymentMethodById,\r\n        addPaymentMethod,\r\n        updatePaymentMethod,\r\n        deletePaymentMethod,\r\n        checkPaymentMethodExistsById,\r\n    } = paymentMethodsDAO\r\n\r\n    const {\r\n        checkGuestExistsById,\r\n    } = guestsDAO\r\n\r\n    const router = express.Router();\r\n\r\n\r\n    /**\r\n     * HTTP GET /api/payment-methods\r\n     * Get all payment methods\r\n     */\r\n    router.get(\"/\", authentication, authorization(\"paymentMethods.read\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const paymentMethods = await getPaymentMethods();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: paymentMethods,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET /api/payment-methods/:paymentMethodId\r\n     * Add a payment method\r\n     */\r\n    router.post(\"/add\", authentication, authorization(\"paymentMethods.write\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                guestId: Joi.number().required(),\r\n                type: Joi.string().required().valid(...Object.values(PaymentMethodTypes)),\r\n                cardNumber: Joi.string().creditCard().optional().allow(\"\", null),\r\n                cardCVV: Joi.string().optional().allow(\"\", null),\r\n                cardExpiration: Joi.date().optional().allow(\"\", null),\r\n                cardHolderName: Joi.string().optional().allow(\"\", null),\r\n                bankAccountNumber: Joi.string().optional().allow(\"\", null),\r\n                bankBSB: Joi.string().optional().allow(\"\", null),\r\n            })\r\n\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            if (req.body.cardCVV && req.body.cardCVV.length !== 3) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.paymentMethods.invalidCardCVV,\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if guest exists\r\n            const guestId = await checkGuestExistsById(req.body.guestId);\r\n\r\n            if (!guestId) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.guest.guestNotFound(req.body.guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const paymentMethod = await addPaymentMethod(req.body);\r\n\r\n            log(\r\n                LogEventTypes.PAYMENT_METHOD_CREATE,\r\n                req.userId,\r\n                \"Created a new payment method for guest: \" + req.body.guestId + \" with type: \" + req.body.type,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: strings.api.generic.success,\r\n                data: paymentMethod,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET /api/payment-methods/:paymentMethodId\r\n     * Update payment method id\r\n     */\r\n    router.patch(\"/:paymentMethodId\", authentication, authorization(\"paymentMethods.write\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                paymentMethodId: Joi.number().required(),\r\n                guestId: Joi.number().required(),\r\n                type: Joi.string().required().valid({...Object.values(PaymentMethodTypes)}),\r\n                cardNumber: Joi.string().creditCard().optional().allow(\"\", null),\r\n                cardCVV: Joi.string().optional().allow(\"\", null),\r\n                cardExpiration: Joi.date().optional().allow(\"\", null),\r\n                cardHolderName: Joi.string().optional().allow(\"\", null),\r\n                bankAccountNumber: Joi.string().optional().allow(\"\", null),\r\n                bankBSB: Joi.string().optional().allow(\"\", null),\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if the payment method exists\r\n            const paymentMethodId = await checkPaymentMethodExistsById(req.body.paymentMethodId);\r\n\r\n            if (!paymentMethodId) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.paymentMethods.paymentMethodNotFound(req.body.paymentMethodId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if guest exists\r\n            const guestId = await checkGuestExistsById(req.body.guestId);\r\n\r\n            if (!guestId) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.guest.guestNotFound(req.body.guestId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const paymentMethod = await updatePaymentMethod(req.body);\r\n\r\n            log(\r\n                LogEventTypes.PAYMENT_METHOD_UPDATE,\r\n                req.userId,\r\n                \"Updated payment method with id: \" + req.body.paymentMethodId + \" for guest: \" + req.body.guestId + \" with type: \" + req.body.type,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: paymentMethod,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP DELETE /api/payment-methods/:paymentMethodId\r\n     * Delete payment method by id\r\n     */\r\n    router.delete(\"/:paymentMethodId\", authentication, authorization(\"paymentMethods.delete\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const id = parseInt(req.params.paymentMethodId);\r\n\r\n            if (isNaN(id)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.paymentMethods.invalidPaymentMethodId(id),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const paymentMethodExists = await checkPaymentMethodExistsById(id);\r\n\r\n            if (!paymentMethodExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.paymentMethods.paymentMethodNotFound(id),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            await deletePaymentMethod(id);\r\n\r\n            log(\r\n                LogEventTypes.PAYMENT_METHOD_DELETE,\r\n                req.userId,\r\n                \"Deleted payment method with id: \" + id,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: null,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n}","export enum PaymentMethodTypes {\r\n    CREDIT_CARD = \"Credit Card\",\r\n    BANK_ACCOUNT = \"Bank Account\"\r\n}","import {Transaction} from \"@hotel-management-system/models\";\r\nimport pgPromise, {IDatabase} from \"pg-promise\";\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\nimport queries from \"./sql/queries\";\r\n\r\nexport interface ITransactionDAO {\r\n    getTransactions(): Promise<Transaction[]>;\r\n\r\n    getTransaction(transactionId: number): Promise<Transaction>;\r\n\r\n    createTransaction(transaction: Transaction): Promise<Transaction>;\r\n\r\n    updateTransaction(transaction: Transaction): Promise<Transaction>;\r\n\r\n    deleteTransaction(transactionId: number): Promise<Transaction>;\r\n\r\n    checkTransactionExistsById(transactionId: number): Promise<boolean>;\r\n}\r\n\r\n/**\r\n * Transaction DAO\r\n * @param db - database object\r\n */\r\nexport const makeTransactionsDAO = (db: IDatabase<any, any>): ITransactionDAO => {\r\n\r\n    /**\r\n     * Get all transactions\r\n     * @returns transactions, empty array if no transactions\r\n     */\r\n    const getTransactions = async (): Promise<Transaction[]> => {\r\n        return await db.any(queries.transactions.getTransactions);\r\n    }\r\n\r\n    /**\r\n     * Get transaction by id\r\n     * @param transactionId\r\n     * @returns transaction, null if no transaction\r\n     */\r\n    const getTransaction = async (transactionId: number): Promise<Transaction> => {\r\n        try {\r\n            return await db.one(queries.transactions.getTransactionById, [transactionId]);\r\n        } catch (e) {\r\n            if (e instanceof QueryResultError && e.code === pgPromise.errors.queryResultErrorCode.noData) {\r\n                throw new Error(`Transaction ${transactionId} not found!`);\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create transaction\r\n     * @param transaction\r\n     * @returns transaction\r\n     */\r\n    const createTransaction = async (transaction: Transaction): Promise<Transaction> => {\r\n        return await db.one(queries.transactions.addTransaction, [transaction.paymentMethodId, transaction.guestId, transaction.amount, transaction.description, transaction.date]);\r\n    }\r\n\r\n    /**\r\n     * Update transaction\r\n     * @param transaction\r\n     * @returns transaction\r\n     */\r\n    const updateTransaction = async (transaction: Transaction): Promise<Transaction> => {\r\n        return await db.one(queries.transactions.updateTransaction, [transaction.paymentMethodId, transaction.guestId, transaction.amount, transaction.description, transaction.date, transaction.transactionId]);\r\n    }\r\n\r\n    /**\r\n     * Delete transaction\r\n     * @param transactionId\r\n     * @returns transaction\r\n     */\r\n    const deleteTransaction = async (transactionId: number): Promise<Transaction> => {\r\n        return await db.none(queries.transactions.deleteTransaction, [transactionId]);\r\n    }\r\n\r\n    /**\r\n     * Check if transaction exists by id\r\n     * @param transactionId\r\n     * @returns boolean\r\n     */\r\n    const checkTransactionExistsById = async (transactionId: number): Promise<boolean> => {\r\n        const exists = await db.one(queries.transactions.checkTransactionExistsById, [transactionId]);\r\n        return exists.exists;\r\n    }\r\n\r\n    return {\r\n        getTransactions,\r\n        getTransaction,\r\n        createTransaction,\r\n        updateTransaction,\r\n        deleteTransaction,\r\n        checkTransactionExistsById\r\n    }\r\n}","import express from \"express\";\r\nimport {ITransactionDAO} from \"../database/transaction\";\r\nimport {IAuthenticationMiddleware} from \"../middleware/authentication\";\r\nimport {IAuthorizationMiddleware} from \"../middleware/authorization\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport strings from \"../util/strings\";\r\nimport Joi from \"joi\";\r\nimport {IGuestDAO} from \"../database/guests\";\r\nimport {Transaction} from \"@hotel-management-system/models\";\r\nimport {IEventLogger} from \"../util/logEvent\";\r\nimport {LogEventTypes} from \"../../../../libs/models/src/lib/enums/LogEventTypes\";\r\nimport dayjs from \"dayjs\";\r\n\r\nexport interface ITransactionRoute {\r\n    router: express.Router;\r\n}\r\n\r\n/**\r\n * Transaction Route\r\n * @param transactionsDAO - transactions DAO\r\n * @param guestDAO - guest DAO\r\n * @param log - db event logger\r\n * @param authentication - authentication middleware\r\n * @param authorization - authorization middleware\r\n */\r\nexport const makeTransactionsRoute = (\r\n    transactionsDAO: ITransactionDAO,\r\n    guestDAO: IGuestDAO,\r\n    log: IEventLogger,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware\r\n): ITransactionRoute => {\r\n    const router = express.Router();\r\n\r\n    const {\r\n        getTransactions,\r\n        getTransaction,\r\n        createTransaction,\r\n        updateTransaction,\r\n        deleteTransaction,\r\n        checkTransactionExistsById\r\n    } = transactionsDAO\r\n\r\n    const {\r\n        getPaymentMethodsByGuestId,\r\n        checkGuestExistsById\r\n    } = guestDAO\r\n\r\n    /**\r\n     * HTTP GET /api/transactions\r\n     * Get all transactions\r\n     */\r\n    router.get('/', authentication, authorization('transactions.read'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const transactions = await getTransactions();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: transactions\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * HTTP GET /api/transactions/:transactionId\r\n     * Get transaction by id\r\n     */\r\n    router.get('/:transactionId', authentication, authorization('transactions.read'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const transactionId = parseInt(req.params.transactionId)\r\n\r\n            if (isNaN(transactionId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.transactions.invalidTransactionId(req.params.transactionId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // check if transaction exists\r\n            const exists = checkTransactionExistsById(transactionId);\r\n\r\n            if (!exists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.transactions.transactionNotFound(transactionId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const transaction = await getTransaction(transactionId);\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: transaction\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP POST /api/transactions/add\r\n     * Create transaction\r\n     */\r\n    router.post('/add', authentication, authorization('transactions.write'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                paymentMethodId: Joi.number().required(),\r\n                guestId: Joi.number().required(),\r\n                amount: Joi.number().required(),\r\n                description: Joi.string().required(),\r\n                date: Joi.date().required()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: error\r\n                })\r\n            }\r\n\r\n            // check if the guest exists\r\n            const exists = checkGuestExistsById(req.body.guestId);\r\n\r\n            if (!exists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.guest.guestNotFound(req.body.guestId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // check if the payment method exists and belongs to the guest\r\n            const paymentMethods = await getPaymentMethodsByGuestId(req.body.guestId);\r\n\r\n            if (!paymentMethods.some(paymentMethod => paymentMethod.paymentMethodId === req.body.paymentMethodId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.paymentMethods.paymentMethodNotFound(req.body.paymentMethodId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const parsedDate = dayjs.utc(req.body.date).toDate()\r\n\r\n            const newTransaction: Transaction = {\r\n                paymentMethodId: req.body.paymentMethodId,\r\n                guestId: req.body.guestId,\r\n                amount: req.body.amount,\r\n                description: req.body.description,\r\n                date: parsedDate\r\n            }\r\n\r\n            const createdTransaction = await createTransaction(newTransaction);\r\n\r\n            log(\r\n                LogEventTypes.TRANSACTION_CREATE,\r\n                req.userId,\r\n                \"Created a new transaction for guest: \" + req.body.guestId + \" with amount: \" + req.body.amount,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: strings.api.generic.success,\r\n                data: createdTransaction\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP PATCH /api/transactions/:transactionId\r\n     * Update transaction\r\n     */\r\n    router.patch('/:transactionId', authentication, authorization('transactions.write'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                paymentMethodId: Joi.number().required(),\r\n                guestId: Joi.number().required(),\r\n                amount: Joi.number().required(),\r\n                description: Joi.string().required(),\r\n                date: Joi.date().required()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: error\r\n                })\r\n            }\r\n\r\n            const transactionId = parseInt(req.params.transactionId);\r\n\r\n            if (isNaN(transactionId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.transactions.invalidTransactionId(req.params.transactionId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // check if the guest exists\r\n            const exists = checkGuestExistsById(req.body.guestId);\r\n\r\n            if (!exists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.guest.guestNotFound(req.body.guestId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // check if the payment method exists and belongs to the guest\r\n            const paymentMethods = await getPaymentMethodsByGuestId(req.body.guestId);\r\n\r\n            if (!paymentMethods.some(paymentMethod => paymentMethod.paymentMethodId === req.body.paymentMethodId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.paymentMethods.paymentMethodNotFound(req.body.paymentMethodId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const updatedTransaction: Transaction = {\r\n                transactionId: transactionId,\r\n                paymentMethodId: req.body.paymentMethodId,\r\n                guestId: req.body.guestId,\r\n                amount: req.body.amount,\r\n                description: req.body.description,\r\n                date: req.body.date\r\n            }\r\n\r\n            const updated = await updateTransaction(updatedTransaction);\r\n\r\n            log(\r\n                LogEventTypes.TRANSACTION_UPDATE,\r\n                req.userId,\r\n                \"Updated transaction with id: \" + transactionId + \" for guest: \" + req.body.guestId + \" with amount: \" + req.body.amount,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: updated\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP DELETE /api/transactions/:transactionId\r\n     * Delete transaction\r\n     */\r\n    router.delete('/:transactionId', authentication, authorization('transactions.write'), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const transactionId = parseInt(req.params.transactionId);\r\n\r\n            if (isNaN(transactionId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.transactions.invalidTransactionId(req.params.transactionId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const exists = checkTransactionExistsById(transactionId);\r\n\r\n            if (!exists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.transactions.transactionNotFound(transactionId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            await deleteTransaction(transactionId);\r\n\r\n            log(\r\n                LogEventTypes.TRANSACTION_DELETE,\r\n                req.userId,\r\n                \"Deleted transaction with id: \" + transactionId,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: null\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n}","import {IDatabase} from \"pg-promise\";\r\nimport {CalendarNotes} from \"@hotel-management-system/models\";\r\nimport queries from \"./sql/queries\";\r\n\r\nexport interface INotesDAO {\r\n    getNoteByDate: (date: Date) => Promise<CalendarNotes[]>\r\n    addNoteToDate: (noteObj: CalendarNotes) => Promise<CalendarNotes>\r\n    deleteNote: (noteId: number) => Promise<void>,\r\n    checkNoteExistsById: (noteId: number) => Promise<boolean>\r\n    updateNote: (noteObj: CalendarNotes) => Promise<CalendarNotes>\r\n}\r\n\r\n/**\r\n * Notes DAO\r\n * @param db - database object\r\n */\r\nexport const makeNotesDAO = (db: IDatabase<any, any>): INotesDAO => {\r\n\r\n    /**\r\n     * Get note by date\r\n     * @param day - date\r\n     * @returns - note object\r\n     */\r\n    const getNoteByDate = async (day: Date): Promise<CalendarNotes[]> => {\r\n        const isoDate = day.toISOString();\r\n        return await db.manyOrNone(queries.notes.getNoteById, [isoDate]);\r\n    }\r\n\r\n    /**\r\n     * Add note to date\r\n     * @param noteObj - note object\r\n     * @returns - note object\r\n     */\r\n    const addNoteToDate = async (noteObj: CalendarNotes): Promise<CalendarNotes> => {\r\n        return await db.one(queries.notes.addNote, [noteObj.date, noteObj.note]);\r\n    }\r\n\r\n    /**\r\n     * Delete note\r\n     * @param noteId - note id\r\n     * @returns - void\r\n     */\r\n    const deleteNote = async (noteId: number): Promise<void> => {\r\n        await db.none(queries.notes.deleteNote, [noteId]);\r\n    }\r\n\r\n    /**\r\n     * Check if note exists by id\r\n     * @param noteId - note id\r\n     * @returns - boolean\r\n     */\r\n    const checkNoteExistsById = async (noteId: number): Promise<boolean> => {\r\n        const note = await db.one(queries.notes.checkNoteExistsById, [noteId]);\r\n        return note.exists;\r\n    }\r\n\r\n    /**\r\n     * Update note\r\n     * @param noteObj\r\n     * @returns - note object\r\n     */\r\n    const updateNote = async (noteObj: CalendarNotes): Promise<CalendarNotes> => {\r\n        return await db.one(queries.notes.updateNote, [noteObj.note, noteObj.noteId]);\r\n    }\r\n\r\n    return {\r\n        getNoteByDate,\r\n        addNoteToDate,\r\n        deleteNote,\r\n        checkNoteExistsById,\r\n        updateNote,\r\n    }\r\n\r\n\r\n}","import express from \"express\";\r\nimport {IAuthenticationMiddleware} from \"../middleware/authentication\";\r\nimport {IAuthorizationMiddleware} from \"../middleware/authorization\";\r\nimport {INotesDAO} from \"../database/calendar\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport strings from \"../util/strings\";\r\nimport Joi from \"joi\";\r\nimport {CalendarNotes} from \"@hotel-management-system/models\";\r\nimport {IEventLogger} from \"../util/logEvent\";\r\nimport {LogEventTypes} from \"../../../../libs/models/src/lib/enums/LogEventTypes\";\r\nimport dayjs from \"dayjs\";\r\nimport \"dayjs/plugin/utc\";\r\n\r\n/**\r\n * Calender Route\r\n * BASE URL: /api/calendar\r\n */\r\n\r\nexport interface ICalendarRoute {\r\n    router: express.Router\r\n}\r\n\r\n/**\r\n * Calendar Route\r\n * @param calendarDAO - calendar DAO\r\n * @param log - db event logger\r\n * @param authentication - authentication middleware\r\n * @param authorization - authorization middleware\r\n */\r\nexport const makeCalendarRoute = (\r\n    calendarDAO: INotesDAO,\r\n    log: IEventLogger,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware,\r\n): ICalendarRoute => {\r\n    const {\r\n        getNoteByDate,\r\n        addNoteToDate,\r\n        checkNoteExistsById,\r\n        updateNote\r\n    } = calendarDAO\r\n\r\n    const router = express.Router();\r\n\r\n    /**\r\n     * HTTP GET /api/calendar/:date\r\n     * Get note by date\r\n     */\r\n    router.get(\"/:date\", authentication, authorization(\"calendar.get\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const date = req.params.date;\r\n            const parsedDate = dayjs.utc(date).toDate();\r\n            const note = await getNoteByDate(parsedDate);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: note,\r\n            });\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP POST /api/calendar/add\r\n     * Add note to date\r\n     */\r\n    router.post(\"/add\", authentication, authorization(\"calendar.add\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                date: Joi.date().required(),\r\n                note: Joi.string().required(),\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const parsedDate = dayjs.utc(req.body.date).toDate();\r\n\r\n            const newNote: CalendarNotes = {\r\n                date: parsedDate,\r\n                note: req.body.note,\r\n            }\r\n\r\n            const note = await addNoteToDate(newNote);\r\n\r\n            log(\r\n                LogEventTypes.CALENDAR_NOTE_CREATE,\r\n                req.userId,\r\n                \"Created a new note for date: \" + req.body.date + \" with note: \" + req.body.note,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: strings.api.generic.success,\r\n                data: note,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP PATCH /api/calendar/:noteId\r\n     * Update note\r\n     */\r\n    router.patch(\"/:noteId\", authentication, authorization(\"calendar.edit\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const noteId = parseInt(req.params.noteId)\r\n\r\n            if (isNaN(noteId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.notes.invalidNoteId(noteId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if note exists\r\n            const noteExists = await checkNoteExistsById(noteId);\r\n\r\n            if (!noteExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.notes.noteNotFound(noteId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                date: Joi.date().required(),\r\n                note: Joi.string().required(),\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const parsedDate = dayjs.utc(req.body.date).toDate();\r\n\r\n            const updatedNote: CalendarNotes = {\r\n                noteId: noteId,\r\n                date: parsedDate,\r\n                note: req.body.note,\r\n            }\r\n\r\n            const note = await updateNote(updatedNote);\r\n\r\n            log(\r\n                LogEventTypes.CALENDAR_NOTE_UPDATE,\r\n                req.userId,\r\n                \"Updated note with id: \" + noteId + \" to date: \" + req.body.date + \" with note: \" + req.body.note,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: note,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP DELETE /api/calendar/:noteId\r\n     * Delete note\r\n     */\r\n    router.delete(\"/:noteId\", authentication, authorization(\"calendar.delete\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const noteId = parseInt(req.params.noteId)\r\n\r\n            if (isNaN(noteId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.notes.invalidNoteId(noteId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if note exists\r\n            const noteExists = await checkNoteExistsById(noteId);\r\n\r\n            if (!noteExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.notes.noteNotFound(noteId),\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            await calendarDAO.deleteNote(noteId);\r\n\r\n            log(\r\n                LogEventTypes.CALENDAR_NOTE_DELETE,\r\n                req.userId,\r\n                \"Deleted note with id: \" + noteId,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.generic.success,\r\n                data: null,\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n}\r\n","import {Ticket, TicketMessages} from \"@hotel-management-system/models\";\r\nimport pgPromise, {IDatabase} from \"pg-promise\";\r\nimport queries from \"./sql/queries\";\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\n\r\nexport interface ITicketsDAO {\r\n    getTicketById(id: number): Promise<Ticket | null>;\r\n\r\n    addTicket(ticket: Ticket): Promise<Ticket>;\r\n\r\n    updateTicket(ticket: Ticket): Promise<Ticket>;\r\n\r\n    deleteTicket(id: number): Promise<void>;\r\n\r\n    getAllTickets(): Promise<Ticket[]>;\r\n\r\n    addCommentToTicket(ticketMessage: TicketMessages): Promise<TicketMessages>;\r\n\r\n    checkTicketExistsById(id: number): Promise<boolean>;\r\n\r\n    getTicketComments(ticketId: number): Promise<TicketMessages[]>;\r\n\r\n    deleteTicketCommentsByTicketId(ticketId: number): Promise<void>;\r\n}\r\n\r\n/**\r\n * Tickets DAO\r\n * @param db - database object\r\n */\r\nexport const makeTicketsDAO = (db: IDatabase<any, any>): ITicketsDAO => {\r\n\r\n    /**\r\n     * Get ticket by id\r\n     * @param id\r\n     * @returns ticket, null if no ticket\r\n     */\r\n    const getTicketById = async (id: number): Promise<Ticket | null> => {\r\n        try {\r\n            return await db.one(queries.tickets.getTicketById, [id]);\r\n        } catch (error) {\r\n            if (error instanceof QueryResultError && error.code === pgPromise.errors.queryResultErrorCode.noData) {\r\n                return null;\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add ticket\r\n     * @param ticket\r\n     * @returns ticket\r\n     */\r\n    const addTicket = async (ticket: Ticket): Promise<Ticket> => {\r\n        return await db.one(queries.tickets.addTicket, [ticket.userId, ticket.title, ticket.description, ticket.status, ticket.dateOpened]);\r\n    }\r\n\r\n    /**\r\n     * Update ticket\r\n     * @param ticket\r\n     * @returns ticket\r\n     */\r\n    const updateTicket = async (ticket: Ticket): Promise<Ticket> => {\r\n        return await db.one(queries.tickets.updateTicket, [ticket.userId, ticket.title, ticket.description, ticket.status, ticket.dateOpened, ticket.ticketId]);\r\n    }\r\n\r\n    /**\r\n     * Delete ticket\r\n     * @param id\r\n     * @returns void\r\n     */\r\n    const deleteTicket = async (id: number): Promise<void> => {\r\n        await db.none(queries.tickets.deleteTicket, [id]);\r\n    }\r\n\r\n    /**\r\n     * Get all tickets\r\n     * @returns tickets, empty array if no tickets\r\n     */\r\n    const getAllTickets = async (): Promise<Ticket[]> => {\r\n        return await db.any(queries.tickets.getAllTickets);\r\n    }\r\n\r\n    /**\r\n     * Add comment to ticket\r\n     * @param ticketMessage\r\n     * @returns ticket message\r\n     */\r\n    const addCommentToTicket = async (ticketMessage: TicketMessages): Promise<TicketMessages> => {\r\n        return await db.one(queries.tickets.addCommentToTicket, [ticketMessage.ticketId, ticketMessage.userId, ticketMessage.message, ticketMessage.dateCreated]);\r\n    }\r\n\r\n    /**\r\n     * Check if ticket exists by id\r\n     * @param id\r\n     * @returns boolean\r\n     */\r\n    const checkTicketExistsById = async (id: number): Promise<boolean> => {\r\n        const result = await db.one(queries.tickets.checkTicketExistsById, [id]);\r\n        return result.exists;\r\n    }\r\n\r\n    /**\r\n     * Get ticket comments\r\n     * @param ticketId\r\n     * @returns ticket comments, empty array if no comments\r\n     */\r\n    const getTicketComments = async (ticketId: number): Promise<TicketMessages[]> => {\r\n        return await db.any(queries.tickets.fetchTicketComments, [ticketId]);\r\n    }\r\n\r\n    /**\r\n     * Delete ticket comments by ticket id\r\n     * @param ticketId\r\n     * @returns void\r\n     */\r\n    const deleteTicketCommentsByTicketId = async (ticketId: number): Promise<void> => {\r\n        await db.none(queries.tickets.deleteTicketCommentsByTicketId, [ticketId]);\r\n    }\r\n\r\n    return {\r\n        getTicketById,\r\n        addTicket,\r\n        updateTicket,\r\n        deleteTicket,\r\n        getAllTickets,\r\n        addCommentToTicket,\r\n        checkTicketExistsById,\r\n        getTicketComments,\r\n        deleteTicketCommentsByTicketId\r\n    }\r\n\r\n}","import express from \"express\";\r\nimport {IUsersDAO} from \"../database/users\";\r\nimport {IAuthenticationMiddleware} from \"../middleware/authentication\";\r\nimport {IAuthorizationMiddleware} from \"../middleware/authorization\";\r\nimport {ITicketsDAO} from \"../database/tickets\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport Joi from \"joi\";\r\nimport {Ticket, TicketMessages, TicketStatuses} from \"@hotel-management-system/models\";\r\nimport {IEventLogger} from \"../util/logEvent\";\r\nimport {LogEventTypes} from \"../../../../libs/models/src/lib/enums/LogEventTypes\";\r\nimport dayjs from \"dayjs\";\r\nimport strings from \"../util/strings\";\r\nimport queries from \"../database/sql/queries\";\r\n\r\ninterface ITicketsRoute {\r\n    router: express.Router;\r\n}\r\n\r\nexport const makeTicketsRoute = (\r\n    ticketsDAO: ITicketsDAO,\r\n    usersDAO: IUsersDAO,\r\n    log: IEventLogger,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware\r\n): ITicketsRoute => {\r\n    const router = express.Router();\r\n\r\n    const {addCommentToTicket, addTicket, deleteTicket, getAllTickets, getTicketById, updateTicket, checkTicketExistsById, getTicketComments, deleteTicketCommentsByTicketId} = ticketsDAO\r\n    const {checkUserExists, checkUserExistsById, createUser, deleteUser, getUserById, getUserByUsername, getUsers, searchUsers, updateUser} = usersDAO\r\n\r\n    /**\r\n     * Get all tickets-page\r\n     */\r\n    router.get(\"/\", authentication, authorization(\"tickets-page.create\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const tickets = await getAllTickets();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                data: tickets,\r\n                message: strings.api.generic.success,\r\n                statusCode: StatusCodes.OK\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Get ticket comments\r\n     */\r\n    router.get(\"/:ticketId/comments\", authentication, authorization(\"tickets-page.create\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const ticketId = parseInt(req.params.ticketId);\r\n\r\n            if (isNaN(ticketId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.tickets.invalidTicketId(req.params.ticketId),\r\n                    statusCode: StatusCodes.BAD_REQUEST\r\n                })\r\n            }\r\n\r\n            const ticketExists = await checkTicketExistsById(ticketId);\r\n\r\n            if (!ticketExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.tickets.ticketNotFound(ticketId),\r\n                    statusCode: StatusCodes.NOT_FOUND\r\n                })\r\n            }\r\n\r\n            const comments = await getTicketComments(ticketId);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                data: comments,\r\n                message: strings.api.generic.success,\r\n                statusCode: StatusCodes.OK\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Add comment to ticket\r\n     */\r\n    router.post(\"/:ticketId/comments/add\", authentication, authorization(\"tickets-page.create\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const ticketId = parseInt(req.params.ticketId);\r\n\r\n            if (isNaN(ticketId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.tickets.invalidTicketId(req.params.ticketId),\r\n                    statusCode: StatusCodes.BAD_REQUEST\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                userId: Joi.number().required(),\r\n                message: Joi.string().required(),\r\n                dateCreated: Joi.date().required()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: error.message,\r\n                    statusCode: StatusCodes.BAD_REQUEST\r\n                })\r\n            }\r\n\r\n            // Check if ticket exists\r\n            const ticketExists = await checkTicketExistsById(ticketId);\r\n\r\n            if (!ticketExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.tickets.ticketNotFound(ticketId),\r\n                    statusCode: StatusCodes.NOT_FOUND\r\n                })\r\n            }\r\n\r\n            // Check if user exists\r\n            const userExists = await checkUserExistsById(req.body.userId);\r\n\r\n            if (!userExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.users.userNotFound(req.body.userId),\r\n                    statusCode: StatusCodes.NOT_FOUND\r\n                })\r\n            }\r\n\r\n            const parsedDate = dayjs.utc(req.body.dateCreated).toDate()\r\n\r\n            const newTicketMessage: TicketMessages = {\r\n                ticketId: ticketId,\r\n                userId: req.body.userId,\r\n                message: req.body.message,\r\n                dateCreated: parsedDate\r\n            }\r\n\r\n            const message = await addCommentToTicket(newTicketMessage);\r\n\r\n            log(\r\n                LogEventTypes.TICKET_COMMENT_CREATE,\r\n                req.userId,\r\n                \"Added a new comment to ticket with id: \" + ticketId + \" with message: \" + req.body.message,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                data: message,\r\n                message: strings.api.generic.success,\r\n                statusCode: StatusCodes.CREATED\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Get Ticket by ID\r\n     */\r\n    router.get(\"/:ticketId\", authentication, authorization(\"tickets-page.create\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const ticketId = parseInt(req.params.ticketId);\r\n\r\n            if (isNaN(ticketId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.tickets.invalidTicketId(req.params.ticketId),\r\n                    statusCode: StatusCodes.BAD_REQUEST\r\n                })\r\n            }\r\n\r\n            const ticket = await getTicketById(ticketId);\r\n\r\n            if (ticket === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.tickets.ticketNotFound(ticketId),\r\n                    statusCode: StatusCodes.NOT_FOUND\r\n                })\r\n            }\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                data: ticket,\r\n                message: \"Success\",\r\n                statusCode: StatusCodes.OK\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Create a new ticket\r\n     */\r\n    router.post(\"/add\", authentication, authorization(\"tickets-page.create\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                userId: Joi.number().required(),\r\n                title: Joi.string().required(),\r\n                description: Joi.string().required(),\r\n                status: Joi.string().required().valid(...Object.values(TicketStatuses)),\r\n                dateOpened: Joi.date().required()\r\n            })\r\n\r\n            const {error, value} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: error.message,\r\n                    statusCode: StatusCodes.BAD_REQUEST\r\n                })\r\n            }\r\n\r\n            // Check if user exists\r\n            const userExists = await checkUserExistsById(value.userId);\r\n\r\n            if (!userExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.users.userNotFound(value.userId),\r\n                    statusCode: StatusCodes.NOT_FOUND\r\n                })\r\n            }\r\n\r\n            const ticket = await addTicket(value);\r\n\r\n            log(\r\n                LogEventTypes.TICKET_CREATE,\r\n                req.userId,\r\n                \"Created a new ticket with title: \" + req.body.title + \" and description: \" + req.body.description,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                data: ticket,\r\n                message: strings.api.generic.success,\r\n                statusCode: StatusCodes.CREATED\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Update a ticket\r\n     */\r\n    router.patch(\"/:ticketId\", authentication, authorization(\"tickets-page.create\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const ticketId = parseInt(req.params.ticketId);\r\n\r\n            if (isNaN(ticketId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.tickets.invalidTicketId(req.params.ticketId),\r\n                    statusCode: StatusCodes.BAD_REQUEST\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                userId: Joi.number().required(),\r\n                title: Joi.string().required(),\r\n                description: Joi.string().required(),\r\n                status: Joi.string().required().valid(...Object.values(TicketStatuses)),\r\n                dateOpened: Joi.date().required()\r\n            })\r\n\r\n            const {error, value} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: error.message,\r\n                    statusCode: StatusCodes.BAD_REQUEST\r\n                })\r\n            }\r\n\r\n            // check if ticket exists\r\n            const ticketExists = await checkTicketExistsById(ticketId);\r\n\r\n            if (!ticketExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.tickets.ticketNotFound(ticketId),\r\n                    statusCode: StatusCodes.NOT_FOUND\r\n                })\r\n            }\r\n\r\n            // check if user exists\r\n            const userExists = await checkUserExistsById(value.userId);\r\n            if (!userExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.users.userNotFound(value.userId),\r\n                    statusCode: StatusCodes.NOT_FOUND\r\n                })\r\n            }\r\n\r\n            const updatedTicket: Ticket = {\r\n                ticketId: ticketId,\r\n                userId: value.userId,\r\n                title: value.title,\r\n                description: value.description,\r\n                status: value.status,\r\n                dateOpened: value.dateOpened\r\n            }\r\n\r\n            const ticket = await updateTicket(updatedTicket);\r\n\r\n            log(\r\n                LogEventTypes.TICKET_UPDATE,\r\n                req.userId,\r\n                \"Updated ticket with id: \" + ticketId + \" with title: \" + req.body.title + \" and description: \" + req.body.description,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                data: ticket,\r\n                message: strings.api.generic.success,\r\n                statusCode: StatusCodes.OK\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Delete a ticket\r\n     */\r\n    router.delete(\"/:ticketId\", authentication, authorization(\"tickets-page.create\"), async (req: express.Request, res: express.Response, next) => {\r\n        try {\r\n            const ticketId = parseInt(req.params.ticketId);\r\n\r\n            if (isNaN(ticketId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.tickets.invalidTicketId(req.params.ticketId),\r\n                    statusCode: StatusCodes.BAD_REQUEST\r\n                })\r\n            }\r\n\r\n            // check if ticket exists\r\n            const ticketExists = await checkTicketExistsById(ticketId);\r\n\r\n            if (!ticketExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    data: null,\r\n                    message: strings.api.tickets.ticketNotFound(ticketId),\r\n                    statusCode: StatusCodes.NOT_FOUND\r\n                })\r\n            }\r\n\r\n            await deleteTicket(ticketId);\r\n\r\n            log(\r\n                LogEventTypes.TICKET_DELETE,\r\n                req.userId,\r\n                \"Deleted ticket with id: \" + ticketId,\r\n            )\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                data: null,\r\n                message: strings.api.generic.success,\r\n                statusCode: StatusCodes.OK\r\n            })\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n\r\n}","import {ILogsDAO} from \"../database/logs\";\r\nimport {LogEventTypes} from \"../../../../libs/models/src/lib/enums/LogEventTypes\";\r\n\r\nexport interface IEventLogger {\r\n    (eventType: LogEventTypes, userId: number, description?: string): Promise<void>;\r\n}\r\n\r\n/**\r\n * Event Logger to log events to the database\r\n * @param logsDAO - logs DAO\r\n */\r\nexport const makeEventLogger = (logsDAO: ILogsDAO): IEventLogger => {\r\n\r\n    /**\r\n     * Log an event to the database\r\n     * @param eventType - event type\r\n     * @param userId - user id\r\n     * @param description - description\r\n     */\r\n    return async (eventType: LogEventTypes, userId: number, description?: string) => {\r\n        try {\r\n            await logsDAO.addLog({\r\n                eventType: eventType,\r\n                timestamp: new Date(),\r\n                userId: userId,\r\n                description: description\r\n            })\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}","module.exports = require(\"os\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\nimport makeConfig from \"./config\";\r\nimport startServer from \"./startServer\";\r\nimport {logger} from \"./logger\";\r\nimport os from \"os\";\r\nimport path from \"path\";\r\n\r\nconst config = makeConfig();\r\n// check if command line arguments were passed\r\nif (process.argv.length > 2) {\r\n    // load config from command line arguments\r\n    config.loadFromArgs(process.argv.slice(2))\r\n        .then(async () => {\r\n            const server = await startServer(config.getConfig())\r\n            return server.start();\r\n        })\r\n        .catch((err) => {\r\n            logger.fatal(err);\r\n            process.exit(1);\r\n        })\r\n} else {\r\n    // load config from file\r\n    const homedir = os.homedir();\r\n    const configPath = path.join(homedir, '.config', 'hotel-management-system-backend', 'server-config.json');\r\n    logger.info(`Loading config from ${configPath}`)\r\n    config.loadFromFile(configPath)\r\n        .then(async () => {\r\n            logger.info(\"Loaded config\");\r\n            const server = await startServer(config.getConfig())\r\n            return server.start();\r\n        })\r\n        .catch((err) => {\r\n            logger.fatal(err);\r\n            process.exit(1);\r\n        })\r\n}\r\n\r\nexport {\r\n    config\r\n}\r\n\r\n\r\n\r\n\r\n"],"names":[],"sourceRoot":""}
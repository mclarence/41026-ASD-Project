{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"tslib\"","webpack:///./src/config.ts","webpack:///external commonjs \"minimist\"","webpack:///external node-commonjs \"fs\"","webpack:///./src/startServer.ts","webpack:///./src/logger.ts","webpack:///external commonjs \"pino\"","webpack:///external commonjs \"pino-http\"","webpack:///external commonjs \"pino-pretty\"","webpack:///./src/database/db.ts","webpack:///./src/database/sql/queries.ts","webpack:///./src/util/camelizeColumns.ts","webpack:///external commonjs \"pg-promise\"","webpack:///external commonjs \"express\"","webpack:///./src/resources/usersRoute.ts","webpack:///./src/util/strings.ts","webpack:///./src/util/hashPassword.ts","webpack:///external node-commonjs \"crypto\"","webpack:///external commonjs \"jsonwebtoken\"","webpack:///./src/util/sendResponse.ts","webpack:///external commonjs \"http-status-codes\"","webpack:///external commonjs \"joi\"","webpack:///./src/resources/roomsRoute.ts","webpack:///external node-commonjs \"path\"","webpack:///./src/database/users.ts","webpack:///./src/database/roles.ts","webpack:///./src/database/tokens.ts","webpack:///./src/middleware/authentication.ts","webpack:///./src/middleware/authorization.ts","webpack:///./src/util/checkPermissions.ts","webpack:///external commonjs \"process\"","webpack:///./src/resources/rolesRoute.ts","webpack:///./src/database/guests.ts","webpack:///./src/resources/guestsRoute.ts","webpack:///./src/database/reservations.ts","webpack:///./src/resources/reservationsRoute.ts","webpack:///./src/database/rooms.ts","webpack:///external node-commonjs \"os\"","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"tslib\");","import {ServerConfig} from \"@hotel-management-system/models\";\r\nimport minimist from \"minimist\";\r\nimport fs from \"fs\";\r\n\r\ninterface ApplicationConfig {\r\n    loadFromFile: (pathToFile: string) => Promise<void>,\r\n    loadFromArgs: (args: string[]) => Promise<void>,\r\n    getConfig: () => ServerConfig\r\n}\r\n\r\nconst makeConfig = (): ApplicationConfig => {\r\n    let _config: ServerConfig = {\r\n        database: {\r\n            database: null,\r\n            host: null,\r\n            password: null,\r\n            port: 3333,\r\n            user: null\r\n        },\r\n        jwt: {\r\n            secret: null\r\n        },\r\n        server: {\r\n            listenAddress: \"\",\r\n            port: 0\r\n        }\r\n    }\r\n\r\n    const loadFromFile = (pathToFile: string): Promise<void> => {\r\n        return new Promise((resolve, reject) => {\r\n            if (!fs.existsSync(pathToFile)) {\r\n                reject(new Error(\"Config file does not exist\"));\r\n            }\r\n\r\n            let configFile: ServerConfig;\r\n            try {\r\n                configFile = JSON.parse(fs.readFileSync(pathToFile, 'utf8'));\r\n            } catch (e) {\r\n                reject(new Error(\"Config file is not valid json\"));\r\n            }\r\n\r\n            const requiredFields = ['database', 'database.host', 'database.port', 'database.database', 'database.user', 'database.password', 'jwt.secret'];\r\n            for (const field of requiredFields) {\r\n                const fieldParts = field.split('.');\r\n                let value = configFile;\r\n                for (const part of fieldParts) {\r\n                    if (value[part] === undefined) {\r\n                        reject(new Error(`Config file is missing required field ${field}`));\r\n                    }\r\n                    value = value[part];\r\n                }\r\n            }\r\n\r\n            if (configFile.server.listenAddress === undefined) {\r\n                configFile.server.listenAddress = \"127.0.0.1\";\r\n            }\r\n\r\n            if (configFile.server.port === undefined) {\r\n                configFile.server.port = 3333;\r\n            }\r\n\r\n            _config = configFile\r\n\r\n            resolve();\r\n        })\r\n    }\r\n\r\n    const loadFromArgs = (args: string[]): Promise<void> => {\r\n        return new Promise((resolve, reject) => {\r\n            enum ArgKeys {\r\n                LISTEN_ADDRESS = 'listenAddress',\r\n                LISTEN_PORT = 'listenPort',\r\n                DATABASE_HOST = 'database-host',\r\n                DATABASE_PORT = 'database-port',\r\n                DATABASE_NAME = 'database-name',\r\n                DATABASE_USER = 'database-user',\r\n                DATABASE_PASSWORD = 'database-password',\r\n                JWT_SECRET = 'jwt-secret'\r\n\r\n            }\r\n\r\n            const requriedArgs = [ArgKeys.DATABASE_HOST, ArgKeys.DATABASE_PORT, ArgKeys.DATABASE_NAME, ArgKeys.DATABASE_USER, ArgKeys.DATABASE_PASSWORD, ArgKeys.JWT_SECRET]\r\n            const parsedArgs = minimist(args, {\r\n                //string: ['listenAddress', 'database-host', 'database-name', 'database-user', 'database-password', 'jwt-secret'],\r\n                string: [ArgKeys.LISTEN_ADDRESS, ArgKeys.DATABASE_HOST, ArgKeys.DATABASE_NAME, ArgKeys.DATABASE_USER, ArgKeys.DATABASE_PASSWORD, ArgKeys.JWT_SECRET]\r\n            })\r\n\r\n            for (const arg of requriedArgs) {\r\n                if (parsedArgs[arg] === undefined) {\r\n                    reject(new Error(`Missing required argument ${arg}`));\r\n                }\r\n            }\r\n\r\n            _config.server.listenAddress = parsedArgs[ArgKeys.LISTEN_ADDRESS] || \"127.0.0.1\"\r\n            _config.server.port = parsedArgs[ArgKeys.LISTEN_PORT] || 3333\r\n            _config.database.host = parsedArgs[ArgKeys.DATABASE_HOST]\r\n            _config.database.port = parsedArgs[ArgKeys.DATABASE_PORT]\r\n            _config.database.database = parsedArgs[ArgKeys.DATABASE_NAME]\r\n            _config.database.user = parsedArgs[ArgKeys.DATABASE_USER]\r\n            _config.database.password = parsedArgs[ArgKeys.DATABASE_PASSWORD]\r\n            _config.jwt.secret = parsedArgs[ArgKeys.JWT_SECRET]\r\n\r\n            resolve();\r\n        })\r\n    }\r\n\r\n    return {\r\n        getConfig: () => _config,\r\n        loadFromFile,\r\n        loadFromArgs,\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default makeConfig;","module.exports = require(\"minimist\");","module.exports = require(\"fs\");","import { expressLogger, logger } from \"./logger\";\r\nimport createDatabase from \"./database/db\";\r\nimport express, { Express } from \"express\";\r\nimport makeUsersRoute from \"./resources/usersRoute\";\r\nimport {makeRoomsRoute} from \"./resources/roomsRoute\";\r\nimport path from \"path\";\r\nimport {\r\n  ApiResponse,\r\n  Role,\r\n  ServerConfig,\r\n  User,\r\n} from \"@hotel-management-system/models\";\r\nimport makeUsersDAO, { IUsersDAO } from \"./database/users\";\r\nimport makeRolesDAO, { IRolesDAO } from \"./database/roles\";\r\nimport makeTokenRevocationListDAO from \"./database/tokens\";\r\nimport makeAuthenticationMiddleware from \"./middleware/authentication\";\r\nimport makeAuthorizationMiddleware from \"./middleware/authorization\";\r\nimport * as process from \"process\";\r\n\r\n// hash the password\r\nimport crypto from \"crypto\";\r\nimport hashPassword from \"./util/hashPassword\";\r\nimport makeRolesRoute from \"./resources/rolesRoute\";\r\nimport makeGuestDAO from \"./database/guests\";\r\nimport makeGuestsRoute from \"./resources/guestsRoute\";\r\nimport { makeReservationDAO } from \"./database/reservations\";\r\nimport { makeReservationsRoute } from \"./resources/reservationsRoute\";\r\nimport { makeRoomsDAO } from \"./database/rooms\";\r\n\r\nconst createDefaultRoleAndAdmin = async (\r\n  rolesDAO: IRolesDAO,\r\n  usersDAO: IUsersDAO\r\n) => {\r\n  const DEFAULT_ROLE_ID = 1;\r\n  const DEFAULT_UID = 1;\r\n  const { checkRoleExists, addRole } = rolesDAO;\r\n\r\n  const superAdminRoleExists = await checkRoleExists(DEFAULT_ROLE_ID);\r\n\r\n  if (!superAdminRoleExists) {\r\n    const superAdminRole: Role = {\r\n      roleId: DEFAULT_ROLE_ID,\r\n      name: \"Super Admin\",\r\n      permissionData: [\"*\"],\r\n    };\r\n\r\n    await addRole(superAdminRole)\r\n      .then(() => {\r\n        logger.info(\"Created default role\");\r\n      })\r\n      .catch((err: any) => {\r\n        logger.fatal(\"Failed to create default role\");\r\n        logger.fatal(err);\r\n        process.exit(1);\r\n      });\r\n  }\r\n\r\n  const adminUserExists = await usersDAO.checkUserExists(\"admin\");\r\n\r\n  if (!adminUserExists) {\r\n    const user: User = {\r\n      email: \"admin@example.com\",\r\n      firstName: \"super\",\r\n      lastName: \"admin\",\r\n      phoneNumber: \"\",\r\n      position: \"Admin\",\r\n      userId: DEFAULT_UID,\r\n      username: \"admin\",\r\n      password: \"admin\",\r\n      passwordSalt: \"\",\r\n      roleId: DEFAULT_ROLE_ID,\r\n    };\r\n\r\n    // generate a random password salt\r\n    user.passwordSalt =\r\n      Math.random().toString(36).substring(2, 15) +\r\n      Math.random().toString(36).substring(2, 15);\r\n    user.password = hashPassword(user.password, user.passwordSalt);\r\n\r\n    await usersDAO\r\n      .createUser(user)\r\n      .then(() => {\r\n        logger.info(\"Created default user\");\r\n      })\r\n      .catch((err: any) => {\r\n        logger.fatal(\"Failed to create default user\");\r\n        logger.fatal(err);\r\n        process.exit(1);\r\n      });\r\n  }\r\n};\r\n\r\ninterface IServer {\r\n  app: Express;\r\n  start: () => void;\r\n}\r\n\r\nconst startServer = async (serverOptions: ServerConfig): Promise<IServer> => {\r\n  logger.info(\"Starting server\");\r\n\r\n  const db = createDatabase(serverOptions);\r\n\r\n  await db\r\n    .testConnection()\r\n    .then(() => {\r\n      return db.createTables();\r\n    })\r\n    .catch((err: any) => {\r\n      logger.fatal(\"Failed to connect to database\");\r\n      logger.fatal(err);\r\n      process.exit(1);\r\n    });\r\n\r\n  const usersDAO = makeUsersDAO(db.db);\r\n  const rolesDAO = makeRolesDAO(db.db);\r\n  const guestsDAO = makeGuestDAO(db.db);\r\n  const reservationsDAO = makeReservationDAO(db.db);\r\n  const tokenRevocationListDAO = makeTokenRevocationListDAO(db.db);\r\n  const roomsDAO = makeRoomsDAO(db.db);\r\n\r\n  await createDefaultRoleAndAdmin(rolesDAO, usersDAO);\r\n\r\n  const authenticationMiddleware = makeAuthenticationMiddleware(\r\n    serverOptions.jwt.secret,\r\n    tokenRevocationListDAO\r\n  );\r\n\r\n  const authorizationMiddleware = makeAuthorizationMiddleware(rolesDAO);\r\n\r\n  const app = express();\r\n\r\n  app.use(express.json());\r\n  app.use(expressLogger);\r\n\r\n  const usersRoute = makeUsersRoute(\r\n    usersDAO,\r\n    rolesDAO,\r\n    tokenRevocationListDAO,\r\n    authenticationMiddleware,\r\n    authorizationMiddleware,\r\n    serverOptions.jwt.secret\r\n  );\r\n\r\n  const rolesRoute = makeRolesRoute(\r\n    rolesDAO,\r\n    authenticationMiddleware,\r\n    authorizationMiddleware\r\n  );\r\n\r\n  const guestsRoute = makeGuestsRoute(\r\n    guestsDAO,\r\n    authenticationMiddleware,\r\n    authorizationMiddleware\r\n  );\r\n\r\n  const reservationsRoute = makeReservationsRoute(\r\n    reservationsDAO,\r\n    guestsDAO,\r\n    authenticationMiddleware,\r\n    authorizationMiddleware\r\n  );\r\n\r\n  const roomsRoute = makeRoomsRoute(\r\n    roomsDAO,\r\n    authenticationMiddleware,\r\n    authorizationMiddleware\r\n  );\r\n\r\n  app.use(\"/api/users\", usersRoute.router);\r\n  app.use(\"/api/roles\", rolesRoute.router);\r\n  app.use(\"/api/rooms\", roomsRoute.router);\r\n  app.use(\"/api/guests\", guestsRoute.router);\r\n  app.use(\"/api/reservations\", reservationsRoute.router);\r\n  app.use(express.static(path.join(__dirname, \"assets\")));\r\n\r\n  // catch all errors\r\n  app.use((err: any, req, res, next) => {\r\n    if (\"body\" in err && err.status === 400 && err instanceof SyntaxError) {\r\n      res.status(400).send({\r\n        success: false,\r\n        message: \"Invalid request body\",\r\n        statusCode: 400,\r\n        data: err.message,\r\n      } as ApiResponse<string>);\r\n    }\r\n    next();\r\n  });\r\n\r\n  app.get(\"/api\", (req, res) => {\r\n    res.send({ message: \"Welcome to hotel-management-system-backend!\" });\r\n  });\r\n\r\n  // serve react app from assets folder\r\n  app.get(\"*\", function (req, res) {\r\n    res.sendFile(\"index.html\", { root: path.join(__dirname, \"assets\") });\r\n  });\r\n\r\n  const start = () => {\r\n    const port = serverOptions.server.port;\r\n    const server = app.listen(port, () => {\r\n      logger.info(`Listening at http://localhost:${port}/api`);\r\n    });\r\n    server.on(\"error\", console.error);\r\n  };\r\n\r\n  return {\r\n    app,\r\n    start,\r\n  };\r\n};\r\n\r\nexport default startServer;\r\n","// check if the environment is development and if so, import pino-pretty\r\nimport pino, { Logger } from \"pino\";\r\nimport pinoHttp, {HttpLogger} from \"pino-http\";\r\n\r\nimport pretty from \"pino-pretty\";\r\n\r\nlet logger: Logger<any>;\r\nlet expressLogger: HttpLogger<any>;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n    logger = pino(pretty())\r\n    logger.level = \"debug\";\r\n    expressLogger = pinoHttp(pretty());\r\n} else {\r\n    logger = pino();\r\n    expressLogger = pinoHttp();\r\n}\r\n\r\nexport { logger, expressLogger };","module.exports = require(\"pino\");","module.exports = require(\"pino-http\");","module.exports = require(\"pino-pretty\");","import {logger} from \"../logger\";\r\nimport queries from \"./sql/queries\";\r\nimport {camelizeColumns} from \"../util/camelizeColumns\";\r\nimport {IDatabase} from \"pg-promise\";\r\nimport {ServerConfig} from \"@hotel-management-system/models\";\r\n\r\nimport pg_promise from \"pg-promise\";\r\n\r\ninterface Database {\r\n    db: IDatabase<any, any>,\r\n    createTables: () => Promise<void>,\r\n    testConnection: () => Promise<void>,\r\n}\r\n\r\nconst createDatabase = (options: ServerConfig): Database => {\r\n    const pgp = pg_promise({\r\n        receive(e) {\r\n            camelizeColumns(e.data);\r\n        }\r\n    });\r\n\r\n    const db = pgp({\r\n        host: options.database.host,\r\n        port: options.database.port,\r\n        database: options.database.database,\r\n        user: options.database.user,\r\n        password: options.database.password\r\n    });\r\n\r\n    const testConnection = (): Promise<void> => {\r\n        return new Promise<void>((resolve, reject) => {\r\n            db.connect()\r\n                .then((e) => {\r\n                    logger.debug(`Connected to database ${e.client.connectionParameters.host}`);\r\n                    resolve();\r\n                })\r\n                .catch((err) => {\r\n                    logger.fatal(\"Failed to connect to database\");\r\n                    logger.fatal(err);\r\n                    reject(err);\r\n                });\r\n        })\r\n\r\n    }\r\n    const createTables = async () => {\r\n        logger.debug(\"Creating tables\");\r\n        await db.none(queries.tables.createAll).then(() => {\r\n            logger.debug(\"Created tables\");\r\n        }).catch((err) => {\r\n            logger.fatal(\"Failed to create tables\");\r\n            logger.fatal(err);\r\n            process.exit(1);\r\n        });\r\n    }\r\n\r\n\r\n    return {\r\n        db,\r\n        createTables,\r\n        testConnection\r\n    }\r\n}\r\n\r\n\r\nexport default createDatabase;","const queries = {\r\n    tables: {\r\n        createAll: `\r\n            CREATE TABLE IF NOT EXISTS roles (\r\n            role_id SERIAL PRIMARY KEY,\r\n            name VARCHAR(255) UNIQUE NOT NULL,\r\n            permission_data text[] NOT NULL\r\n            );\r\n            CREATE TABLE IF NOT EXISTS users (\r\n                user_id SERIAL PRIMARY KEY,\r\n                username VARCHAR(255) UNIQUE NOT NULL,\r\n                password VARCHAR(255) NOT NULL,\r\n                password_salt VARCHAR(255) NOT NULL,\r\n                first_name VARCHAR(255) NOT NULL,\r\n                last_name VARCHAR(255) NOT NULL,\r\n                email VARCHAR(255) NOT NULL,\r\n                phone_number VARCHAR(255) NOT NULL,\r\n                position VARCHAR(255) NOT NULL,\r\n                role_id INTEGER NOT NULL,\r\n                FOREIGN KEY (role_id) REFERENCES roles(role_id)\r\n            );\r\n            CREATE TABLE IF NOT EXISTS token_revocation_list (\r\n                token_id SERIAL PRIMARY KEY,\r\n                token VARCHAR(255) NOT NULL,\r\n                revokedAt TIMESTAMP NOT NULL\r\n            );\r\n            CREATE TABLE IF NOT EXISTS guests (\r\n                guest_id SERIAL PRIMARY KEY,\r\n                first_name VARCHAR(255) NOT NULL,\r\n                last_name VARCHAR(255) NOT NULL,\r\n                email VARCHAR(255) NOT NULL,\r\n                phone_number VARCHAR(255) NOT NULL,\r\n                address VARCHAR(255) NOT NULL\r\n            );\r\n            CREATE TABLE IF NOT EXISTS rooms (\r\n                room_id SERIAL PRIMARY KEY,\r\n                room_code VARCHAR(255) UNIQUE NOT NULL,\r\n                price_per_night FLOAT NOT NULL,\r\n                description TEXT NOT NULL,\r\n                status VARCHAR(255) NOT NULL\r\n            );\r\n            CREATE TABLE IF NOT EXISTS reservations (\r\n                reservation_id SERIAL PRIMARY KEY,\r\n                room_id INTEGER NOT NULL,\r\n                guest_id INTEGER NOT NULL,\r\n                start_date TIMESTAMP NOT NULL,\r\n                end_date TIMESTAMP NOT NULL,\r\n                check_in_date TIMESTAMP,\r\n                check_out_date TIMESTAMP,\r\n                reservation_status VARCHAR(255) NOT NULL,\r\n                FOREIGN KEY (room_id) REFERENCES rooms(room_id),\r\n                FOREIGN KEY (guest_id) REFERENCES guests(guest_id)\r\n            );\r\n        `,\r\n    },\r\n    roles: {\r\n        getRoleById: `\r\n            SELECT * FROM roles WHERE role_id = $1\r\n        `,\r\n        checkRoleExists: `\r\n            SELECT EXISTS(SELECT 1 FROM roles WHERE role_id = $1)\r\n        `,\r\n        addRole: `\r\n            INSERT INTO roles (name, permission_data)\r\n            VALUES ($1, $2)\r\n            RETURNING *\r\n        `,\r\n        updateRole: `\r\n            UPDATE roles\r\n            SET name = $1, permission_data = $2\r\n            WHERE role_id = $3\r\n            RETURNING *\r\n        `,\r\n        getAllRoles: `\r\n            SELECT * FROM roles\r\n        `,\r\n        getUsersWithRoles: `\r\n            SELECT * FROM users WHERE role_id = $1\r\n        `,\r\n        deleteRole: `\r\n            DELETE FROM roles\r\n            WHERE role_id = $1\r\n        `,\r\n    },\r\n    users: {\r\n        getUserById: `\r\n            SELECT * FROM users WHERE user_id = $1\r\n        `,\r\n        getUserByUsername: `\r\n            SELECT * FROM users WHERE username = $1\r\n        `,\r\n        createUser: `\r\n            INSERT INTO users (username, password, password_salt, first_name, last_name, email, phone_number, position, role_id)\r\n            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\r\n            RETURNING user_id\r\n        `,\r\n        updateUser: `\r\n            UPDATE users\r\n            SET username = $1, password = $2, password_salt = $3, first_name = $4, last_name = $5, email = $6, phone_number = $7, position = $8, role_id = $9\r\n            WHERE user_id = $10\r\n            RETURNING *\r\n        `,\r\n        deleteUser: `\r\n            DELETE FROM users\r\n            WHERE user_id = $1\r\n        `,\r\n        getAllUsers: `\r\n            SELECT * FROM users\r\n        `,\r\n        searchUsers: `\r\n            SELECT * FROM users WHERE first_name ILIKE '%$1#%' OR last_name ILIKE '%$1#%'\r\n        `\r\n    },\r\n    tokenRevocationList: {\r\n        revokeToken: `\r\n            INSERT INTO token_revocation_list (token, revokedAt) VALUES ($1, $2)\r\n        `,\r\n        checkTokenRevoked: `\r\n            SELECT * FROM token_revocation_list WHERE token = $1\r\n        `,\r\n    },\r\n    guests: {\r\n        getGuests: `\r\n            SELECT * FROM guests\r\n        `,\r\n        getGuestById: `\r\n            SELECT * FROM guests WHERE guest_id = $1\r\n        `,\r\n        addGuest: `\r\n            INSERT INTO guests (first_name, last_name, email, phone_number, address)\r\n            VALUES ($1, $2, $3, $4, $5)\r\n            RETURNING *\r\n        `,\r\n        updateGuest: `\r\n            UPDATE guests\r\n            SET first_name = $1, last_name = $2, email = $3, phone_number = $4, address = $5\r\n            WHERE guest_id = $6\r\n            RETURNING *\r\n        `,\r\n        deleteGuest: `\r\n            DELETE FROM guests\r\n            WHERE guest_id = $1\r\n        `,\r\n        checkGuestExistsById: `\r\n            SELECT EXISTS(SELECT 1 FROM guests WHERE guest_id = $1)\r\n        `,\r\n        searchGuests: `\r\n            SELECT * FROM guests WHERE first_name || ' ' || last_name ILIKE '%$1#%';\r\n        `,\r\n    },\r\n    reservations: {\r\n        getReservations: `\r\n            SELECT * FROM reservations\r\n        `,\r\n        getReservationById: `\r\n            SELECT * FROM reservations WHERE reservation_id = $1\r\n        `,\r\n        addReservation: `\r\n            INSERT INTO reservations (room_id, guest_id, start_date, end_date, reservation_status)\r\n            VALUES ($1, $2, $3, $4, $5)\r\n            RETURNING *\r\n        `,\r\n        updateReservation: `\r\n            UPDATE reservations\r\n            SET room_id = $1, guest_id = $2, start_date = $3, end_date = $4\r\n            WHERE reservation_id = $5\r\n            RETURNING *\r\n        `,\r\n        deleteReservation: `\r\n            DELETE FROM reservations\r\n            WHERE reservation_id = $1\r\n        `,\r\n        checkReservationExistsById: `\r\n            SELECT EXISTS(SELECT 1 FROM reservations WHERE reservation_id = $1)\r\n        `,\r\n        searchReservations: `\r\n            SELECT * FROM reservations WHERE start_date ILIKE '%$1#%' OR end_date ILIKE '%$1#%'\r\n        `,\r\n    },\r\n    rooms: {\r\n        getRooms: `\r\n            SELECT * FROM rooms\r\n        `,\r\n        getRoomById: `\r\n            SELECT * FROM rooms WHERE room_id = $1\r\n        `,\r\n        addRoom: `\r\n            INSERT INTO rooms (room_code, price_per_night, description, status)\r\n            VALUES ($1, $2, $3, $4)\r\n            RETURNING *\r\n        `,\r\n        updateRoom: `\r\n            UPDATE rooms\r\n            SET room_code = $1, price_per_night = $2, description = $3, status = $4\r\n            WHERE room_id = $5\r\n            RETURNING *\r\n        `,\r\n        deleteRoom: `\r\n            DELETE FROM rooms\r\n            WHERE room_id = $1\r\n        `,\r\n        checkRoomExistsById: `\r\n            SELECT EXISTS(SELECT 1 FROM rooms WHERE room_id = $1)\r\n        `,\r\n        searchRooms: `\r\n            SELECT * FROM rooms WHERE room_code ILIKE '%$1#%' OR description ILIKE '%$1#%'\r\n        `,\r\n        checkRoomExistsByRoomCode: `\r\n            SELECT EXISTS(SELECT 1 FROM rooms WHERE room_code = $1)\r\n        `,\r\n    }\r\n}\r\n\r\nexport default queries;","import pgPromise from \"pg-promise\";\r\n\r\nexport const camelizeColumns = (data) => {\r\n    const template = data[0];\r\n    for (const prop in template) {\r\n        const camel = pgPromise.utils.camelize(prop);\r\n        if (!(camel in template)) {\r\n            for (let i = 0; i < data.length; i++) {\r\n                const d = data[i];\r\n                d[camel] = d[prop];\r\n                delete d[prop];\r\n            }\r\n        }\r\n    }\r\n}","module.exports = require(\"pg-promise\");","module.exports = require(\"express\");","import express from 'express';\r\nimport {IUsersDAO} from \"../database/users\";\r\nimport {User} from \"@hotel-management-system/models\";\r\nimport {IAuthenticationMiddleware} from \"../middleware/authentication\";\r\nimport {IAuthorizationMiddleware} from \"../middleware/authorization\";\r\nimport {IRolesDAO} from \"../database/roles\";\r\nimport strings from \"../util/strings\";\r\nimport {ITokenRevocationListDAO} from \"../database/tokens\";\r\nimport hashPassword from \"../util/hashPassword\";\r\nimport crypto from \"crypto\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport Joi from \"joi\";\r\ninterface UsersRoute {\r\n    router: express.Router\r\n}\r\n\r\nconst makeUsersRoute = (\r\n    usersDAO: IUsersDAO,\r\n    rolesDAO: IRolesDAO,\r\n    tokenRevocationListDAO: ITokenRevocationListDAO,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware,\r\n    jwtSecret: string\r\n): UsersRoute => {\r\n    const router = express.Router();\r\n\r\n    const {\r\n        getUsers,\r\n        getUserById,\r\n        getUserByUsername,\r\n        createUser,\r\n        checkUserExists,\r\n        checkUserExistsById,\r\n        deleteUser,\r\n        updateUser,\r\n        searchUsers\r\n    } = usersDAO\r\n\r\n    const {\r\n        checkRoleExists\r\n    } = rolesDAO\r\n\r\n    const {\r\n        revokeToken\r\n    } = tokenRevocationListDAO\r\n\r\n    /**\r\n     * HTTP GET - /api/users\r\n     * Get all users\r\n     * Requires users.read permission\r\n     */\r\n    router.get('/', authentication, authorization('users.read'), async (req: any, res) => {\r\n        try {\r\n            const users = await getUsers();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.success,\r\n                data: users\r\n            })\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n\r\n    });\r\n\r\n    router.get('/me', authentication, async (req: any, res) => {\r\n        try {\r\n            const user = await getUserById(req.userId);\r\n\r\n            // if the user is null, return 404\r\n            if (user === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.userIdNotFound(req.userId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.success,\r\n                data: user\r\n            })\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP GET - /api/users/:userId\r\n     * Get a user by id\r\n     * Requires users.read permission\r\n     */\r\n    router.get('/:userId', authentication, authorization('users.read'), async (req, res) => {\r\n        try {\r\n            const userId = parseInt(req.params.userId);\r\n\r\n            if (isNaN(userId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.invalidUserId,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const user = await getUserById(userId);\r\n\r\n            // if the user is null, return 404\r\n            if (user === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.userIdNotFound(userId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.success,\r\n                data: user\r\n            })\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n    });\r\n\r\n    /**\r\n     * HTTP POST - /api/users/add\r\n     * Create a new user\r\n     */\r\n    router.post('/add', authentication, authorization('users.write'), async (req, res) => {\r\n        try {\r\n\r\n            const schema = Joi.object({\r\n                username: Joi.string().required(),\r\n                password: Joi.string().required(),\r\n                firstName: Joi.string().required(),\r\n                lastName: Joi.string().required(),\r\n                email: Joi.string().email().allow('', null).required(),\r\n                phoneNumber: Joi.string().allow('', null).required(),\r\n                position: Joi.string().allow('', null).required(),\r\n                roleId: Joi.number().required()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            if (await checkUserExists(req.body.username)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.CONFLICT,\r\n                    message: strings.api.userConflict(req.body.username),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            if (!await checkRoleExists(req.body.roleId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.roleIdNotFound(req.body.roleId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const salt = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n            const user: User = {\r\n                // the userId is set to 0 because it is not known yet. It will be set by the createUser function, but since we're using\r\n                // typescript, we need to set it to something.\r\n                userId: 0,\r\n                username: req.body.username,\r\n                password: hashPassword(req.body.password, salt),\r\n                passwordSalt: salt,\r\n                firstName: req.body.firstName,\r\n                lastName: req.body.lastName,\r\n                email: req.body.email,\r\n                phoneNumber: req.body.phoneNumber,\r\n                position: req.body.position,\r\n                roleId: req.body.roleId\r\n            }\r\n\r\n\r\n            await createUser(user);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: strings.api.success,\r\n                data: user\r\n            })\r\n\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n\r\n    })\r\n\r\n\r\n    /**\r\n     * HTTP DELETE - /api/users/:userId\r\n     * Delete a user by userId\r\n     */\r\n    router.delete('/:userId', authentication, authorization('users.delete'), async (req: express.Request, res) => {\r\n        try {\r\n            const userId = parseInt(req.params.userId);\r\n\r\n            //check if the user is trying to delete themselves\r\n            if (userId === req['userId']) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.cannotDeleteSelf,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            if (isNaN(userId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.invalidUserId,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // check if the user exists\r\n            if (!await checkUserExistsById(userId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.userIdNotFound(userId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            await deleteUser(userId);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.success,\r\n                data: null\r\n            })\r\n\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n\r\n    })\r\n\r\n    /**\r\n     * HTTP POST - /api/users/login\r\n     * Login a user\r\n     */\r\n    router.post('/login', async (req, res) => {\r\n        try {\r\n\r\n            const schema = Joi.object({\r\n                username: Joi.string().required(),\r\n                password: Joi.string().required()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const user = await getUserByUsername(req.body.username);\r\n\r\n            if (user === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.usernameNotFound(req.body.username),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // hash the password from the request body with the password salt from the database\r\n            const hashedPasswordFromRequest = hashPassword(req.body.password, user.passwordSalt);\r\n\r\n            // check if the hashed password matches the password from the database\r\n            if (hashedPasswordFromRequest !== user.password) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.UNAUTHORIZED,\r\n                    message: strings.api.incorrectPassword,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const jwtToken = jwt.sign({\r\n                userId: user.userId,\r\n                roleId: user.roleId,\r\n                username: user.username,\r\n                tokenUUID: crypto.randomBytes(16).toString('hex')\r\n            }, jwtSecret, {\r\n                expiresIn: '24h'\r\n            })\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.loginSuccessful,\r\n                data: {\r\n                    jwt: jwtToken\r\n                }\r\n            })\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP POST - /api/users/logout\r\n     * Logout a user by revoking the token.\r\n     */\r\n    router.post('/logout', authentication, async (req, res) => {\r\n        try {\r\n            const token = req.headers.authorization?.split(' ')[1];\r\n\r\n            if (token === undefined) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.tokenInvalid,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            await revokeToken(token);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.loggedOut,\r\n                data: null\r\n            })\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n    })\r\n\r\n    /**\r\n     * HTTP PATCH - /api/users/:userId\r\n     * Update user properties by userId\r\n     */\r\n    router.patch('/:userId', authentication, authorization('users.write'), async (req, res) => {\r\n        try {\r\n            const userId = parseInt(req.params.userId);\r\n\r\n            if (isNaN(userId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.invalidUserId,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                username: Joi.string(),\r\n                password: Joi.string().optional(),\r\n                firstName: Joi.string(),\r\n                lastName: Joi.string(),\r\n                email: Joi.string().email().optional().allow(''),\r\n                phoneNumber: Joi.string().optional().allow(''),\r\n                position: Joi.string().optional().allow(''),\r\n                roleId: Joi.number()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const user = await getUserById(userId);\r\n\r\n            if (user === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.userIdNotFound(userId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // check if the username is already taken\r\n            if (req.body.username !== undefined) {\r\n                if (req.body.username !== user.username) {\r\n                    if (await checkUserExists(req.body.username)) {\r\n                        return sendResponse(res, {\r\n                            success: false,\r\n                            statusCode: StatusCodes.CONFLICT,\r\n                            message: strings.api.userConflict(req.body.username),\r\n                            data: null\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n            // check if the role id is valid\r\n            if (req.body.roleId !== undefined) {\r\n                if (req.body.roleId !== user.roleId) {\r\n                    if (!await checkRoleExists(req.body.roleId)) {\r\n                        return sendResponse(res, {\r\n                            success: false,\r\n                            statusCode: StatusCodes.BAD_REQUEST,\r\n                            message: strings.api.roleIdNotFound(req.body.roleId),\r\n                            data: null\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n            const updatedUser = {\r\n                ...user,\r\n                ...req.body\r\n            }\r\n\r\n            // hash the password if it is defined\r\n            if (req.body.password !== undefined) {\r\n                const salt = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n                updatedUser.passwordSalt = salt;\r\n                updatedUser.password = hashPassword(req.body.password, salt)\r\n            }\r\n\r\n            await updateUser(updatedUser);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.success,\r\n                data: updatedUser\r\n            })\r\n\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n\r\n    })\r\n\r\n    router.get(\"/search\", authentication, authorization('users.read'), async (req, res) => {\r\n        try {\r\n            const query = req.query.q;\r\n\r\n            if (query === undefined) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.queryNotProvided,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const users = await searchUsers(query.toString());\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.success,\r\n                data: users\r\n            })\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default makeUsersRoute;\r\n\r\n","const strings = {\r\n    // API Response Messages\r\n    api: {\r\n        success: \"Success\",\r\n        serverError: \"The server encountered an internal error. Please try again later.\",\r\n        unauthorized: \"You are not authorized to perform this action.\",\r\n        unauthenticated: \"This action requires authentication.\",\r\n        cannotDeleteSelf: \"You cannot delete yourself.\",\r\n        missingField: (fieldName: string) => `The request body is missing the required field: ${fieldName}`,\r\n        tokenInvalid: \"The provided token is invalid.\",\r\n        invalidUserId: \"The provided userId is invalid.\",\r\n        userIdNotFound: (userId: number) => `User with userId ${userId} not found.`,\r\n        usernameNotFound: (username: string) => `User with username ${username} not found.`,\r\n        userConflict: (username: string) => `User with username ${username} already exists.`,\r\n        userConflictId: (userId: number) => `User with userId ${userId} already exists.`,\r\n        roleIdNotFound: (roleId: number) => `Role with roleId ${roleId} not found.`,\r\n        loggedOut: \"You have been logged out.\",\r\n        invalidField: (fieldName: string) => `The request body contains an invalid field: ${fieldName}`,\r\n        incorrectPassword: \"Incorrect password.\",\r\n        loginSuccessful: \"Login successful.\",\r\n        queryNotProvided: \"A query was not provided.\",\r\n        invalidRoomId: \"The provided roomId is invalid.\",\r\n        roomIdNotFound: (roomId: number) => `Room with roomId ${roomId} not found.`,\r\n        roomConflict: (roomCode: string) => `Room with room code ${roomCode} already exists.`,\r\n    }\r\n}\r\n\r\nexport default strings;","import crypto from \"crypto\";\r\n\r\nconst hashPassword = (password: string, salt: string): string => {\r\n    const hash = crypto.createHash('sha256');\r\n    hash.update(password + salt);\r\n    return hash.digest('hex');\r\n}\r\n\r\nexport default hashPassword","module.exports = require(\"crypto\");","module.exports = require(\"jsonwebtoken\");","import {ApiResponse} from \"@hotel-management-system/models\";\r\nimport express from \"express\";\r\n\r\nconst sendResponse = <T>(res: express.Response, responseObj: ApiResponse<T>) => {\r\n    res.status(responseObj.statusCode).json(responseObj);\r\n}\r\n\r\nexport default sendResponse;","module.exports = require(\"http-status-codes\");","module.exports = require(\"joi\");","import express from 'express';\r\nimport { IAuthenticationMiddleware } from '../middleware/authentication';\r\nimport { IAuthorizationMiddleware } from '../middleware/authorization';\r\nimport { IRoomsDAO } from '../database/rooms';\r\nimport { StatusCodes } from 'http-status-codes';\r\nimport sendResponse from '../util/sendResponse';\r\nimport strings from '../util/strings';\r\nimport Joi from 'joi';\r\nimport { Room } from '@hotel-management-system/models';\r\n\r\ninterface IRoomsRoute {\r\n    router: express.Router\r\n}\r\n\r\nexport const makeRoomsRoute = (\r\n    roomsDAO: IRoomsDAO,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware\r\n    ): IRoomsRoute => {\r\n\r\n    const router = express.Router();\r\n\r\n    const {\r\n        getRooms,\r\n        getRoomById,\r\n        createRoom,\r\n        checkRoomExistsById,\r\n        updateRoom,\r\n        deleteRoom,\r\n        checkRoomExistsByRoomCode\r\n    } = roomsDAO\r\n\r\n    /**\r\n     * GET /api/rooms\r\n     * Get all rooms\r\n     */\r\n    router.get('/', authentication, authorization('rooms.read'), async (req: any, res) => {\r\n        try {\r\n            const rooms = await getRooms();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.success,\r\n                data: rooms\r\n            })\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n    });\r\n\r\n    /**\r\n     * GET /api/rooms/:roomId\r\n     * Get room by id\r\n     */\r\n    router.get('/:roomId', authentication, authorization('rooms.read'), async (req: any, res) => {\r\n        try {\r\n            const roomId = parseInt(req.params.roomId);\r\n\r\n            if (isNaN(roomId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.invalidRoomId,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const room = await getRoomById(roomId);\r\n\r\n            if (room === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.roomIdNotFound(roomId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.success,\r\n                data: room\r\n            })\r\n\r\n\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n    })\r\n\r\n    /**\r\n     * POST /api/rooms/add\r\n     * Adds a new room\r\n     */\r\n    router.post(\"/add\", authentication, authorization('rooms.write'), async (req: any, res) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                roomCode: Joi.string().required(),\r\n                pricePerNight: Joi.number().required(),\r\n                description: Joi.string().required(),\r\n                status: Joi.string().required()\r\n            })\r\n\r\n            const { error } = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.details[0].message,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            // check if room with roomCode already exists\r\n            const roomCodeExists = await checkRoomExistsByRoomCode(req.body.roomCode);\r\n\r\n            if (roomCodeExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.CONFLICT,\r\n                    message: strings.api.roomConflict(req.body.roomCode),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const room: Room = {\r\n                roomCode: req.body.roomCode,\r\n                pricePerNight: req.body.pricePerNight,\r\n                description: req.body.description,\r\n                status: req.body.status\r\n            }\r\n\r\n            const newRoom = await createRoom(room);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: strings.api.success,\r\n                data: newRoom\r\n            })\r\n\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n    })\r\n\r\n    /**\r\n     * PATCH /api/rooms/:roomId\r\n     * Updates a room\r\n     */\r\n    router.patch(\"/:roomId\", authentication, authorization('rooms.write'), async (req: any, res) => {\r\n        try {\r\n            const roomId = parseInt(req.params.roomId);\r\n\r\n            if (isNaN(roomId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.invalidRoomId,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                roomCode: Joi.string().required(),\r\n                pricePerNight: Joi.number().required(),\r\n                description: Joi.string().required(),\r\n                status: Joi.string().required()\r\n            })\r\n\r\n            const { error } = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.details[0].message,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const room: Room = {\r\n                roomId: roomId,\r\n                roomCode: req.body.roomCode,\r\n                pricePerNight: req.body.pricePerNight,\r\n                description: req.body.description,\r\n                status: req.body.status\r\n            }\r\n\r\n            const roomExists = await checkRoomExistsById(roomId);\r\n\r\n            if (!roomExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.roomIdNotFound(roomId),\r\n                    data: null\r\n                })\r\n            }\r\n            \r\n            const updatedRoom = await updateRoom(room);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.success,\r\n                data: updatedRoom\r\n            })\r\n\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n    })\r\n\r\n    /**\r\n     * DELETE /api/rooms/:roomId\r\n     * Deletes a room\r\n     */\r\n    router.delete(\"/:roomId\", authentication, authorization('rooms.write'), async (req: any, res) => {\r\n        try {\r\n            const roomId = parseInt(req.params.roomId);\r\n\r\n            if (isNaN(roomId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.invalidRoomId,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const roomExists = await checkRoomExistsById(roomId);\r\n\r\n            if (!roomExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: strings.api.roomIdNotFound(roomId),\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            await deleteRoom(roomId);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.success,\r\n                data: null\r\n            })\r\n\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n}","module.exports = require(\"path\");","import {User} from \"@hotel-management-system/models\";\r\nimport pgPromise, {IDatabase} from \"pg-promise\";\r\nimport queries from \"./sql/queries\";\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\nimport queryResultErrorCode = pgPromise.errors.queryResultErrorCode;\r\n\r\nexport interface IUsersDAO {\r\n    getUsers: () => Promise<User[]>;\r\n    getUserById: (userId: number) => Promise<User | null>;\r\n    getUserByUsername: (username: string) => Promise<User | null>;\r\n    createUser: (user: User) => Promise<User>;\r\n    checkUserExists: (username: string) => Promise<boolean>;\r\n    checkUserExistsById: (userId: number) => Promise<boolean>;\r\n    deleteUser: (userId: number) => Promise<void>;\r\n    updateUser: (user: User) => Promise<User>;\r\n    searchUsers: (query: string) => Promise<User[]>;\r\n}\r\n\r\nconst makeUsersDAO = (db: IDatabase<any, any>): IUsersDAO => {\r\n    /**\r\n     * Get all users\r\n     * @returns A promise that resolves to a list of users\r\n     */\r\n    const getUsers = async (): Promise<User[]> => {\r\n        const users: User[] = await db.any(queries.users.getAllUsers);\r\n        return users;\r\n    };\r\n\r\n    /**\r\n     * Get a user by id\r\n     *\r\n     * @param userId The id of the user\r\n     * @returns A promise that resolves to the user if found, or null if not found\r\n     */\r\n    const getUserById = async (userId: number): Promise<User | null> => {\r\n        try {\r\n            const user: User = await db.oneOrNone(queries.users.getUserById, [\r\n                userId,\r\n            ]);\r\n            return user;\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get a user by username\r\n     * @param username\r\n     * @returns A promise that resolves to the user if found, or null if not found\r\n     */\r\n    const getUserByUsername = async (username: string): Promise<User | null> => {\r\n        try {\r\n            const user: User = await db.oneOrNone(queries.users.getUserByUsername, [\r\n                username,\r\n            ]);\r\n            return user;\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create a new user\r\n     * @param user\r\n     * @returns A promise that resolves to the created user with the id set.\r\n     */\r\n    const createUser = async (user: User): Promise<User> => {\r\n        const createdUser: User = await db.one(queries.users.createUser, [\r\n            user.username,\r\n            user.password,\r\n            user.passwordSalt,\r\n            user.firstName,\r\n            user.lastName,\r\n            user.email,\r\n            user.phoneNumber,\r\n            user.position,\r\n            user.roleId,\r\n        ]);\r\n        user.userId = createdUser.userId;\r\n        return user;\r\n    };\r\n\r\n    /**\r\n     * Check if a user with the given username exists\r\n     *\r\n     * @param username\r\n     * @returns A promise that resolves to true if the user exists, or false if not.\r\n     */\r\n    const checkUserExists = async (username: string): Promise<boolean> => {\r\n        try {\r\n            await db.one(queries.users.getUserByUsername, [\r\n                username,\r\n            ]);\r\n            return true;\r\n        } catch (e) {\r\n            if (\r\n                e instanceof QueryResultError &&\r\n                e.code === queryResultErrorCode.noData\r\n            ) {\r\n                return false;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n\r\n    };\r\n\r\n    const checkUserExistsById = async (userId: number): Promise<boolean> => {\r\n        try {\r\n            await db.one(queries.users.getUserById, [userId]);\r\n            return true;\r\n        } catch (e) {\r\n            if (\r\n                e instanceof QueryResultError &&\r\n                e.code === queryResultErrorCode.noData\r\n            ) {\r\n                return false;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Delete a user by id\r\n     *\r\n     * @param userId\r\n     * @returns A promise that resolves to void\r\n     */\r\n    const deleteUser = async (userId: number): Promise<void> => {\r\n        if (!(await checkUserExistsById(userId))) {\r\n            throw new Error(`User with id ${userId} not found`);\r\n        }\r\n\r\n        await db.none(queries.users.deleteUser, [userId]);\r\n    };\r\n\r\n    const updateUser = async (user: User): Promise<User> => {\r\n\r\n        if (!(await checkUserExistsById(user.userId))) {\r\n            throw new Error(`User with id ${user.userId} does not exist`);\r\n        }\r\n\r\n        return await db.one(queries.users.updateUser, [\r\n            user.username,\r\n            user.password,\r\n            user.passwordSalt,\r\n            user.firstName,\r\n            user.lastName,\r\n            user.email,\r\n            user.phoneNumber,\r\n            user.position,\r\n            user.roleId,\r\n            user.userId,\r\n        ]);\r\n    };\r\n\r\n    /**\r\n     * Search for users by first name or last name\r\n     * @param query\r\n     * @returns A promise that resolves to a list of users, an empty list if no users are found.\r\n     */\r\n    const searchUsers = async (query: string): Promise<User[]> => {\r\n        try {\r\n            const users: User[] = await db.any(queries.users.searchUsers, [\r\n                query,\r\n            ]);\r\n            return users;\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        getUsers,\r\n        getUserById,\r\n        getUserByUsername,\r\n        createUser,\r\n        checkUserExists,\r\n        checkUserExistsById,\r\n        deleteUser,\r\n        updateUser,\r\n        searchUsers,\r\n    };\r\n};\r\n\r\nexport default makeUsersDAO;\r\n","import {Role, User} from \"@hotel-management-system/models\";\r\nimport pgPromise, {IDatabase} from \"pg-promise\";\r\nimport queryResultErrorCode = pgPromise.errors.queryResultErrorCode;\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\nimport queries from \"./sql/queries\";\r\n\r\nexport interface IRolesDAO {\r\n    getRoleById: (roleId: number) => Promise<Role | null>,\r\n    checkRoleExists: (roleId: number) => Promise<boolean>,\r\n    addRole: (role: Role) => Promise<Role>,\r\n    updateRole: (role: Role) => Promise<Role>,\r\n    getAllRoles: () => Promise<Role[]>,\r\n    deleteRole: (roleId: number) => Promise<void>,\r\n    getUsersWithRoles: (roleId: number) => Promise<User[]>\r\n}\r\n\r\nexport const makeRolesDAO = (db: IDatabase<any, any>): IRolesDAO => {\r\n\r\n    /**\r\n     * Get role by id\r\n     * @param roleId \r\n     * @returns A promise that resolves to a role or null if no role is found.\r\n     */\r\n    const getRoleById = async (roleId: number): Promise<Role | null> => {\r\n        try {\r\n            const role: Role = await db.oneOrNone(queries.roles.getRoleById, [roleId]);\r\n            return role;\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if role exists\r\n     * @param roleId \r\n     * @returns A promise that resolves to true if role exists, false otherwise.\r\n     */\r\n    const checkRoleExists = async (roleId: number): Promise<boolean> => {\r\n        try {\r\n            const result: any = await db.one(queries.roles.checkRoleExists, [roleId]);\r\n            return result.exists;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add role.\r\n     * @param role \r\n     * @returns A promise that resolves to the added role containing the role id.\r\n     */\r\n    const addRole = (role: Role): Promise<Role> => {\r\n        return new Promise<Role>((resolve, reject) => {\r\n            db.one(`\r\n                INSERT INTO roles (name, permission_data)\r\n                VALUES ($1, $2)\r\n                RETURNING *\r\n            `, [role.name, role.permissionData]).then((role: Role) => {\r\n                resolve(role);\r\n            }).catch((err: any) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Update role.\r\n     * @param role \r\n     * @returns A promise that resolves to the updated role.\r\n     */\r\n    const updateRole = async (role: Role): Promise<Role> => {\r\n        try {\r\n            const updatedRole: Role = await db.one(queries.roles.updateRole, [role.name, role.permissionData, role.roleId]);\r\n            return updatedRole;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const getUsersWithRoles = async (roleId: number): Promise<User[]> => {\r\n        try {\r\n            const result: any = await db.manyOrNone(queries.roles.getUsersWithRoles, [roleId]);\r\n            return result;\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return [];\r\n            }\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const deleteRole = async (roleId: number): Promise<void> => {\r\n        try {\r\n            const role: Role = await db.none(queries.roles.deleteRole, [roleId]);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Get all roles.\r\n     * @returns A promise that resolves to an array of roles.\r\n     */\r\n    const getAllRoles = async (): Promise<Role[]> => {\r\n        const roles: Role[] = await db.manyOrNone(queries.roles.getAllRoles);\r\n        return roles;\r\n    }\r\n\r\n    return {\r\n        getRoleById,\r\n        checkRoleExists,\r\n        addRole,\r\n        updateRole,\r\n        getAllRoles,\r\n        deleteRole,\r\n        getUsersWithRoles\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default makeRolesDAO;\r\n\r\n","import {IDatabase} from \"pg-promise\";\r\nimport queries from \"./sql/queries\";\r\n\r\nexport interface ITokenRevocationListDAO {\r\n    revokeToken: (token: string) => Promise<void>,\r\n    checkTokenRevoked: (token: string) => Promise<boolean>\r\n}\r\n\r\nconst makeTokenRevocationListDAO = (db: IDatabase<any, any>): ITokenRevocationListDAO => {\r\n    const revokeToken = async (token: string): Promise<void> => {\r\n        const now = new Date();\r\n        await db.none(queries.tokenRevocationList.revokeToken, [token, now]);\r\n    }\r\n\r\n    const checkTokenRevoked = async (token: string): Promise<boolean> => {\r\n        const tokenRevocationList: any = await db.oneOrNone(queries.tokenRevocationList.checkTokenRevoked, [token]);\r\n        if (tokenRevocationList === null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    return {\r\n        revokeToken,\r\n        checkTokenRevoked\r\n    }\r\n}\r\n\r\nexport default makeTokenRevocationListDAO;","import {ApiResponse} from \"@hotel-management-system/models\";\r\nimport strings from \"../util/strings\";\r\nimport {ITokenRevocationListDAO} from \"../database/tokens\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport interface IAuthenticationMiddleware {\r\n    (req: any, res: any, next: any): void\r\n}\r\n\r\nconst makeAuthenticationMiddleware = (jwtSecret: string, tokenRevocationListDAO: ITokenRevocationListDAO): IAuthenticationMiddleware => {\r\n\r\n    const {\r\n        checkTokenRevoked\r\n    } = tokenRevocationListDAO\r\n    return async (req: any, res: any, next: any) => {\r\n        // check if the request has a jwt token\r\n        if (!req.headers.authorization) {\r\n            return res.status(401).send({\r\n                success: false,\r\n                message: strings.api.unauthenticated,\r\n                statusCode: 401,\r\n                data: null\r\n            } as ApiResponse<null>)\r\n        }\r\n\r\n        // verify the jwt token in Authorization Bearer header\r\n        const token = req.headers.authorization.split(' ')[1];\r\n\r\n        try {\r\n            // check if the token is in the token revocation list\r\n            const tokenRevoked = await checkTokenRevoked(token)\r\n\r\n            if (tokenRevoked) {\r\n                return res.status(401).send({\r\n                    success: false,\r\n                    message: strings.api.tokenInvalid,\r\n                    statusCode: 401,\r\n                    data: null\r\n                } as ApiResponse<null>)\r\n            }\r\n\r\n\r\n            // verify the token\r\n            jwt.verify(token, jwtSecret, (err, decoded) => {\r\n                if (err) {\r\n                    return res.status(401).send({\r\n                        success: false,\r\n                        message: strings.api.tokenInvalid,\r\n                        statusCode: 401,\r\n                        data: null\r\n                    } as ApiResponse<null>)\r\n                }\r\n                // add the user id to the request\r\n                req.userId = decoded.userId;\r\n                req.userRoleId = decoded.roleId;\r\n                next();\r\n            })\r\n        } catch (err) {\r\n            return res.status(500).send({\r\n                success: false,\r\n                message: strings.api.serverError,\r\n                statusCode: 500,\r\n                data: err\r\n            } as ApiResponse<null>)\r\n        }\r\n    }\r\n}\r\n\r\nexport default makeAuthenticationMiddleware;","import {ApiResponse} from \"@hotel-management-system/models\";\r\nimport strings from \"../util/strings\";\r\nimport {IRolesDAO} from \"../database/roles\";\r\nimport makePermissionChecker from \"../util/checkPermissions\";\r\n\r\nexport interface IAuthorizationMiddleware {\r\n    (requiredPermission: string): (req: any, res: any, next: any) => void\r\n}\r\n\r\nconst makeAuthorizationMiddleware = (rolesDAO: IRolesDAO): IAuthorizationMiddleware => {\r\n\r\n    const hasPermission = makePermissionChecker(rolesDAO);\r\n    return (requiredPermission: string) => {\r\n        const response: ApiResponse<null> = {\r\n            success: false,\r\n            statusCode: 500,\r\n            message: strings.api.serverError,\r\n            data: null\r\n        }\r\n        return async (req, res, next) => {\r\n            if (req.userRoleId === undefined) {\r\n                response.statusCode = 401;\r\n                response.message = strings.api.unauthenticated;\r\n                return res.status(response.statusCode).send(response);\r\n            }\r\n\r\n            try {\r\n                const userHasPermission = await hasPermission(requiredPermission, req.userRoleId);\r\n                if (!userHasPermission) {\r\n                    response.statusCode = 401;\r\n                    response.message = strings.api.unauthorized;\r\n                    return res.status(response.statusCode).send(response);\r\n                }\r\n\r\n                next();\r\n            } catch (err) {\r\n                response.statusCode = 500;\r\n                response.message = strings.api.serverError;\r\n                return res.status(response.statusCode).send(response);\r\n            }\r\n        }\r\n    };\r\n\r\n}\r\n\r\nexport default makeAuthorizationMiddleware;","import {IRolesDAO} from \"../database/roles\";\r\n\r\nexport interface IPermissionChecker {\r\n    (requiredPermission: string, roleId: number): Promise<boolean>\r\n}\r\nconst makePermissionChecker = (rolesDAO: IRolesDAO): IPermissionChecker => {\r\n\r\n    const {\r\n        getRoleById\r\n    } = rolesDAO;\r\n\r\n    return (requiredPermission: string, roleId: number): Promise<boolean> => {\r\n        return new Promise<boolean>((resolve) => {\r\n            getRoleById(roleId).then(role => {\r\n                if (role === null) {\r\n                    resolve(false);\r\n                }\r\n\r\n                const permissions = role.permissionData;\r\n                if (permissions.includes(requiredPermission) || permissions.includes(\"*\")) {\r\n                    resolve(true);\r\n                }\r\n\r\n                resolve(false);\r\n            })\r\n        })\r\n    };\r\n}\r\n\r\n\r\nexport default makePermissionChecker;","module.exports = require(\"process\");","import express from \"express\";\r\nimport {IRolesDAO} from \"../database/roles\";\r\nimport {IAuthenticationMiddleware} from \"../middleware/authentication\";\r\nimport {IAuthorizationMiddleware} from \"../middleware/authorization\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport {Role} from \"@hotel-management-system/models\"\r\nimport Joi from \"joi\";\r\n\r\nexport interface IRolesRoute {\r\n    router: express.Router\r\n}\r\n\r\n\r\nconst makeRolesRoute = (\r\n    rolesDAO: IRolesDAO,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware,\r\n): IRolesRoute => {\r\n    const {\r\n        getAllRoles,\r\n        addRole,\r\n        deleteRole,\r\n        checkRoleExists,\r\n        getUsersWithRoles,\r\n        getRoleById\r\n    } = rolesDAO\r\n\r\n    const router = express.Router();\r\n\r\n    router.get(\"/\", authentication, authorization(\"roles.read\"), async (req: express.Request, res: express.Response) => {\r\n        try {\r\n            const roles = await getAllRoles();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Roles fetched successfully\",\r\n                data: roles,\r\n            })\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to fetch roles\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    router.post(\"/add\", authentication, authorization(\"roles.add\"), async (req: express.Request, res: express.Response) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                name: Joi.string().required(),\r\n                permissionData: Joi.array().items(Joi.string()).required()\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: \"Invalid request body\",\r\n                    data: error.message,\r\n                })\r\n            }\r\n\r\n            // TODO: validate if permissions are valid\r\n            // TODO: check if a role with the same name already exists\r\n\r\n            const newRole: Role = {\r\n                name: req.body.name,\r\n                permissionData: req.body.permissionData\r\n            }\r\n\r\n            const role = await addRole(newRole);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: \"Role added successfully\",\r\n                data: role,\r\n            })\r\n            \r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to add role\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    router.delete(\"/:roleId\", authentication, authorization(\"roles.delete\"), async (req: express.Request, res: express.Response) => {\r\n        try {\r\n            const roleId = parseInt(req.params.roleId);\r\n\r\n            // check if role exists\r\n            const roleExists = await checkRoleExists(roleId);\r\n\r\n            if (!roleExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: \"Role not found\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if any user has this role\r\n            const usersWithRole = await getUsersWithRoles(roleId);\r\n\r\n            if (usersWithRole.length > 0) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: \"Cannot delete role as there are users with this role\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const role = await deleteRole(roleId);\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Role deleted successfully\",\r\n                data: role,\r\n            })\r\n        } catch (err) {\r\n            console.log(err)\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to delete role\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    router.get(\"/:roleId\", authentication, authorization(\"roles.read\"), async (req: express.Request, res: express.Response) => {\r\n        try {\r\n            const roleId = parseInt(req.params.roleId);\r\n\r\n            // check if role exists\r\n            const roleExists = await checkRoleExists(roleId);\r\n\r\n            if (!roleExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: \"Role not found\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const role = await getRoleById(roleId);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Role fetched successfully\",\r\n                data: role,\r\n            })\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to fetch role\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n}\r\n\r\nexport default makeRolesRoute;","import {\r\n    Guest\r\n} from \"@hotel-management-system/models\"\r\nimport pgPromise, {IDatabase} from \"pg-promise\";\r\nimport queries from \"./sql/queries\";\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\nimport queryResultErrorCode = pgPromise.errors.queryResultErrorCode;\r\n\r\nexport interface IGuestDAO {\r\n    getGuests(): Promise<Guest[]>;\r\n    addGuest(guest: Guest): Promise<Guest>;\r\n    updateGuest(guest: Guest): Promise<Guest>;\r\n    deleteGuest(guestId: number): Promise<void>;\r\n    getGuestById(id: number): Promise<Guest>;\r\n    checkGuestExistsById(id: number): Promise<boolean>;\r\n    searchGuests(query: string): Promise<Guest[]>;\r\n}\r\n\r\nconst makeGuestDAO = (db: IDatabase<any, any>): IGuestDAO => {\r\n    const getGuests = async (): Promise<Guest[]> => {\r\n        try {\r\n            const guests: Guest[] = await db.any(queries.guests.getGuests);\r\n            return guests;\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return [];\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    const addGuest = async (guest: Guest): Promise<Guest> => {\r\n        try {\r\n            const newGuest: Guest = await db.one(queries.guests.addGuest, [\r\n                guest.firstName,\r\n                guest.lastName,\r\n                guest.email,\r\n                guest.phoneNumber,\r\n                guest.address\r\n            ]);\r\n            return newGuest;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const updateGuest = async (guest: Guest): Promise<Guest> => {\r\n        try {\r\n            const updatedGuest: Guest = await db.one(queries.guests.updateGuest, [\r\n                guest.firstName,\r\n                guest.lastName,\r\n                guest.email,\r\n                guest.phoneNumber,\r\n                guest.address,\r\n                guest.guestId\r\n            ]);\r\n            return updatedGuest;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const deleteGuest = async (guestId: number): Promise<void> => {\r\n        try {\r\n            const deletedGuest: Guest = await db.none(queries.guests.deleteGuest, [\r\n                guestId\r\n            ]);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const checkGuestExistsById = async (id: number): Promise<boolean> => {\r\n        try {\r\n            const exists: boolean = await db.one(queries.guests.checkGuestExistsById, [\r\n                id\r\n            ]);\r\n            return exists;\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return false;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    const getGuestById = async (id: number): Promise<Guest> => {\r\n        try {\r\n            const guest: Guest = await db.one(queries.guests.getGuestById, [\r\n                id\r\n            ]);\r\n            return guest;\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    const searchGuests = async (query: string): Promise<Guest[]> => {\r\n        try {\r\n            const guests: Guest[] = await db.any(queries.guests.searchGuests, [\r\n                query\r\n            ]);\r\n            return guests;\r\n        } catch (err) {\r\n            if (\r\n                err instanceof QueryResultError &&\r\n                err.code === queryResultErrorCode.noData\r\n            ) {\r\n                return [];\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        getGuests,\r\n        addGuest,\r\n        updateGuest,\r\n        deleteGuest,\r\n        checkGuestExistsById,\r\n        getGuestById,\r\n        searchGuests\r\n    }\r\n}\r\n\r\nexport default makeGuestDAO;","import express from \"express\";\r\nimport { IGuestDAO } from \"../database/guests\";\r\nimport { IAuthenticationMiddleware } from \"../middleware/authentication\";\r\nimport { IAuthorizationMiddleware } from \"../middleware/authorization\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\nimport {Guest} from \"@hotel-management-system/models\"\r\nimport Joi from \"joi\";\r\nimport strings from \"../util/strings\";\r\n\r\n\r\nexport interface IGuestRoute {\r\n    router: express.Router\r\n}\r\n\r\nconst makeGuestsRoute = (\r\n    guestsDAO: IGuestDAO,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware,\r\n) => {\r\n    const {\r\n        getGuests,\r\n        addGuest,\r\n        updateGuest,\r\n        deleteGuest,\r\n        checkGuestExistsById,\r\n        getGuestById,\r\n        searchGuests\r\n    } = guestsDAO\r\n\r\n    const router = express.Router();\r\n\r\n    router.get(\"/\", authentication, authorization(\"guests.read\"), async (req: express.Request, res: express.Response) => {\r\n        try {\r\n            const guests = await getGuests();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Guests fetched successfully\",\r\n                data: guests,\r\n            })\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to fetch guests\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    router.get(\"/search\", authentication, authorization('guests.read'), async (req, res) => {\r\n        try {\r\n            const query = req.query.q;\r\n\r\n            if (query === undefined || query === null || query === \"\") {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: strings.api.queryNotProvided,\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const users = await searchGuests(query.toString());\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: strings.api.success,\r\n                data: users\r\n            })\r\n        } catch (e) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: strings.api.serverError,\r\n                data: e\r\n            })\r\n        }\r\n    })\r\n\r\n    router.get(\"/:guestId\", authentication, authorization(\"guests.read\"), async (req: express.Request, res: express.Response) => {\r\n        try {\r\n            const guestId = parseInt(req.params.guestId);\r\n\r\n            if (isNaN(guestId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: \"Invalid guest id\",\r\n                    data: null,\r\n                })\r\n            }\r\n            const guest = await getGuestById(guestId);\r\n\r\n            if (guest === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: \"Guest not found\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Guest fetched successfully\",\r\n                data: guest,\r\n            })\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to fetch guest\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    router.post(\"/add\", authentication, authorization(\"guests.create\"), async (req: express.Request, res: express.Response) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                firstName: Joi.string().required(),\r\n                lastName: Joi.string().required(),\r\n                phoneNumber: Joi.string().optional().allow(\"\"),\r\n                address: Joi.string().optional().allow(\"\"),\r\n                email: Joi.string().optional().allow(\"\"),\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: \"Invalid request body\",\r\n                    data: error.message,\r\n                })\r\n            }\r\n\r\n            const newGuest: Guest = {\r\n                firstName: req.body.firstName,\r\n                lastName: req.body.lastName,\r\n                phoneNumber: req.body.phoneNumber,\r\n                address: req.body.address,\r\n                email: req.body.email,\r\n            }\r\n\r\n            const guest = await addGuest(newGuest);\r\n            \r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.CREATED,\r\n                message: \"Guest added successfully\",\r\n                data: guest,\r\n            })\r\n\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to add guest\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    }) \r\n\r\n    router.patch(\"/:guestId\", authentication, authorization(\"guests.update\"), async (req: express.Request, res: express.Response) => {\r\n        try {\r\n            const guestId = parseInt(req.params.guestId);\r\n\r\n            if (isNaN(guestId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: \"Invalid guest id\",\r\n                    data: null,\r\n                })\r\n            }\r\n            // check if guest exists\r\n            const guestExists = await checkGuestExistsById(guestId);\r\n\r\n            if (!guestExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: \"Guest not found\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                firstName: Joi.string().required(),\r\n                lastName: Joi.string().required(),\r\n                phoneNumber: Joi.string().optional().allow(\"\"),\r\n                address: Joi.string().optional().allow(\"\"),\r\n                email: Joi.string().optional().allow(\"\"),\r\n            })\r\n\r\n            const {error} = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: \"Invalid request body\",\r\n                    data: error.message,\r\n                })\r\n            }\r\n\r\n            const updatedGuest: Guest = {\r\n                guestId: guestId,\r\n                firstName: req.body.firstName,\r\n                lastName: req.body.lastName,\r\n                phoneNumber: req.body.phoneNumber,\r\n                address: req.body.address,\r\n                email: req.body.email,\r\n            }\r\n\r\n            const guest = await updateGuest(updatedGuest);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Guest updated successfully\",\r\n                data: guest,\r\n            })\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to update guest\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    router.delete(\"/:guestId\", authentication, authorization(\"guests.delete\"), async (req: express.Request, res: express.Response) => {\r\n        try {\r\n            const guestId = parseInt(req.params.guestId);\r\n\r\n            if (isNaN(guestId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: \"Invalid guest id\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if guest exists\r\n            const guestExists = await checkGuestExistsById(guestId);\r\n\r\n            if (!guestExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: \"Guest not found\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const guest = await deleteGuest(guestId);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Guest deleted successfully\",\r\n                data: null,\r\n            })\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to delete guest\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    \r\n\r\n    return {\r\n        router\r\n    }\r\n}\r\n\r\nexport default makeGuestsRoute;","import { Reservation } from '@hotel-management-system/models'\r\nimport { IDatabase } from 'pg-promise';\r\nimport queries from './sql/queries';\r\nimport pgPromise = require('pg-promise');\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\nimport queryResultErrorCode = pgPromise.errors.queryResultErrorCode;\r\n\r\n\r\nexport interface IReservationDAO {\r\n    getReservations(): Promise<Reservation[]>;\r\n    getReservationById(reservationId: number): Promise<Reservation | null>;\r\n    createReservation(reservation: Reservation): Promise<Reservation>;\r\n    checkReservationExistsById(reservationId: number): Promise<boolean>;\r\n    updateReservation(reservation: Reservation): Promise<Reservation>;\r\n    deleteReservation(reservationId: number): Promise<void>;\r\n}\r\n\r\nexport const makeReservationDAO = (db: IDatabase<any,any>): IReservationDAO => {\r\n    const getReservations = async (): Promise<Reservation[]> => {\r\n        try {\r\n            return await db.any(queries.reservations.getReservations);\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return [];\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    const getReservationById = async (reservationId: number): Promise<Reservation | null> => {\r\n        try {\r\n            const reservation = await db.oneOrNone(queries.reservations.getReservationById, [reservationId]);\r\n            return reservation;\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkReservationExistsById = async (reservationId: number): Promise<boolean> => {\r\n        try {\r\n            const exists = await db.one(queries.reservations.checkReservationExistsById, [reservationId]);\r\n            return exists.exists;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const createReservation = async (reservation: Reservation): Promise<Reservation> => {\r\n        try {\r\n            const newReservation = await db.one(queries.reservations.addReservation, [reservation.roomId, reservation.guestId, reservation.startDate, reservation.endDate, reservation.reservationStatus]);\r\n            return newReservation;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const updateReservation = async (reservation: Reservation): Promise<Reservation> => {\r\n        try {\r\n            const updatedReservation = await db.one(queries.reservations.updateReservation, [reservation.roomId, reservation.guestId, reservation.startDate, reservation.endDate, reservation.reservationId]);\r\n            return updatedReservation;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const deleteReservation = async (reservationId: number): Promise<void> => {\r\n        try {\r\n            await db.none(queries.reservations.deleteReservation, [reservationId]);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    return {\r\n        getReservations,\r\n        getReservationById,\r\n        createReservation,\r\n        deleteReservation,\r\n        updateReservation,\r\n        checkReservationExistsById\r\n    }\r\n}\r\n\r\n","import express from \"express\";\r\nimport { IReservationDAO } from \"../database/reservations\";\r\nimport { IAuthenticationMiddleware } from \"../middleware/authentication\";\r\nimport { IAuthorizationMiddleware } from \"../middleware/authorization\";\r\nimport sendResponse from \"../util/sendResponse\";\r\nimport { StatusCodes } from \"http-status-codes\";\r\nimport Joi from \"joi\";\r\nimport {Reservation} from \"@hotel-management-system/models\"\r\nimport { IGuestDAO } from \"../database/guests\";\r\n\r\ninterface IReservationsRoute {\r\n    router: express.Router\r\n}\r\n\r\nexport const makeReservationsRoute = (\r\n    reservationsDAO: IReservationDAO,\r\n    guestsDAO: IGuestDAO,\r\n    authentication: IAuthenticationMiddleware,\r\n    authorization: IAuthorizationMiddleware,\r\n): IReservationsRoute => {\r\n    const router = express.Router();\r\n\r\n    const {\r\n        getReservations,\r\n        getReservationById,\r\n        createReservation,\r\n        checkReservationExistsById,\r\n        updateReservation,\r\n        deleteReservation\r\n    } = reservationsDAO\r\n\r\n    const {\r\n        checkGuestExistsById\r\n    } = guestsDAO\r\n\r\n    /**\r\n     * Get all reservations\r\n     */\r\n    router.get(\"/\", authentication, authorization(\"reservations.read\"), async (req: express.Request, res: express.Response) => {\r\n        try {\r\n            const reservations = await getReservations();\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Reservations fetched successfully\",\r\n                data: reservations,\r\n            })\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to fetch reservations\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Get reservation by id\r\n     */\r\n    router.get(\"/:reservationId\", authentication, authorization(\"reservations.read\"), async (req, res) => {\r\n        try {\r\n            const reservationId = parseInt(req.params.reservationId);\r\n\r\n            if (isNaN(reservationId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: \"Invalid reservation id\",\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            const reservation = await getReservationById(reservationId);\r\n\r\n            if (reservation === null) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: \"Reservation not found\",\r\n                    data: null\r\n                })\r\n            }\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Reservation fetched successfully\",\r\n                data: reservation,\r\n            })\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to fetch reservation\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Create reservation\r\n     */\r\n    router.post(\"/add\", authentication, authorization(\"reservations.create\"), async (req, res) => {\r\n        try {\r\n            const schema = Joi.object({\r\n                reservationId: Joi.number().optional(),\r\n                roomId: Joi.number().required(),\r\n                guestId: Joi.number().required(),\r\n                startDate: Joi.date().required(),\r\n                endDate: Joi.date().required(),\r\n                checkInDate: Joi.date().optional(),\r\n                checkOutDate: Joi.date().optional(),\r\n                reservationStatus: Joi.string().optional()\r\n            })\r\n\r\n            const { error } = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const reservation:Reservation = {\r\n                reservationId: req.body.reservationId,\r\n                roomId: req.body.roomId,\r\n                guestId: req.body.guestId,\r\n                startDate: req.body.startDate,\r\n                endDate: req.body.endDate,\r\n                checkInDate: req.body.checkInDate,\r\n                checkOutDate: req.body.checkOutDate,\r\n                reservationStatus: req.body.reservationStatus\r\n            }\r\n\r\n            const newReservation = await createReservation(reservation);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Reservation created successfully\",\r\n                data: newReservation,\r\n            })\r\n\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to create reservation\",\r\n                data: err,\r\n            })\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Update reservation\r\n     */\r\n    router.patch(\"/:reservationId\", authentication, authorization(\"reservations.update\"), async (req, res) => {\r\n        try {\r\n            \r\n            const reservationId = parseInt(req.params.reservationId);\r\n\r\n            if (isNaN(reservationId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: \"Invalid reservation id\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if reservation exists\r\n            const exists = await checkReservationExistsById(reservationId);\r\n\r\n            if (!exists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: \"Reservation not found\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            const schema = Joi.object({\r\n                reservationId: Joi.number().required(),\r\n                roomId: Joi.number().required(),\r\n                guestId: Joi.number().required(),\r\n                startDate: Joi.date().required(),\r\n                endDate: Joi.date().required(),\r\n                checkInDate: Joi.date().optional(),\r\n                checkOutDate: Joi.date().optional(),\r\n                reservationStatus: Joi.string().optional()\r\n            })\r\n\r\n            const { error } = schema.validate(req.body);\r\n\r\n            if (error) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: error.message,\r\n                    data: null,\r\n                })\r\n            }\r\n            \r\n\r\n            // check if the guest exists\r\n            const guestExists = await checkGuestExistsById(req.body.guestId);\r\n\r\n            if (!guestExists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: \"Guest not found\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // TODO: check if the room exists\r\n\r\n            //parse the dates\r\n            const startDate = new Date(req.body.startDate);\r\n            const endDate = new Date(req.body.endDate);\r\n            \r\n\r\n            const reservation:Reservation = {\r\n                reservationId: req.body.reservationId,\r\n                roomId: req.body.roomId,\r\n                guestId: req.body.guestId,\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                checkInDate: req.body.checkInDate,\r\n                checkOutDate: req.body.checkOutDate,\r\n                reservationStatus: req.body.reservationStatus\r\n            }\r\n\r\n            const updatedReservation = await updateReservation(reservation);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Reservation updated successfully\",\r\n                data: updatedReservation,\r\n            })\r\n\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to update reservation\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Delete reservation\r\n     */\r\n    router.delete(\"/:reservationId\", authentication, authorization(\"reservations.delete\"), async (req, res) => {\r\n        try {\r\n            const reservationId = parseInt(req.params.reservationId);\r\n\r\n            if (isNaN(reservationId)) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.BAD_REQUEST,\r\n                    message: \"Invalid reservation id\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            // check if reservation exists\r\n            const exists = await checkReservationExistsById(reservationId);\r\n\r\n            if (!exists) {\r\n                return sendResponse(res, {\r\n                    success: false,\r\n                    statusCode: StatusCodes.NOT_FOUND,\r\n                    message: \"Reservation not found\",\r\n                    data: null,\r\n                })\r\n            }\r\n\r\n            await deleteReservation(reservationId);\r\n\r\n            return sendResponse(res, {\r\n                success: true,\r\n                statusCode: StatusCodes.OK,\r\n                message: \"Reservation deleted successfully\",\r\n                data: null,\r\n            })\r\n\r\n        } catch (err) {\r\n            return sendResponse(res, {\r\n                success: false,\r\n                statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n                message: \"Failed to delete reservation\",\r\n                data: err.message,\r\n            })\r\n        }\r\n    })\r\n\r\n    return {\r\n        router\r\n    }\r\n}\r\n","import {Room} from \"@hotel-management-system/models\";\r\nimport queries from \"./sql/queries\";\r\nimport pgPromise = require(\"pg-promise\");\r\nimport QueryResultError = pgPromise.errors.QueryResultError;\r\nimport queryResultErrorCode = pgPromise.errors.queryResultErrorCode;\r\nimport { IDatabase } from \"pg-promise\";\r\n\r\nexport interface IRoomsDAO {\r\n    getRooms(): Promise<Room[]>;\r\n    getRoomById(roomId: number): Promise<Room | null>;\r\n    createRoom(room: Room): Promise<Room>;\r\n    checkRoomExistsById(roomId: number): Promise<boolean>;\r\n    updateRoom(room: Room): Promise<Room>;\r\n    deleteRoom(roomId: number): Promise<void>;\r\n    checkRoomExistsByRoomCode(roomCode: string): Promise<boolean>;\r\n}\r\n\r\nexport const makeRoomsDAO = (db: IDatabase<any,any>): IRoomsDAO => {\r\n    const getRooms = async (): Promise<Room[]> => {\r\n        try {\r\n            return await db.any(queries.rooms.getRooms);\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return [];\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    const getRoomById = async (roomId: number): Promise<Room | null> => {\r\n        try {\r\n            const room = await db.oneOrNone(queries.rooms.getRoomById, [roomId]);\r\n            return room;\r\n        } catch (err) {\r\n            if (err instanceof QueryResultError && err.code === queryResultErrorCode.noData) {\r\n                return null;\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkRoomExistsById = async (roomId: number): Promise<boolean> => {\r\n        try {\r\n            const exists = await db.one(queries.rooms.checkRoomExistsById, [roomId]);\r\n            return exists.exists;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const checkRoomExistsByRoomCode = async (roomCode: string): Promise<boolean> => {\r\n        try {\r\n            const exists = await db.one(queries.rooms.checkRoomExistsByRoomCode, [roomCode]);\r\n            return exists.exists;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const createRoom = async (room: Room): Promise<Room> => {\r\n        try {\r\n            const newRoom = await db.one(queries.rooms.addRoom, [room.roomCode, room.pricePerNight, room.description, room.status]);\r\n            return newRoom;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const updateRoom = async (room: Room): Promise<Room> => {\r\n        try {\r\n            const updatedRoom = await db.one(queries.rooms.updateRoom, [room.roomCode, room.pricePerNight, room.description, room.status, room.roomId]);\r\n            return updatedRoom;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const deleteRoom = async (roomId: number): Promise<void> => {\r\n        try {\r\n            await db.none(queries.rooms.deleteRoom, [roomId]);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    return {\r\n        getRooms,\r\n        getRoomById,\r\n        createRoom,\r\n        checkRoomExistsById,\r\n        updateRoom,\r\n        deleteRoom,\r\n        checkRoomExistsByRoomCode\r\n    }\r\n}","module.exports = require(\"os\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\nimport makeConfig from \"./config\";\r\nimport startServer from \"./startServer\";\r\nimport {logger} from \"./logger\";\r\nimport os from \"os\";\r\nimport path from \"path\";\r\n\r\nconst config = makeConfig();\r\n// check if command line arguments were passed\r\nif (process.argv.length > 2) {\r\n    // load config from command line arguments\r\n    config.loadFromArgs(process.argv.slice(2))\r\n        .then(async () => {\r\n            const server = await startServer(config.getConfig())\r\n            return server.start();\r\n        })\r\n        .catch((err) => {\r\n            logger.fatal(err);\r\n            process.exit(1);\r\n        })\r\n} else {\r\n    // load config from file\r\n    const homedir = os.homedir();\r\n    const configPath = path.join(homedir, '.config', 'hotel-management-system-backend', 'server-config.json');\r\n    logger.info(`Loading config from ${configPath}`)\r\n    config.loadFromFile(configPath)\r\n        .then(async () => {\r\n            logger.info(\"Loaded config\");\r\n            const server = await startServer(config.getConfig())\r\n            return server.start();\r\n        })\r\n        .catch((err) => {\r\n            logger.fatal(err);\r\n            process.exit(1);\r\n        })\r\n}\r\n\r\nexport {\r\n    config\r\n}\r\n\r\n\r\n\r\n\r\n"],"names":[],"sourceRoot":""}